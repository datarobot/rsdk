% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/comments_api.R
\docType{class}
\name{CommentsApi}
\alias{CommentsApi}
\title{Comments operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Comments
}
\examples{

## ------------------------------------------------
## Method `CommentsApi$CommentsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
comment <- Comment$new() # Comment |

api.instance <- CommentsApi$new()
result <- api.instance$CommentsCreate(comment=comment)
}

## ------------------------------------------------
## Method `CommentsApi$CommentsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
commentId <- 'commentId_example' # character | The ID of the comment

api.instance <- CommentsApi$new()
result <- api.instance$CommentsDelete(commentId)
}

## ------------------------------------------------
## Method `CommentsApi$CommentsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
entityId <- 'entityId_example' # character | ID of the entity to retrieve comments of
entityType <- 'entityType_example' # character | Type of the entity to retrieve a comments of, currently only useCase is supported
offset <- 0 # integer | The number of records to skip over. Default 0.
limit <- 100 # integer | The number of records to return in the range from 1 to 100. Default 100.
orderBy <- 'orderBy_example' # character | Sort comments by a field of the comment.

api.instance <- CommentsApi$new()
result <- api.instance$CommentsList(entityId, entityType, offset=offset, limit=limit, orderBy=orderBy)
}

## ------------------------------------------------
## Method `CommentsApi$CommentsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
commentId <- 'commentId_example' # character | The ID of the comment
commentUpdate <- CommentUpdate$new() # CommentUpdate |

api.instance <- CommentsApi$new()
result <- api.instance$CommentsPatch(commentId, commentUpdate=commentUpdate)
}

## ------------------------------------------------
## Method `CommentsApi$CommentsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
commentId <- 'commentId_example' # character | The ID of the comment

api.instance <- CommentsApi$new()
result <- api.instance$CommentsRetrieve(commentId)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{CommentsApi$new()}}
\item \href{#method-CommentsCreate}{\code{CommentsApi$CommentsCreate()}}
\item \href{#method-CommentsDelete}{\code{CommentsApi$CommentsDelete()}}
\item \href{#method-CommentsList}{\code{CommentsApi$CommentsList()}}
\item \href{#method-CommentsPatch}{\code{CommentsApi$CommentsPatch()}}
\item \href{#method-CommentsRetrieve}{\code{CommentsApi$CommentsRetrieve()}}
\item \href{#method-clone}{\code{CommentsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommentsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommentsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-CommentsCreate}{}}}
\subsection{Method \code{CommentsCreate()}}{
Post a comment
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommentsApi$CommentsCreate(comment = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{comment}}{\link{Comment}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Post a comment


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{201}} The comment was successfully created
\itemize{
}
\item \strong{\code{422}} The request was formatted improperly
\itemize{
}
}
}

\subsection{Returns}{
\link{CommentRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
comment <- Comment$new() # Comment |

api.instance <- CommentsApi$new()
result <- api.instance$CommentsCreate(comment=comment)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommentsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-CommentsDelete}{}}}
\subsection{Method \code{CommentsDelete()}}{
Delete a comment
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommentsApi$CommentsDelete(commentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{commentId}}{character. The ID of the comment}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a comment


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The use case comment was deleted
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
commentId <- 'commentId_example' # character | The ID of the comment

api.instance <- CommentsApi$new()
result <- api.instance$CommentsDelete(commentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommentsList"></a>}}
\if{latex}{\out{\hypertarget{method-CommentsList}{}}}
\subsection{Method \code{CommentsList()}}{
List comments
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommentsApi$CommentsList(
  entityId,
  entityType,
  offset = 0,
  limit = 100,
  orderBy = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entityId}}{character. ID of the entity to retrieve comments of}

\item{\code{entityType}}{Enum < \link{useCase, model, catalog} > Type of the entity to retrieve a comments of, currently only useCase is supported}

\item{\code{offset}}{integer. The number of records to skip over. Default 0.}

\item{\code{limit}}{integer. The number of records to return in the range from 1 to 100. Default 100.}

\item{\code{orderBy}}{Enum < \link{createdAt, -createdAt, updatedAt, -updatedAt} > Sort comments by a field of the comment.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List comments


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
entityId <- 'entityId_example' # character | ID of the entity to retrieve comments of
entityType <- 'entityType_example' # character | Type of the entity to retrieve a comments of, currently only useCase is supported
offset <- 0 # integer | The number of records to skip over. Default 0.
limit <- 100 # integer | The number of records to return in the range from 1 to 100. Default 100.
orderBy <- 'orderBy_example' # character | Sort comments by a field of the comment.

api.instance <- CommentsApi$new()
result <- api.instance$CommentsList(entityId, entityType, offset=offset, limit=limit, orderBy=orderBy)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommentsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-CommentsPatch}{}}}
\subsection{Method \code{CommentsPatch()}}{
Update a comment
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommentsApi$CommentsPatch(commentId, commentUpdate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{commentId}}{character. The ID of the comment}

\item{\code{commentUpdate}}{\link{CommentUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a comment


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The comment was successfully updated
\itemize{
}
\item \strong{\code{422}} The request was formatted improperly
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
commentId <- 'commentId_example' # character | The ID of the comment
commentUpdate <- CommentUpdate$new() # CommentUpdate |

api.instance <- CommentsApi$new()
result <- api.instance$CommentsPatch(commentId, commentUpdate=commentUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommentsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-CommentsRetrieve}{}}}
\subsection{Method \code{CommentsRetrieve()}}{
Retrieve a comment
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommentsApi$CommentsRetrieve(commentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{commentId}}{character. The ID of the comment}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a comment


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{CommentRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
commentId <- 'commentId_example' # character | The ID of the comment

api.instance <- CommentsApi$new()
result <- api.instance$CommentsRetrieve(commentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommentsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
