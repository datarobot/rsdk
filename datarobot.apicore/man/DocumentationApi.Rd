% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/documentation_api.R
\docType{class}
\name{DocumentationApi}
\alias{DocumentationApi}
\title{Documentation operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Documentation
}
\examples{

## ------------------------------------------------
## Method `DocumentationApi$AutomatedDocumentOptionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentOptionsList()
}

## ------------------------------------------------
## Method `DocumentationApi$AutomatedDocumentsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
automatedDocCreate <- AutomatedDocCreate$new() # AutomatedDocCreate |

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentsCreate(automatedDocCreate=automatedDocCreate)
}

## ------------------------------------------------
## Method `DocumentationApi$AutomatedDocumentsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
documentId <- 'documentId_example' # character | Unique identifier of the generated document.

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentsDelete(documentId)
}

## ------------------------------------------------
## Method `DocumentationApi$AutomatedDocumentsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.
documentType <- OneOfstringarray$new() # OneOfstringarray | Query for one or more document types.
outputFormat <- OneOfstringarray$new() # OneOfstringarray | Query for one or more output formats.
locale <- OneOfstringarray$new() # OneOfstringarray | Query generated documents by one or more locales.
entityId <- OneOfstringarray$new() # OneOfstringarray | Query generated documents by one or more entity IDs. For Model Compliance docs, the entity ID is a model ID. For Autopilot Summary reports, query by project IDs.

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentsList(offset, limit, documentType=documentType, outputFormat=outputFormat, locale=locale, entityId=entityId)
}

## ------------------------------------------------
## Method `DocumentationApi$AutomatedDocumentsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
documentId <- 'documentId_example' # character | Unique identifier of the generated document.

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentsRetrieve(documentId)
}

## ------------------------------------------------
## Method `DocumentationApi$ComplianceDocTemplatesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
complianceDocTemplateCreate <- ComplianceDocTemplateCreate$new() # ComplianceDocTemplateCreate |

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesCreate(complianceDocTemplateCreate=complianceDocTemplateCreate)
}

## ------------------------------------------------
## Method `DocumentationApi$ComplianceDocTemplatesDefaultList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
type <- "normal" # character | Specifies the type of the default template to retrieve, either ``normal`` or ``timeSeries``. The ``normal`` template is applicable for all AutoML projects that are not time series. The ``timeSeries`` template is only applicable to time series projects.

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesDefaultList(type)
}

## ------------------------------------------------
## Method `DocumentationApi$ComplianceDocTemplatesDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
templateId <- 'templateId_example' # character | The Id of a model compliance document template accessible by the user

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesDelete(templateId)
}

## ------------------------------------------------
## Method `DocumentationApi$ComplianceDocTemplatesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
namePart <- "" # character | When present, only return templates with names that contain the given substring.
orderBy <- "id" # character | Sort order to apply to the dataset list. Prefix the attribute name with a dash to sort in descending order (e.g., orderBy='-id').
labels <- 'labels_example' # character | Name of labels to filter by.
projectType <- 'projectType_example' # character | Type of project templates to search for. If not specified, returns all project templates types.

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesList(offset=offset, limit=limit, namePart=namePart, orderBy=orderBy, labels=labels, projectType=projectType)
}

## ------------------------------------------------
## Method `DocumentationApi$ComplianceDocTemplatesPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
templateId <- 'templateId_example' # character | The Id of a model compliance document template accessible by the user
complianceDocTemplateUpdate <- ComplianceDocTemplateUpdate$new() # ComplianceDocTemplateUpdate |

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesPatch(templateId, complianceDocTemplateUpdate=complianceDocTemplateUpdate)
}

## ------------------------------------------------
## Method `DocumentationApi$ComplianceDocTemplatesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
templateId <- 'templateId_example' # character | The Id of a model compliance document template accessible by the user

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesRetrieve(templateId)
}

## ------------------------------------------------
## Method `DocumentationApi$ComplianceDocTemplatesSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
templateId <- 'templateId_example' # character | The template identifier
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesSharedRolesList(offset, limit, templateId, id=id, name=name, shareRecipientType=shareRecipientType)
}

## ------------------------------------------------
## Method `DocumentationApi$ComplianceDocTemplatesSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
templateId <- 'templateId_example' # character | The template identifier
sharedRolesUpdate <- SharedRolesUpdate$new() # SharedRolesUpdate |

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesSharedRolesPatchMany(templateId, sharedRolesUpdate=sharedRolesUpdate)
}

## ------------------------------------------------
## Method `DocumentationApi$ModelComplianceDocsInitializationsCreateOne`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
entityId <- 'entityId_example' # character | The ID of the model or model package the document corresponds to.
body <- NULL # object |

api.instance <- DocumentationApi$new()
result <- api.instance$ModelComplianceDocsInitializationsCreateOne(entityId, body=body)
}

## ------------------------------------------------
## Method `DocumentationApi$ModelComplianceDocsInitializationsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
entityId <- 'entityId_example' # character | The ID of the model or model package the document corresponds to.

api.instance <- DocumentationApi$new()
result <- api.instance$ModelComplianceDocsInitializationsRetrieve(entityId)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DocumentationApi$new()}}
\item \href{#method-AutomatedDocumentOptionsList}{\code{DocumentationApi$AutomatedDocumentOptionsList()}}
\item \href{#method-AutomatedDocumentsCreate}{\code{DocumentationApi$AutomatedDocumentsCreate()}}
\item \href{#method-AutomatedDocumentsDelete}{\code{DocumentationApi$AutomatedDocumentsDelete()}}
\item \href{#method-AutomatedDocumentsList}{\code{DocumentationApi$AutomatedDocumentsList()}}
\item \href{#method-AutomatedDocumentsRetrieve}{\code{DocumentationApi$AutomatedDocumentsRetrieve()}}
\item \href{#method-ComplianceDocTemplatesCreate}{\code{DocumentationApi$ComplianceDocTemplatesCreate()}}
\item \href{#method-ComplianceDocTemplatesDefaultList}{\code{DocumentationApi$ComplianceDocTemplatesDefaultList()}}
\item \href{#method-ComplianceDocTemplatesDelete}{\code{DocumentationApi$ComplianceDocTemplatesDelete()}}
\item \href{#method-ComplianceDocTemplatesList}{\code{DocumentationApi$ComplianceDocTemplatesList()}}
\item \href{#method-ComplianceDocTemplatesPatch}{\code{DocumentationApi$ComplianceDocTemplatesPatch()}}
\item \href{#method-ComplianceDocTemplatesRetrieve}{\code{DocumentationApi$ComplianceDocTemplatesRetrieve()}}
\item \href{#method-ComplianceDocTemplatesSharedRolesList}{\code{DocumentationApi$ComplianceDocTemplatesSharedRolesList()}}
\item \href{#method-ComplianceDocTemplatesSharedRolesPatchMany}{\code{DocumentationApi$ComplianceDocTemplatesSharedRolesPatchMany()}}
\item \href{#method-ModelComplianceDocsInitializationsCreateOne}{\code{DocumentationApi$ModelComplianceDocsInitializationsCreateOne()}}
\item \href{#method-ModelComplianceDocsInitializationsRetrieve}{\code{DocumentationApi$ModelComplianceDocsInitializationsRetrieve()}}
\item \href{#method-clone}{\code{DocumentationApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AutomatedDocumentOptionsList"></a>}}
\if{latex}{\out{\hypertarget{method-AutomatedDocumentOptionsList}{}}}
\subsection{Method \code{AutomatedDocumentOptionsList()}}{
List all available document types and locales.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$AutomatedDocumentOptionsList(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Check which document types and locales are available for generation with your account.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Available document types and locales retrieved.
\itemize{
}
}
}

\subsection{Returns}{
\link{AutomatedDocOptionsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentOptionsList()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AutomatedDocumentsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-AutomatedDocumentsCreate}{}}}
\subsection{Method \code{AutomatedDocumentsCreate()}}{
Request generation of automated document
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$AutomatedDocumentsCreate(automatedDocCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{automatedDocCreate}}{\link{AutomatedDocCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Request generation of an automated document that's available for your account. Below is an example request body to generate Model Compliance documentation:  .. sourcecode:: json      {         \"documentType\": \"MODEL_COMPLIANCE\",         \"entityId\": \"507f191e810c19729de860ea\",         \"outputFormat\": \"docx\"     }  For Autopilot Summary, set a corresponding document type, ``AUTOPILOT_SUMMARY``, and assign a needed project ID to the ``entityId`` value.  After the request is sent, the jobs needed for document generation are queued. You can see the status of the generation by polling the URL in the ``Location`` headers. After the generation is complete, the status URL will automatically redirect you to the resource location to download the document.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Document generation request accepted.
\itemize{
\item \strong{\code{Location}} URL to poll document generation status: :http:get:`/api/v2/status/(statusId)/`
}
\item \strong{\code{422}} Unable to process document generation request.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
automatedDocCreate <- AutomatedDocCreate$new() # AutomatedDocCreate |

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentsCreate(automatedDocCreate=automatedDocCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AutomatedDocumentsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-AutomatedDocumentsDelete}{}}}
\subsection{Method \code{AutomatedDocumentsDelete()}}{
Delete automated document.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$AutomatedDocumentsDelete(documentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{documentId}}{character. Unique identifier of the generated document.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a document using its ID. Example request:      .. code-block:: text              DELETE https://app.datarobot.com/api/v2/automatedDocuments/5ec4ea7e41054c158c5b002f/ HTTP/1.1             Authorization: Bearer DnwzBUSTOtKBO5Sp1hoUByG4YgZwCCw4


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Document successfully deleted.
\itemize{
}
\item \strong{\code{404}} Provided document ID not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
documentId <- 'documentId_example' # character | Unique identifier of the generated document.

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentsDelete(documentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AutomatedDocumentsList"></a>}}
\if{latex}{\out{\hypertarget{method-AutomatedDocumentsList}{}}}
\subsection{Method \code{AutomatedDocumentsList()}}{
List all generated documents.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$AutomatedDocumentsList(
  offset,
  limit,
  documentType = NULL,
  outputFormat = NULL,
  locale = NULL,
  entityId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Number of items to skip. Defaults to 0 if not provided.}

\item{\code{limit}}{integer. Number of items to return, defaults to 100 if not provided.}

\item{\code{documentType}}{\link{OneOfstringarray}. Query for one or more document types.}

\item{\code{outputFormat}}{\link{OneOfstringarray}. Query for one or more output formats.}

\item{\code{locale}}{\link{OneOfstringarray}. Query generated documents by one or more locales.}

\item{\code{entityId}}{\link{OneOfstringarray}. Query generated documents by one or more entity IDs. For Model Compliance docs, the entity ID is a model ID. For Autopilot Summary reports, query by project IDs.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get information about all previously generated documents available for your account. The information includes document ID and type, ID of the entity it was generated for, time of creation, and other information. If there are no matching documents, you will get a page with an empty data array.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of found documents retrieved.
\itemize{
}
}
}

\subsection{Returns}{
\link{AutomatedDocListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.
documentType <- OneOfstringarray$new() # OneOfstringarray | Query for one or more document types.
outputFormat <- OneOfstringarray$new() # OneOfstringarray | Query for one or more output formats.
locale <- OneOfstringarray$new() # OneOfstringarray | Query generated documents by one or more locales.
entityId <- OneOfstringarray$new() # OneOfstringarray | Query generated documents by one or more entity IDs. For Model Compliance docs, the entity ID is a model ID. For Autopilot Summary reports, query by project IDs.

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentsList(offset, limit, documentType=documentType, outputFormat=outputFormat, locale=locale, entityId=entityId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AutomatedDocumentsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-AutomatedDocumentsRetrieve}{}}}
\subsection{Method \code{AutomatedDocumentsRetrieve()}}{
Download generated document.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$AutomatedDocumentsRetrieve(documentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{documentId}}{character. Unique identifier of the generated document.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Download a generated Automated Documentation file.  .. code-block:: text      GET https://app.datarobot.com/api/v2/automatedDocuments/5ec4ea7e41054c158c5b002f/ HTTP/1.1     Authorization: Bearer DnwzBUSTOtKBO5Sp1hoUByG4YgZwCCw4  In response, you will get a file containing the generated documentation.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Download request succeeded.
\itemize{
\item \strong{\code{ContentMinusDisposition}} Autogenerated filename (\"attachment;filename=report_name.outputFormat\").
\item \strong{\code{ContentMinusType}} MIME type corresponding to document file format
}
\item \strong{\code{404}} Documentation record not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
documentId <- 'documentId_example' # character | Unique identifier of the generated document.

api.instance <- DocumentationApi$new()
result <- api.instance$AutomatedDocumentsRetrieve(documentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceDocTemplatesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceDocTemplatesCreate}{}}}
\subsection{Method \code{ComplianceDocTemplatesCreate()}}{
Create a new compliance documentation template
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ComplianceDocTemplatesCreate(
  complianceDocTemplateCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{complianceDocTemplateCreate}}{\link{ComplianceDocTemplateCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new compliance documentation template. One can retrieve the default DataRobot template via ``GET /api/v2/complianceDocTemplates/default/`` endpoint.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Model compliance documentation template created successfully
\itemize{
\item \strong{\code{Location}} URL location of the newly created template.
}
\item \strong{\code{422}} Template cannot be created, e.g., invalid sections or name already exists
\itemize{
}
}
}

\subsection{Returns}{
\link{ComplianceDocTemplateCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
complianceDocTemplateCreate <- ComplianceDocTemplateCreate$new() # ComplianceDocTemplateCreate |

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesCreate(complianceDocTemplateCreate=complianceDocTemplateCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceDocTemplatesDefaultList"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceDocTemplatesDefaultList}{}}}
\subsection{Method \code{ComplianceDocTemplatesDefaultList()}}{
Retrieve the default documentation template
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ComplianceDocTemplatesDefaultList(type, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Enum < \link{normal, timeSeries} > Specifies the type of the default template to retrieve, either ``normal`` or ``timeSeries``. The ``normal`` template is applicable for all AutoML projects that are not time series. The ``timeSeries`` template is only applicable to time series projects.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the default documentation template.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully retrieved default template
\itemize{
}
}
}

\subsection{Returns}{
\link{ComplianceDocTemplateDefaultRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
type <- "normal" # character | Specifies the type of the default template to retrieve, either ``normal`` or ``timeSeries``. The ``normal`` template is applicable for all AutoML projects that are not time series. The ``timeSeries`` template is only applicable to time series projects.

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesDefaultList(type)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceDocTemplatesDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceDocTemplatesDelete}{}}}
\subsection{Method \code{ComplianceDocTemplatesDelete()}}{
Delete a compliance documentation template
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ComplianceDocTemplatesDelete(templateId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{templateId}}{character. The Id of a model compliance document template accessible by the user}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a compliance documentation template. Documentation previously generated using this template will remain unchanged.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Template deleted successfully
\itemize{
}
\item \strong{\code{403}} Insufficient permissions to delete template
\itemize{
}
\item \strong{\code{404}} Template not found
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
templateId <- 'templateId_example' # character | The Id of a model compliance document template accessible by the user

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesDelete(templateId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceDocTemplatesList"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceDocTemplatesList}{}}}
\subsection{Method \code{ComplianceDocTemplatesList()}}{
List compliance documentation templates
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ComplianceDocTemplatesList(
  offset = 0,
  limit = 100,
  namePart = "",
  orderBy = "id",
  labels = NULL,
  projectType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{namePart}}{character. When present, only return templates with names that contain the given substring.}

\item{\code{orderBy}}{Enum < \link{id, -id} > Sort order to apply to the dataset list. Prefix the attribute name with a dash to sort in descending order (e.g., orderBy='-id').}

\item{\code{labels}}{character. Name of labels to filter by.}

\item{\code{projectType}}{Enum < \link{autoMl, timeSeries} > Type of project templates to search for. If not specified, returns all project templates types.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List user's custom-built compliance documentation templates.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully returned list of templates
\itemize{
}
}
}

\subsection{Returns}{
\link{ComplianceDocTemplateListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
namePart <- "" # character | When present, only return templates with names that contain the given substring.
orderBy <- "id" # character | Sort order to apply to the dataset list. Prefix the attribute name with a dash to sort in descending order (e.g., orderBy='-id').
labels <- 'labels_example' # character | Name of labels to filter by.
projectType <- 'projectType_example' # character | Type of project templates to search for. If not specified, returns all project templates types.

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesList(offset=offset, limit=limit, namePart=namePart, orderBy=orderBy, labels=labels, projectType=projectType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceDocTemplatesPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceDocTemplatesPatch}{}}}
\subsection{Method \code{ComplianceDocTemplatesPatch()}}{
Update an existing model compliance documentation template
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ComplianceDocTemplatesPatch(
  templateId,
  complianceDocTemplateUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{templateId}}{character. The Id of a model compliance document template accessible by the user}

\item{\code{complianceDocTemplateUpdate}}{\link{ComplianceDocTemplateUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update an existing model compliance documentation template with the given ``templateId``. The template must be accessible by the user. If the ``templateId`` is not found for the user, the update cannot be performed. For a description of the template ``sections`` object options, see the sample ``sections`` on the schema below.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Model compliance documentation template updated successfully
\itemize{
}
\item \strong{\code{403}} Not enough permissions to edit template
\itemize{
}
\item \strong{\code{404}} Template not found
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
templateId <- 'templateId_example' # character | The Id of a model compliance document template accessible by the user
complianceDocTemplateUpdate <- ComplianceDocTemplateUpdate$new() # ComplianceDocTemplateUpdate |

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesPatch(templateId, complianceDocTemplateUpdate=complianceDocTemplateUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceDocTemplatesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceDocTemplatesRetrieve}{}}}
\subsection{Method \code{ComplianceDocTemplatesRetrieve()}}{
Retrieve a documentation template
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ComplianceDocTemplatesRetrieve(templateId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{templateId}}{character. The Id of a model compliance document template accessible by the user}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a JSON representation of a custom Compliance Documentation template.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully retrieved template
\itemize{
}
\item \strong{\code{404}} No matching template owned by this user was found
\itemize{
}
}
}

\subsection{Returns}{
\link{TemplateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
templateId <- 'templateId_example' # character | The Id of a model compliance document template accessible by the user

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesRetrieve(templateId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceDocTemplatesSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceDocTemplatesSharedRolesList}{}}}
\subsection{Method \code{ComplianceDocTemplatesSharedRolesList()}}{
Get template's access control list
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ComplianceDocTemplatesSharedRolesList(
  offset,
  limit,
  templateId,
  id = NULL,
  name = NULL,
  shareRecipientType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{templateId}}{character. The template identifier}

\item{\code{id}}{character. Only return roles for a user, group or organization with this identifier.}

\item{\code{name}}{character. Only return roles for a user, group or organization with this name.}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > List access controls for recipients with this type.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations who have access to this template and their roles on the template.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The template's access control list.
\itemize{
}
\item \strong{\code{400}} Both username and userId were specified
\itemize{
}
\item \strong{\code{404}} Either the template does not exist or the user does not have permissions to view the template.
\itemize{
}
}
}

\subsection{Returns}{
\link{SharingListV2Response}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
templateId <- 'templateId_example' # character | The template identifier
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesSharedRolesList(offset, limit, templateId, id=id, name=name, shareRecipientType=shareRecipientType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComplianceDocTemplatesSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ComplianceDocTemplatesSharedRolesPatchMany}{}}}
\subsection{Method \code{ComplianceDocTemplatesSharedRolesPatchMany()}}{
Update template's access controls
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ComplianceDocTemplatesSharedRolesPatchMany(
  templateId,
  sharedRolesUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{templateId}}{character. The template identifier}

\item{\code{sharedRolesUpdate}}{\link{SharedRolesUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Set roles for users on this template.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Roles updated successfully.
\itemize{
}
\item \strong{\code{409}} The request would leave the template without an owner.
\itemize{
}
\item \strong{\code{422}} One of the users in the request does not exist, or the request is otherwise invalid
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
templateId <- 'templateId_example' # character | The template identifier
sharedRolesUpdate <- SharedRolesUpdate$new() # SharedRolesUpdate |

api.instance <- DocumentationApi$new()
result <- api.instance$ComplianceDocTemplatesSharedRolesPatchMany(templateId, sharedRolesUpdate=sharedRolesUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ModelComplianceDocsInitializationsCreateOne"></a>}}
\if{latex}{\out{\hypertarget{method-ModelComplianceDocsInitializationsCreateOne}{}}}
\subsection{Method \code{ModelComplianceDocsInitializationsCreateOne()}}{
Initialize compliance documentation pre-processing for the model
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ModelComplianceDocsInitializationsCreateOne(
  entityId,
  body = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entityId}}{character. The ID of the model or model package the document corresponds to.}

\item{\code{body}}{object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Initialize compliance documentation pre-processing for the current model. This route must be called before generating documentation for a custom model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job to initialize compliance documentation pre-processing successfully started.
\itemize{
\item \strong{\code{Location}} URL to poll for getting a status of the job: :http:get:`/api/v2/status/(statusId)/`
}
\item \strong{\code{404}} Model not found.
\itemize{
}
\item \strong{\code{422}} Cannot prepare model for compliance document generation.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
entityId <- 'entityId_example' # character | The ID of the model or model package the document corresponds to.
body <- NULL # object |

api.instance <- DocumentationApi$new()
result <- api.instance$ModelComplianceDocsInitializationsCreateOne(entityId, body=body)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ModelComplianceDocsInitializationsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ModelComplianceDocsInitializationsRetrieve}{}}}
\subsection{Method \code{ModelComplianceDocsInitializationsRetrieve()}}{
Check if compliance documentation pre-processing is initialized for the model
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$ModelComplianceDocsInitializationsRetrieve(entityId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entityId}}{character. The ID of the model or model package the document corresponds to.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Check if compliance documentation pre-processing is initialized for the current model. This is only required for custom models.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve information about the status of the compliance documentation pre-preprocessing initialization.
\itemize{
}
\item \strong{\code{404}} Model not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelComplianceDocsInitializationsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
entityId <- 'entityId_example' # character | The ID of the model or model package the document corresponds to.

api.instance <- DocumentationApi$new()
result <- api.instance$ModelComplianceDocsInitializationsRetrieve(entityId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DocumentationApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
