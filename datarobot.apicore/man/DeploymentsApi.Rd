% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deployments_api.R
\docType{class}
\name{DeploymentsApi}
\alias{DeploymentsApi}
\title{Deployments operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Deployments
}
\examples{

## ------------------------------------------------
## Method `DeploymentsApi$DeletedDeploymentsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of deleted deployments to skip.
limit <- 20 # integer | The number of deleted deployments to return.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeletedDeploymentsList(offset, limit)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeletedDeploymentsPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentPermanentDelete <- DeploymentPermanentDelete$new() # DeploymentPermanentDelete | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeletedDeploymentsPatchMany(deploymentPermanentDelete=deploymentPermanentDelete)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsAccuracyList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
modelId <- 'modelId_example' # character | The id of the model for which metrics are being retrieved.
segmentAttribute <- 'segmentAttribute_example' # character | The name of the segment on which segment analysis is being performed.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
targetClasses <- 'targetClasses_example' # character | Comma separated list of target classes to filter out response

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsAccuracyList(deploymentId, start=start, end=end, modelId=modelId, segmentAttribute=segmentAttribute, segmentValue=segmentValue, targetClasses=targetClasses)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsAccuracyOverTimeList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | Start of the period to retrieve metric stats, defaults to 7 days ago from the end of the period.
end <- 'end_example' # character | End of the period to retrieve metric stats, defaults to the next top of the hour.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
modelId <- 'modelId_example' # character | The id of the model for which metrics are being retrieved.
metric <- 'metric_example' # character | Name of the metric.
segmentAttribute <- 'segmentAttribute_example' # character | The name of the segment on which segment analysis is being performed.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
targetClasses <- 'targetClasses_example' # character | List of target classes to filter out response

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsAccuracyOverTimeList(deploymentId, start=start, end=end, bucketSize=bucketSize, modelId=modelId, metric=metric, segmentAttribute=segmentAttribute, segmentValue=segmentValue, targetClasses=targetClasses)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsActualsFromDatasetCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentDatasetCreate <- DeploymentDatasetCreate$new() # DeploymentDatasetCreate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsActualsFromDatasetCreate(deploymentId, deploymentDatasetCreate=deploymentDatasetCreate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsActualsFromJSONCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentActuals <- DeploymentActuals$new() # DeploymentActuals | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsActualsFromJSONCreate(deploymentId, deploymentActuals=deploymentActuals)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsCapabilitiesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsCapabilitiesList(deploymentId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsChallengerPredictionsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerScore <- ChallengerScore$new() # ChallengerScore | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengerPredictionsCreate(deploymentId, challengerScore=challengerScore)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsChallengersCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerCreate <- ChallengerCreate$new() # ChallengerCreate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersCreate(deploymentId, challengerCreate=challengerCreate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsChallengersDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerId <- 'challengerId_example' # character | Unique identifier of the challenger.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersDelete(deploymentId, challengerId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsChallengersList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersList(deploymentId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsChallengersPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerId <- 'challengerId_example' # character | Unique identifier of the challenger.
challengerUpdate <- ChallengerUpdate$new() # ChallengerUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersPatch(deploymentId, challengerId, challengerUpdate=challengerUpdate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsChallengersRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerId <- 'challengerId_example' # character | Unique identifier of the challenger.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersRetrieve(deploymentId, challengerId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
ignoreManagementAgent <- "false" # character | Do not wait for management agent to delete the deployment first.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsDelete(deploymentId, ignoreManagementAgent=ignoreManagementAgent)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsFeatureDriftList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
modelId <- 'modelId_example' # character | ID of the model in the deployment. If not set, defaults to the deployment current model.
metric <- "psi" # character | Name of the metric used to calculate the drift. Can be one of psi, kl_divergence, dissimilarity, hellinger, and js_divergence. Defaults to psi.
offset <- 0 # integer | The number of features to skip, defaults to 0.
limit <- 200 # integer | The number of features to return, defaults to 25.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsFeatureDriftList(deploymentId, start=start, end=end, modelId=modelId, metric=metric, offset=offset, limit=limit, segmentAttribute=segmentAttribute, segmentValue=segmentValue)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsFeatureDriftOverTimeList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
featureNames <- list(c('featureNames_example')) # OneOfstringarray | List of feature names, limited to two per request.
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
modelId <- 'modelId_example' # character | The id of the model for which the features drift is being retrieved.
metric <- "psi" # character | Name of the metric used to calculate the drift. Can be one of psi, kl_divergence, dissimilarity, hellinger, and js_divergence. Defaults to psi.
segmentAttribute <- 'segmentAttribute_example' # character | The name of the segment on which segment analysis is being performed.
segmentValue <- 'segmentValue_example' # character | The value of the `segmentAttribute` to segment on.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsFeatureDriftOverTimeList(featureNames, deploymentId, start=start, end=end, bucketSize=bucketSize, modelId=modelId, metric=metric, segmentAttribute=segmentAttribute, segmentValue=segmentValue)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsFeaturesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of features to skip, defaults to 0.
limit <- 50 # integer | The number of features to return, defaults to 0.
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
includeNonPredictionFeatures <- "false" # character | When True will return all raw features in the universe dataset associated with the deployment, and when False will return only those raw features used to make predictions on the deployment.
forSegmentedAnalysis <- "false" # character | When True, features returned will be filtered to those usable for segmented analysis.
search <- 'search_example' # character | Case insensitive search against names of the deployment's features.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsFeaturesList(offset, limit, deploymentId, includeNonPredictionFeatures=includeNonPredictionFeatures, forSegmentedAnalysis=forSegmentedAnalysis, search=search)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsFromLearningModelCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentCreateFromLearningModel <- DeploymentCreateFromLearningModel$new() # DeploymentCreateFromLearningModel | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsFromLearningModelCreate(deploymentCreateFromLearningModel=deploymentCreateFromLearningModel)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsHumilityStatsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | Start of the period to retrieve service health stats, defaults to 7 days ago from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | End of the period to retrieve service health stats, defaults to the next top of the hour.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
modelId <- 'modelId_example' # character | The ID of the model to retrieve service health stats. If provided, only the service health stats for that  specific model will be retrieved. If not provided, the service healthstats for the deployment`s current model will be retrieved.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsHumilityStatsList(deploymentId, start=start, end=end, bucketSize=bucketSize, segmentAttribute=segmentAttribute, segmentValue=segmentValue, modelId=modelId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsHumilityStatsOverTimeList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | Start of the period to retrieve service health stats, defaults to 7 days ago from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | End of the period to retrieve service health stats, defaults to the next top of the hour.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
modelId <- 'modelId_example' # character | The ID of the model to retrieve service health stats. If provided, only the service health stats for that  specific model will be retrieved. If not provided, the service healthstats for the deployment`s current model will be retrieved.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsHumilityStatsOverTimeList(deploymentId, start=start, end=end, bucketSize=bucketSize, segmentAttribute=segmentAttribute, segmentValue=segmentValue, modelId=modelId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of deployments to skip. Defaults to 0.
limit <- 20 # integer | The number of deployments (greater than zero, max 100) to return. Defaults to 20.
orderBy <- 'orderBy_example' # character | The order to sort the deployments.Defaults to order by deployment last prediction timestamp in descending order.
search <- 'search_example' # character | Case insensitive search against deployment's label and description.
serviceHealth <- ['serviceHealth_example'] # array[character] | Filters deployments by their service health status.
modelHealth <- ['modelHealth_example'] # array[character] | Filters deployments by their model health status.
accuracyHealth <- ['accuracyHealth_example'] # array[character] | Filters deployments by their accuracy health status.
role <- 'role_example' # character | Filter deployments to only those that the authenticated user has the specified role for.
status <- ['status_example'] # array[character] | Filters deployments by their status
importance <- ['importance_example'] # array[character] | Filters deployments by their importance
lastPredictionTimestampStart <- 'lastPredictionTimestampStart_example' # character | Only include deployments that have had a prediction request on or after the specified timestamp.
lastPredictionTimestampEnd <- 'lastPredictionTimestampEnd_example' # character | Only include deployments that have had a prediction request before the specified timestamp.
predictionUsageDailyAvgGreaterThan <- 56 # integer | only include deployments that have had more than the specified number of predictions per day on average over the past week.
predictionUsageDailyAvgLessThan <- 56 # integer | Only include deployments that have had fewer than the specified number of predictions per day on average over the past week.
defaultPredictionServerId <- ['defaultPredictionServerId_example'] # array[character] | Filter deployments to those whose default prediction server has the specified id.
buildEnvironmentType <- ['buildEnvironmentType_example'] # array[character] | Filter deployments based on the type of their current model's build environment type.
executionEnvironmentType <- ['executionEnvironmentType_example'] # array[character] | Filter deployments based on the type of their execution environment.
predictionEnvironmentPlatform <- ['predictionEnvironmentPlatform_example'] # array[character] | Filter deployments based on prediction environment platform
hasDecisionFlow <- 'hasDecisionFlow_example' # character | Filter deployments based if it is a decision flow
createdByMe <- 'createdByMe_example' # character | Filter deployments to those created by the current user.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsList(offset, limit, orderBy=orderBy, search=search, serviceHealth=serviceHealth, modelHealth=modelHealth, accuracyHealth=accuracyHealth, role=role, status=status, importance=importance, lastPredictionTimestampStart=lastPredictionTimestampStart, lastPredictionTimestampEnd=lastPredictionTimestampEnd, predictionUsageDailyAvgGreaterThan=predictionUsageDailyAvgGreaterThan, predictionUsageDailyAvgLessThan=predictionUsageDailyAvgLessThan, defaultPredictionServerId=defaultPredictionServerId, buildEnvironmentType=buildEnvironmentType, executionEnvironmentType=executionEnvironmentType, predictionEnvironmentPlatform=predictionEnvironmentPlatform, hasDecisionFlow=hasDecisionFlow, createdByMe=createdByMe)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsModelPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
modelReplacementSubmission <- ModelReplacementSubmission$new() # ModelReplacementSubmission | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelPatchMany(deploymentId, modelReplacementSubmission=modelReplacementSubmission)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationHistoryList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelSecondaryDatasetConfigurationHistoryList(offset, limit, deploymentId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelSecondaryDatasetConfigurationList(deploymentId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
secondaryDatasetConfigUpdate <- SecondaryDatasetConfigUpdate$new() # SecondaryDatasetConfigUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelSecondaryDatasetConfigurationPatchMany(deploymentId, secondaryDatasetConfigUpdate=secondaryDatasetConfigUpdate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsModelValidationCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
modelReplacementValidationRequest <- ModelReplacementValidationRequest$new() # ModelReplacementValidationRequest | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelValidationCreate(deploymentId, modelReplacementValidationRequest=modelReplacementValidationRequest)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsMonitoringDataDeletionsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
monitoringDataDeletePayload <- MonitoringDataDeletePayload$new() # MonitoringDataDeletePayload | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsMonitoringDataDeletionsCreate(deploymentId, monitoringDataDeletePayload=monitoringDataDeletePayload)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsOnDemandReportsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
scheduledReportOnDemmand <- ScheduledReportOnDemmand$new() # ScheduledReportOnDemmand | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsOnDemandReportsCreate(deploymentId, scheduledReportOnDemmand=scheduledReportOnDemmand)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentUpdate <- DeploymentUpdate$new() # DeploymentUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsPatch(deploymentId, deploymentUpdate=deploymentUpdate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsPredictionInputsFromDatasetCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
predictionDatasetAssignment <- PredictionDatasetAssignment$new() # PredictionDatasetAssignment | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsPredictionInputsFromDatasetCreate(deploymentId, predictionDatasetAssignment=predictionDatasetAssignment)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsPredictionResultsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
modelId <- 'modelId_example' # character | The id of the model for which prediction results are being retrieved.
actualsPresent <- 'actualsPresent_example' # character | Filters predictions results to only those who have actuals present or with missing actuals.
accept <- 'accept_example' # character | Requested MIME type for the returned data

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsPredictionResultsList(deploymentId, start=start, end=end, offset=offset, limit=limit, modelId=modelId, actualsPresent=actualsPresent, accept=accept)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsPredictionsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
passthroughColumns <- ['passthroughColumns_example'] # array[character] | List of columns from a scoring dataset to return in the prediction response. If not specified, no columns will be present in the response. Mutually exclusive with `passthroughColumnsSet`.
passthroughColumnsSet <- 'passthroughColumnsSet_example' # character | If `passthroughColumnsSet=all` is passed, all columns from the scoring dataset are returned in the prediction response. All other values for this parameter are invalid. Mutually exclusive with `passthroughColumns`.
maxExplanations <- 'maxExplanations_example' # OneOfintegerstring | The maximum number of prediction explanations to supply per row of the dataset. The default `maxExplanations` is `3` when `xemp` based explanations are requested.  The default `maxExplanations` is `all` (no limit) when `shap` based explanations are requested.
maxCodes <- 'maxCodes_example' # OneOfintegerstring | Deprecated alias of `maxExplanations`.
thresholdHigh <- 3.4 # numeric | The high threshold, above which a prediction must score in order for prediction explanations to be computed for a row in the dataset. If neither `thresholdHigh` nor `thresholdLow` is specified, prediction explanations will be computed for all rows. This option is ignored when `shap` based explanations are requested.
thresholdLow <- 3.4 # numeric | The lower threshold, below which a prediction must score in order for prediction explanations to be computed for a row in the dataset. If neither `thresholdHigh` nor `thresholdLow` is specified, prediction explanations will be computed for all rows. This option is ignored when `shap` based explanations are requested.
excludeAdjustedPredictions <- TRUE # character | If `false`, include exposure-adjusted predictions in the response.
forecastPoint <- 'forecastPoint_example' # character | The time in the dataset relative to which predictions are generated. If not specified the default value is the value in the row with the latest specified timestamp.
predictionsStartDate <- 'predictionsStartDate_example' # character | The time in the dataset starting from which bulk predictions are generated. Should be defined together with `predictionsEndDate`. `forecastPoint` param can not be used if either `predictionsStartDate` or `predictionsEndDate` is passed.
predictionsEndDate <- 'predictionsEndDate_example' # character | The time in the dataset until which bulk predictions are generated. Should be defined together with `predictionsStartDate`. `forecastPoint` param can not be used if either `predictionsStartDate` or `predictionsEndDate` is passed.
relaxKnownInAdvanceFeaturesCheck <- 'relaxKnownInAdvanceFeaturesCheck_example' # character | If `true`, missing values in the known in advance features are allowed in the forecast window at the prediction time. If omitted or `false`, missing values are not allowed.
predictionWarningEnabled <- 'predictionWarningEnabled_example' # character | If `true` is passed, predictions response will include `isOutlierPrediction` key for each record with result of outlier check.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsPredictionsCreate(deploymentId, passthroughColumns=passthroughColumns, passthroughColumnsSet=passthroughColumnsSet, maxExplanations=maxExplanations, maxCodes=maxCodes, thresholdHigh=thresholdHigh, thresholdLow=thresholdLow, excludeAdjustedPredictions=excludeAdjustedPredictions, forecastPoint=forecastPoint, predictionsStartDate=predictionsStartDate, predictionsEndDate=predictionsEndDate, relaxKnownInAdvanceFeaturesCheck=relaxKnownInAdvanceFeaturesCheck, predictionWarningEnabled=predictionWarningEnabled)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyCreate <- RetrainingPolicyCreate$new() # RetrainingPolicyCreate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesCreate(deploymentId, retrainingPolicyCreate=retrainingPolicyCreate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesDelete(deploymentId, retrainingPolicyId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesList(deploymentId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.
retrainingPolicyUpdate <- RetrainingPolicyUpdate$new() # RetrainingPolicyUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesPatch(deploymentId, retrainingPolicyId, retrainingPolicyUpdate=retrainingPolicyUpdate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRetrieve(deploymentId, retrainingPolicyId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesRunsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRunsCreate(deploymentId, retrainingPolicyId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesRunsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRunsList(deploymentId, retrainingPolicyId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesRunsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.
runId <- 'runId_example' # character | ID of the retraining policy run.
retrainingPolicyRunUpdate <- RetrainingPolicyRunUpdate$new() # RetrainingPolicyRunUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRunsPatch(deploymentId, retrainingPolicyId, runId, retrainingPolicyRunUpdate=retrainingPolicyRunUpdate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingPoliciesRunsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.
runId <- 'runId_example' # character | ID of the retraining policy run.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRunsRetrieve(deploymentId, retrainingPolicyId, runId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingSettingsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingSettingsList(deploymentId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrainingSettingsPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingSettingsUpdate <- RetrainingSettingsUpdate$new() # RetrainingSettingsUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingSettingsPatchMany(deploymentId, retrainingSettingsUpdate=retrainingSettingsUpdate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrieve(deploymentId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsScoringCodeBuildsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentsScoringCodeBuildPayload <- DeploymentsScoringCodeBuildPayload$new() # DeploymentsScoringCodeBuildPayload | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsScoringCodeBuildsCreate(deploymentId, deploymentsScoringCodeBuildPayload=deploymentsScoringCodeBuildPayload)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsScoringCodeList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
sourceCode <- "false" # character | Whether source code or binary of the Scoring Code will be retrieved
includeAgent <- "false" # character | Whether the Scoring code retrieved will include tracking agent
includePe <- "false" # character | Please use includePredictionExplanations parameter instead
includePredictionExplanations <- "false" # character | Whether the Scoring Code retrieved will include prediction explanations
includePredictionIntervals <- "false" # character | Whether the Scoring Code retrieved will include prediction intervals

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsScoringCodeList(deploymentId, sourceCode=sourceCode, includeAgent=includeAgent, includePe=includePe, includePredictionExplanations=includePredictionExplanations, includePredictionIntervals=includePredictionIntervals)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsServiceStatsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
modelId <- 'modelId_example' # character | The id of the model for which metrics are being retrieved.
executionTimeQuantile <- 0.5 # numeric | Quantile for `executionTime` metric, defaults to 0.5.
responseTimeQuantile <- 0.5 # numeric | Quantile for `responseTime` metric, defaults to 0.5.
slowRequestsThreshold <- 1000 # integer | Threshold for `slowRequests` metric, defaults to 1000.
monitoringType <- "serviceHealth" # character | The monitoring type for which segment attributes and segment values are being retrieved. Can be one of three options which corresponds to a deployment monitoring tab

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsServiceStatsList(deploymentId, start=start, end=end, bucketSize=bucketSize, segmentAttribute=segmentAttribute, segmentValue=segmentValue, modelId=modelId, executionTimeQuantile=executionTimeQuantile, responseTimeQuantile=responseTimeQuantile, slowRequestsThreshold=slowRequestsThreshold, monitoringType=monitoringType)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsServiceStatsOverTimeList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
metric <- "totalPredictions" # character | Name of the metric. See below for a list of supported metrics.
quantile <- 3.4 # numeric | A quantile for resulting data, used if `metric` is `executionTime` or `responseTime`, defaults to 0.5.
threshold <- 56 # integer | A threshold for filtering results, used if `metric` is `slowQueries`, defaults to 1000.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
modelId <- 'modelId_example' # character | The id of the model for which metrics are being retrieved.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsServiceStatsOverTimeList(deploymentId, start=start, end=end, bucketSize=bucketSize, metric=metric, quantile=quantile, threshold=threshold, segmentAttribute=segmentAttribute, segmentValue=segmentValue, modelId=modelId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsSettingsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsSettingsList(deploymentId)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsSettingsPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentSettingsUpdate <- DeploymentSettingsUpdate$new() # DeploymentSettingsUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsSettingsPatchMany(deploymentId, deploymentSettingsUpdate=deploymentSettingsUpdate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
deploymentId <- 'deploymentId_example' # character | The deployment ID.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsSharedRolesList(offset, limit, deploymentId, id=id, name=name, shareRecipientType=shareRecipientType)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | The deployment ID.
sharedRolesUpdateWithGrant <- SharedRolesUpdateWithGrant$new() # SharedRolesUpdateWithGrant | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsSharedRolesPatchMany(deploymentId, sharedRolesUpdateWithGrant=sharedRolesUpdateWithGrant)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsStatusPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentStatusUpdate <- DeploymentStatusUpdate$new() # DeploymentStatusUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsStatusPatchMany(deploymentId, deploymentStatusUpdate=deploymentStatusUpdate)
}

## ------------------------------------------------
## Method `DeploymentsApi$DeploymentsTargetDriftList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
modelId <- 'modelId_example' # character | An ID of the model in the deployment. If not set, defaults to the deployment current model.
metric <- "psi" # character | Metric used to calculate drift score.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsTargetDriftList(deploymentId, start=start, end=end, modelId=modelId, metric=metric, segmentAttribute=segmentAttribute, segmentValue=segmentValue)
}

## ------------------------------------------------
## Method `DeploymentsApi$PredictionServersList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- DeploymentsApi$new()
result <- api.instance$PredictionServersList(offset=offset, limit=limit)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DeploymentsApi-new}{\code{DeploymentsApi$new()}}
\item \href{#method-DeploymentsApi-DeletedDeploymentsList}{\code{DeploymentsApi$DeletedDeploymentsList()}}
\item \href{#method-DeploymentsApi-DeletedDeploymentsPatchMany}{\code{DeploymentsApi$DeletedDeploymentsPatchMany()}}
\item \href{#method-DeploymentsApi-DeploymentsAccuracyList}{\code{DeploymentsApi$DeploymentsAccuracyList()}}
\item \href{#method-DeploymentsApi-DeploymentsAccuracyOverTimeList}{\code{DeploymentsApi$DeploymentsAccuracyOverTimeList()}}
\item \href{#method-DeploymentsApi-DeploymentsActualsFromDatasetCreate}{\code{DeploymentsApi$DeploymentsActualsFromDatasetCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsActualsFromJSONCreate}{\code{DeploymentsApi$DeploymentsActualsFromJSONCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsCapabilitiesList}{\code{DeploymentsApi$DeploymentsCapabilitiesList()}}
\item \href{#method-DeploymentsApi-DeploymentsChallengerPredictionsCreate}{\code{DeploymentsApi$DeploymentsChallengerPredictionsCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsChallengersCreate}{\code{DeploymentsApi$DeploymentsChallengersCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsChallengersDelete}{\code{DeploymentsApi$DeploymentsChallengersDelete()}}
\item \href{#method-DeploymentsApi-DeploymentsChallengersList}{\code{DeploymentsApi$DeploymentsChallengersList()}}
\item \href{#method-DeploymentsApi-DeploymentsChallengersPatch}{\code{DeploymentsApi$DeploymentsChallengersPatch()}}
\item \href{#method-DeploymentsApi-DeploymentsChallengersRetrieve}{\code{DeploymentsApi$DeploymentsChallengersRetrieve()}}
\item \href{#method-DeploymentsApi-DeploymentsDelete}{\code{DeploymentsApi$DeploymentsDelete()}}
\item \href{#method-DeploymentsApi-DeploymentsFeatureDriftList}{\code{DeploymentsApi$DeploymentsFeatureDriftList()}}
\item \href{#method-DeploymentsApi-DeploymentsFeatureDriftOverTimeList}{\code{DeploymentsApi$DeploymentsFeatureDriftOverTimeList()}}
\item \href{#method-DeploymentsApi-DeploymentsFeaturesList}{\code{DeploymentsApi$DeploymentsFeaturesList()}}
\item \href{#method-DeploymentsApi-DeploymentsFromLearningModelCreate}{\code{DeploymentsApi$DeploymentsFromLearningModelCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsHumilityStatsList}{\code{DeploymentsApi$DeploymentsHumilityStatsList()}}
\item \href{#method-DeploymentsApi-DeploymentsHumilityStatsOverTimeList}{\code{DeploymentsApi$DeploymentsHumilityStatsOverTimeList()}}
\item \href{#method-DeploymentsApi-DeploymentsList}{\code{DeploymentsApi$DeploymentsList()}}
\item \href{#method-DeploymentsApi-DeploymentsModelPatchMany}{\code{DeploymentsApi$DeploymentsModelPatchMany()}}
\item \href{#method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationHistoryList}{\code{DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationHistoryList()}}
\item \href{#method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationList}{\code{DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationList()}}
\item \href{#method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationPatchMany}{\code{DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationPatchMany()}}
\item \href{#method-DeploymentsApi-DeploymentsModelValidationCreate}{\code{DeploymentsApi$DeploymentsModelValidationCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsMonitoringDataDeletionsCreate}{\code{DeploymentsApi$DeploymentsMonitoringDataDeletionsCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsOnDemandReportsCreate}{\code{DeploymentsApi$DeploymentsOnDemandReportsCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsPatch}{\code{DeploymentsApi$DeploymentsPatch()}}
\item \href{#method-DeploymentsApi-DeploymentsPredictionInputsFromDatasetCreate}{\code{DeploymentsApi$DeploymentsPredictionInputsFromDatasetCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsPredictionResultsList}{\code{DeploymentsApi$DeploymentsPredictionResultsList()}}
\item \href{#method-DeploymentsApi-DeploymentsPredictionsCreate}{\code{DeploymentsApi$DeploymentsPredictionsCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesCreate}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesDelete}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesDelete()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesList}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesList()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesPatch}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesPatch()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesRetrieve}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesRetrieve()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsCreate}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesRunsCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsList}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesRunsList()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsPatch}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesRunsPatch()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsRetrieve}{\code{DeploymentsApi$DeploymentsRetrainingPoliciesRunsRetrieve()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingSettingsList}{\code{DeploymentsApi$DeploymentsRetrainingSettingsList()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrainingSettingsPatchMany}{\code{DeploymentsApi$DeploymentsRetrainingSettingsPatchMany()}}
\item \href{#method-DeploymentsApi-DeploymentsRetrieve}{\code{DeploymentsApi$DeploymentsRetrieve()}}
\item \href{#method-DeploymentsApi-DeploymentsScoringCodeBuildsCreate}{\code{DeploymentsApi$DeploymentsScoringCodeBuildsCreate()}}
\item \href{#method-DeploymentsApi-DeploymentsScoringCodeList}{\code{DeploymentsApi$DeploymentsScoringCodeList()}}
\item \href{#method-DeploymentsApi-DeploymentsServiceStatsList}{\code{DeploymentsApi$DeploymentsServiceStatsList()}}
\item \href{#method-DeploymentsApi-DeploymentsServiceStatsOverTimeList}{\code{DeploymentsApi$DeploymentsServiceStatsOverTimeList()}}
\item \href{#method-DeploymentsApi-DeploymentsSettingsList}{\code{DeploymentsApi$DeploymentsSettingsList()}}
\item \href{#method-DeploymentsApi-DeploymentsSettingsPatchMany}{\code{DeploymentsApi$DeploymentsSettingsPatchMany()}}
\item \href{#method-DeploymentsApi-DeploymentsSharedRolesList}{\code{DeploymentsApi$DeploymentsSharedRolesList()}}
\item \href{#method-DeploymentsApi-DeploymentsSharedRolesPatchMany}{\code{DeploymentsApi$DeploymentsSharedRolesPatchMany()}}
\item \href{#method-DeploymentsApi-DeploymentsStatusPatchMany}{\code{DeploymentsApi$DeploymentsStatusPatchMany()}}
\item \href{#method-DeploymentsApi-DeploymentsTargetDriftList}{\code{DeploymentsApi$DeploymentsTargetDriftList()}}
\item \href{#method-DeploymentsApi-PredictionServersList}{\code{DeploymentsApi$PredictionServersList()}}
\item \href{#method-DeploymentsApi-clone}{\code{DeploymentsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeletedDeploymentsList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeletedDeploymentsList}{}}}
\subsection{Method \code{DeletedDeploymentsList()}}{
List deleted deployments
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeletedDeploymentsList(offset, limit, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of deleted deployments to skip.}

\item{\code{limit}}{integer. The number of deleted deployments to return.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List deleted deployments.Only available as part of an enterprise (on-prem) installation. Requires a CAN_DELETE_APP_PROJECTS permission to execute.


This method invokes \verb{GET /deletedDeployments/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The deleted deployments
\itemize{
}
}
}

\subsection{Returns}{
\link{DeletedDeploymentListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of deleted deployments to skip.
limit <- 20 # integer | The number of deleted deployments to return.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeletedDeploymentsList(offset, limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeletedDeploymentsPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeletedDeploymentsPatchMany}{}}}
\subsection{Method \code{DeletedDeploymentsPatchMany()}}{
Erase deleted deployments
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeletedDeploymentsPatchMany(
  deploymentPermanentDelete = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentPermanentDelete}}{\link{DeploymentPermanentDelete}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Permanently erase data for deleted deployments. Only available as part of an on-premise or private/hybrid cloud deployment. Requires a CAN_DELETE_APP_PROJECTS permission to execute.


This method invokes \verb{PATCH /deletedDeployments/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} URL for tracking deployment permanently erase job status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentPermanentDelete <- DeploymentPermanentDelete$new() # DeploymentPermanentDelete | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeletedDeploymentsPatchMany(deploymentPermanentDelete=deploymentPermanentDelete)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsAccuracyList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsAccuracyList}{}}}
\subsection{Method \code{DeploymentsAccuracyList()}}{
Retrieve accuracy metric
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsAccuracyList(
  deploymentId,
  start = NULL,
  end = NULL,
  modelId = NULL,
  segmentAttribute = NULL,
  segmentValue = "",
  targetClasses = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{modelId}}{character. The id of the model for which metrics are being retrieved.}

\item{\code{segmentAttribute}}{character. The name of the segment on which segment analysis is being performed.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{targetClasses}}{character. Comma separated list of target classes to filter out response}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve accuracy metric for a certain time period.


This method invokes \verb{GET /deployments/\{deploymentId\}/accuracy/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Deployment accuracy metrics are retrieved.
\itemize{
}
\item \strong{\code{400}} Request invalid, refer to messages for detail.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{AccuracyRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
modelId <- 'modelId_example' # character | The id of the model for which metrics are being retrieved.
segmentAttribute <- 'segmentAttribute_example' # character | The name of the segment on which segment analysis is being performed.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
targetClasses <- 'targetClasses_example' # character | Comma separated list of target classes to filter out response

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsAccuracyList(deploymentId, start=start, end=end, modelId=modelId, segmentAttribute=segmentAttribute, segmentValue=segmentValue, targetClasses=targetClasses)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsAccuracyOverTimeList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsAccuracyOverTimeList}{}}}
\subsection{Method \code{DeploymentsAccuracyOverTimeList()}}{
Retrieve accuracy over time data for one single metric.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsAccuracyOverTimeList(
  deploymentId,
  start = NULL,
  end = NULL,
  bucketSize = NULL,
  modelId = NULL,
  metric = NULL,
  segmentAttribute = NULL,
  segmentValue = "",
  targetClasses = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. Start of the period to retrieve metric stats, defaults to 7 days ago from the end of the period.}

\item{\code{end}}{character. End of the period to retrieve metric stats, defaults to the next top of the hour.}

\item{\code{bucketSize}}{character. The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.}

\item{\code{modelId}}{character. The id of the model for which metrics are being retrieved.}

\item{\code{metric}}{character. Name of the metric.}

\item{\code{segmentAttribute}}{character. The name of the segment on which segment analysis is being performed.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{targetClasses}}{character. List of target classes to filter out response}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
> Retrieve accuracy over time data for one single metric. > > The following metrics can be retrieved. > > > For classification deployments: > > > > - Accuracy > > - AUC > > - Balanced Accuracy > > - FVE Binomial > > - Gini Norm > > - Kolmogorov-Smirnov > > - LogLoss (default) > > - <Rate@Top5>\% > > - <Rate@Top10>\% > > > > For regression deployments: > > > > - Gamma Deviance (default) > > - FVE Gamma > > - FVE Poisson > > - FVE Tweedie > > - MAD > > - MAE > > - MAPE > > - Poisson Deviance > > - R Squared > > - RMSE > > - RMSLE > > - Tweedie Deviance


This method invokes \verb{GET /deployments/\{deploymentId\}/accuracyOverTime/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Accuracy over time info retrieved.
\itemize{
}
\item \strong{\code{400}} Request invalid, refer to messages for detail.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{AccuracyOverTimeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | Start of the period to retrieve metric stats, defaults to 7 days ago from the end of the period.
end <- 'end_example' # character | End of the period to retrieve metric stats, defaults to the next top of the hour.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
modelId <- 'modelId_example' # character | The id of the model for which metrics are being retrieved.
metric <- 'metric_example' # character | Name of the metric.
segmentAttribute <- 'segmentAttribute_example' # character | The name of the segment on which segment analysis is being performed.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
targetClasses <- 'targetClasses_example' # character | List of target classes to filter out response

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsAccuracyOverTimeList(deploymentId, start=start, end=end, bucketSize=bucketSize, modelId=modelId, metric=metric, segmentAttribute=segmentAttribute, segmentValue=segmentValue, targetClasses=targetClasses)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsActualsFromDatasetCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsActualsFromDatasetCreate}{}}}
\subsection{Method \code{DeploymentsActualsFromDatasetCreate()}}{
Submit actuals values from AI Catalog
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsActualsFromDatasetCreate(
  deploymentId,
  deploymentDatasetCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{deploymentDatasetCreate}}{\link{DeploymentDatasetCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Submit actuals values for processing using catalog item. Submission of actuals is limited to 10,000,000 actuals per hour. For time series deployments, total actuals = number of actuals \\* number of forecast distances. For example, submitting 10 actuals for a deployment with 50 forecast distances = 500 total actuals. For multiclass deployments, a similar calculation is made where total actuals = number of actuals \\* number of classes. For example, submitting 10 actuals for a deployment with 20 classes = 200 actuals.


This method invokes \verb{POST /deployments/\{deploymentId\}/actuals/fromDataset/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Submitted successfully. See Location header.
\itemize{
\item \strong{\code{Location}} URL for tracking async job status.
}
\item \strong{\code{422}} Unable to process the Actuals submission request.
\itemize{
}
\item \strong{\code{429}} The number of actuals uploaded this hour exceeds the limit of 10000000 rows.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentDatasetCreate <- DeploymentDatasetCreate$new() # DeploymentDatasetCreate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsActualsFromDatasetCreate(deploymentId, deploymentDatasetCreate=deploymentDatasetCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsActualsFromJSONCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsActualsFromJSONCreate}{}}}
\subsection{Method \code{DeploymentsActualsFromJSONCreate()}}{
Submit actuals values
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsActualsFromJSONCreate(
  deploymentId,
  deploymentActuals = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{deploymentActuals}}{\link{DeploymentActuals}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Submit actuals values for processing. Values are not processed immediately and may take some time to propagate through deployment systems. Submission of actuals is limited to 10,000,000 actuals per hour. For time series deployments, total actuals = number of actuals \\* number of forecast distances. For example, submitting 10 actuals for a deployment with 50 forecast distances = 500 total actuals. For multiclass deployments, a similar calculation is made where total actuals = number of actuals \\* number of classes. For example, submitting 10 actuals for a deployment with 20 classes = 200 actuals.


This method invokes \verb{POST /deployments/\{deploymentId\}/actuals/fromJSON/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Submitted successfully. See Location header.
\itemize{
\item \strong{\code{Location}} URL for tracking async job status.
}
\item \strong{\code{422}} Unable to process the Actuals submission request.
\itemize{
}
\item \strong{\code{429}} The number of actuals uploaded this hour exceeds the limit of 10000000 rows.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentActuals <- DeploymentActuals$new() # DeploymentActuals | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsActualsFromJSONCreate(deploymentId, deploymentActuals=deploymentActuals)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsCapabilitiesList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsCapabilitiesList}{}}}
\subsection{Method \code{DeploymentsCapabilitiesList()}}{
Retrieve capabilities.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsCapabilitiesList(deploymentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the capabilities for the deployment.


This method invokes \verb{GET /deployments/\{deploymentId\}/capabilities/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{DeploymentCapabilitiesRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsCapabilitiesList(deploymentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsChallengerPredictionsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsChallengerPredictionsCreate}{}}}
\subsection{Method \code{DeploymentsChallengerPredictionsCreate()}}{
Score challenger models
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsChallengerPredictionsCreate(
  deploymentId,
  challengerScore = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{challengerScore}}{\link{ChallengerScore}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Score main model prediction requests against challenger model requests.


This method invokes \verb{POST /deployments/\{deploymentId\}/challengerPredictions/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} URL to poll to track challenger scoring progress.
}
\item \strong{\code{422}} Unable to process the challenger scoring request.
\itemize{
}
\item \strong{\code{429}} Another challenger scoring job is running. See the Location header to track the running job.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerScore <- ChallengerScore$new() # ChallengerScore | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengerPredictionsCreate(deploymentId, challengerScore=challengerScore)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsChallengersCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsChallengersCreate}{}}}
\subsection{Method \code{DeploymentsChallengersCreate()}}{
Create challenger model
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsChallengersCreate(
  deploymentId,
  challengerCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{challengerCreate}}{\link{ChallengerCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create new challenger model.


This method invokes \verb{POST /deployments/\{deploymentId\}/challengers/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted successfully. See Location header.
\itemize{
\item \strong{\code{Location}} URL to poll to track challenger creation has finished.
}
\item \strong{\code{422}} Unable to process the challenger creation request.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerCreate <- ChallengerCreate$new() # ChallengerCreate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersCreate(deploymentId, challengerCreate=challengerCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsChallengersDelete"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsChallengersDelete}{}}}
\subsection{Method \code{DeploymentsChallengersDelete()}}{
Delete challenger model
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsChallengersDelete(deploymentId, challengerId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{challengerId}}{character. Unique identifier of the challenger.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete challenger model.


This method invokes \verb{DELETE /deployments/\{deploymentId\}/challengers/\{challengerId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Model successfully deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerId <- 'challengerId_example' # character | Unique identifier of the challenger.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersDelete(deploymentId, challengerId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsChallengersList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsChallengersList}{}}}
\subsection{Method \code{DeploymentsChallengersList()}}{
List challenger models
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsChallengersList(deploymentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List challenger models for deployment.


This method invokes \verb{GET /deployments/\{deploymentId\}/challengers/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The challenger models
\itemize{
}
}
}

\subsection{Returns}{
\link{ChallengerListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersList(deploymentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsChallengersPatch"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsChallengersPatch}{}}}
\subsection{Method \code{DeploymentsChallengersPatch()}}{
Update challenger model
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsChallengersPatch(
  deploymentId,
  challengerId,
  challengerUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{challengerId}}{character. Unique identifier of the challenger.}

\item{\code{challengerUpdate}}{\link{ChallengerUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update challenger model.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/challengers/\{challengerId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Model successfully updated.
\itemize{
}
}
}

\subsection{Returns}{
\link{ChallengerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerId <- 'challengerId_example' # character | Unique identifier of the challenger.
challengerUpdate <- ChallengerUpdate$new() # ChallengerUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersPatch(deploymentId, challengerId, challengerUpdate=challengerUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsChallengersRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsChallengersRetrieve}{}}}
\subsection{Method \code{DeploymentsChallengersRetrieve()}}{
Get challenger model
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsChallengersRetrieve(deploymentId, challengerId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{challengerId}}{character. Unique identifier of the challenger.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve challenger model.


This method invokes \verb{GET /deployments/\{deploymentId\}/challengers/\{challengerId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The challenger model
\itemize{
}
}
}

\subsection{Returns}{
\link{ChallengerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
challengerId <- 'challengerId_example' # character | Unique identifier of the challenger.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsChallengersRetrieve(deploymentId, challengerId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsDelete}{}}}
\subsection{Method \code{DeploymentsDelete()}}{
Delete deployment
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsDelete(
  deploymentId,
  ignoreManagementAgent = "false",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{ignoreManagementAgent}}{Enum < \link{false, False, true, True} > Do not wait for management agent to delete the deployment first.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a deployment.


This method invokes \verb{DELETE /deployments/\{deploymentId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Deployment successfully deleted.
\itemize{
}
\item \strong{\code{422}} Unable to process the request.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
ignoreManagementAgent <- "false" # character | Do not wait for management agent to delete the deployment first.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsDelete(deploymentId, ignoreManagementAgent=ignoreManagementAgent)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsFeatureDriftList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsFeatureDriftList}{}}}
\subsection{Method \code{DeploymentsFeatureDriftList()}}{
Retrieve feature drift scores
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsFeatureDriftList(
  deploymentId,
  start = NULL,
  end = NULL,
  modelId = NULL,
  metric = "psi",
  offset = 0,
  limit = 200,
  segmentAttribute = NULL,
  segmentValue = "",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{modelId}}{character. ID of the model in the deployment. If not set, defaults to the deployment current model.}

\item{\code{metric}}{Enum < \link{psi, kl_divergence, dissimilarity, hellinger, js_divergence} > Name of the metric used to calculate the drift. Can be one of psi, kl_divergence, dissimilarity, hellinger, and js_divergence. Defaults to psi.}

\item{\code{offset}}{integer. The number of features to skip, defaults to 0.}

\item{\code{limit}}{integer. The number of features to return, defaults to 25.}

\item{\code{segmentAttribute}}{character. The name of a segment attribute used for segment analysis.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve drift scores for features of the deployment.


This method invokes \verb{GET /deployments/\{deploymentId\}/featureDrift/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Features drift over specified time period retrieved.
\itemize{
}
\item \strong{\code{400}} Request invalid, refer to messages for detail.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{DeploymentFeatureDriftResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
modelId <- 'modelId_example' # character | ID of the model in the deployment. If not set, defaults to the deployment current model.
metric <- "psi" # character | Name of the metric used to calculate the drift. Can be one of psi, kl_divergence, dissimilarity, hellinger, and js_divergence. Defaults to psi.
offset <- 0 # integer | The number of features to skip, defaults to 0.
limit <- 200 # integer | The number of features to return, defaults to 25.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsFeatureDriftList(deploymentId, start=start, end=end, modelId=modelId, metric=metric, offset=offset, limit=limit, segmentAttribute=segmentAttribute, segmentValue=segmentValue)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsFeatureDriftOverTimeList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsFeatureDriftOverTimeList}{}}}
\subsection{Method \code{DeploymentsFeatureDriftOverTimeList()}}{
Retrieve drift over time info for a feature of the deployment.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsFeatureDriftOverTimeList(
  featureNames,
  deploymentId,
  start = NULL,
  end = NULL,
  bucketSize = NULL,
  modelId = NULL,
  metric = "psi",
  segmentAttribute = NULL,
  segmentValue = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{featureNames}}{\link{OneOfstringarray}. List of feature names, limited to two per request.}

\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{bucketSize}}{character. The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.}

\item{\code{modelId}}{character. The id of the model for which the features drift is being retrieved.}

\item{\code{metric}}{Enum < \link{psi, kl_divergence, dissimilarity, hellinger, js_divergence} > Name of the metric used to calculate the drift. Can be one of psi, kl_divergence, dissimilarity, hellinger, and js_divergence. Defaults to psi.}

\item{\code{segmentAttribute}}{character. The name of the segment on which segment analysis is being performed.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve drift over time info for a feature of the deployment.


This method invokes \verb{GET /deployments/\{deploymentId\}/featureDriftOverTime/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Feature drift over time info of the deployment retrieved.
\itemize{
}
\item \strong{\code{400}} Request invalid, refer to messages for detail.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureDriftOverTimeRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
featureNames <- list(c('featureNames_example')) # OneOfstringarray | List of feature names, limited to two per request.
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
modelId <- 'modelId_example' # character | The id of the model for which the features drift is being retrieved.
metric <- "psi" # character | Name of the metric used to calculate the drift. Can be one of psi, kl_divergence, dissimilarity, hellinger, and js_divergence. Defaults to psi.
segmentAttribute <- 'segmentAttribute_example' # character | The name of the segment on which segment analysis is being performed.
segmentValue <- 'segmentValue_example' # character | The value of the `segmentAttribute` to segment on.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsFeatureDriftOverTimeList(featureNames, deploymentId, start=start, end=end, bucketSize=bucketSize, modelId=modelId, metric=metric, segmentAttribute=segmentAttribute, segmentValue=segmentValue)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsFeaturesList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsFeaturesList}{}}}
\subsection{Method \code{DeploymentsFeaturesList()}}{
Get deployment features
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsFeaturesList(
  offset,
  limit,
  deploymentId,
  includeNonPredictionFeatures = "false",
  forSegmentedAnalysis = "false",
  search = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of features to skip, defaults to 0.}

\item{\code{limit}}{integer. The number of features to return, defaults to 0.}

\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{includeNonPredictionFeatures}}{Enum < \link{false, False, true, True} > When True will return all raw features in the universe dataset associated with the deployment, and when False will return only those raw features used to make predictions on the deployment.}

\item{\code{forSegmentedAnalysis}}{Enum < \link{false, False, true, True} > When True, features returned will be filtered to those usable for segmented analysis.}

\item{\code{search}}{character. Case insensitive search against names of the deployment's features.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve features contained within the universe dataset associated with a specific deployment. By default, this returns all raw features required for predictions.


This method invokes \verb{GET /deployments/\{deploymentId\}/features/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The deployment's features
\itemize{
}
\item \strong{\code{422}} Feature list retrieval is not supported on this deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of features to skip, defaults to 0.
limit <- 50 # integer | The number of features to return, defaults to 0.
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
includeNonPredictionFeatures <- "false" # character | When True will return all raw features in the universe dataset associated with the deployment, and when False will return only those raw features used to make predictions on the deployment.
forSegmentedAnalysis <- "false" # character | When True, features returned will be filtered to those usable for segmented analysis.
search <- 'search_example' # character | Case insensitive search against names of the deployment's features.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsFeaturesList(offset, limit, deploymentId, includeNonPredictionFeatures=includeNonPredictionFeatures, forSegmentedAnalysis=forSegmentedAnalysis, search=search)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsFromLearningModelCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsFromLearningModelCreate}{}}}
\subsection{Method \code{DeploymentsFromLearningModelCreate()}}{
Create deployment from DataRobot model
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsFromLearningModelCreate(
  deploymentCreateFromLearningModel = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentCreateFromLearningModel}}{\link{DeploymentCreateFromLearningModel}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a deployment from a DataRobot model.


This method invokes \verb{POST /deployments/fromLearningModel/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Deployment successfully created
\itemize{
}
\item \strong{\code{202}} Job submitted. The URL at the Location header can be used to track when the deployment is ready for predictions.
\itemize{
\item \strong{\code{Location}} URL for tracking async job status.
}
\item \strong{\code{403}} User does not have permission to create a deployment.
\itemize{
}
\item \strong{\code{409}} User's organization has reached the maximum number of deployments.
\itemize{
}
\item \strong{\code{422}} Unable to process the deployment creation request.
\itemize{
}
}
}

\subsection{Returns}{
\link{DeploymentCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentCreateFromLearningModel <- DeploymentCreateFromLearningModel$new() # DeploymentCreateFromLearningModel | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsFromLearningModelCreate(deploymentCreateFromLearningModel=deploymentCreateFromLearningModel)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsHumilityStatsList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsHumilityStatsList}{}}}
\subsection{Method \code{DeploymentsHumilityStatsList()}}{
Retrieve humility stats
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsHumilityStatsList(
  deploymentId,
  start = NULL,
  end = NULL,
  bucketSize = NULL,
  segmentAttribute = NULL,
  segmentValue = "",
  modelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. Start of the period to retrieve service health stats, defaults to 7 days ago from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. End of the period to retrieve service health stats, defaults to the next top of the hour.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{bucketSize}}{character. The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.}

\item{\code{segmentAttribute}}{Enum < \link{DataRobot-Consumer, DataRobot-Remote-IP, DataRobot-Host-Name} > The name of a segment attribute used for segment analysis.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{modelId}}{character. The ID of the model to retrieve service health stats. If provided, only the service health stats for that  specific model will be retrieved. If not provided, the service healthstats for the deployment`s current model will be retrieved.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve humility rule service triggers statistics overview.


This method invokes \verb{GET /deployments/\{deploymentId\}/humilityStats/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Humility service health statistics overview retrieved.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{HumilityStatsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | Start of the period to retrieve service health stats, defaults to 7 days ago from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | End of the period to retrieve service health stats, defaults to the next top of the hour.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
modelId <- 'modelId_example' # character | The ID of the model to retrieve service health stats. If provided, only the service health stats for that  specific model will be retrieved. If not provided, the service healthstats for the deployment`s current model will be retrieved.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsHumilityStatsList(deploymentId, start=start, end=end, bucketSize=bucketSize, segmentAttribute=segmentAttribute, segmentValue=segmentValue, modelId=modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsHumilityStatsOverTimeList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsHumilityStatsOverTimeList}{}}}
\subsection{Method \code{DeploymentsHumilityStatsOverTimeList()}}{
Retrieve humility stats over time
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsHumilityStatsOverTimeList(
  deploymentId,
  start = NULL,
  end = NULL,
  bucketSize = NULL,
  segmentAttribute = NULL,
  segmentValue = "",
  modelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. Start of the period to retrieve service health stats, defaults to 7 days ago from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. End of the period to retrieve service health stats, defaults to the next top of the hour.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{bucketSize}}{character. The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.}

\item{\code{segmentAttribute}}{Enum < \link{DataRobot-Consumer, DataRobot-Remote-IP, DataRobot-Host-Name} > The name of a segment attribute used for segment analysis.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{modelId}}{character. The ID of the model to retrieve service health stats. If provided, only the service health stats for that  specific model will be retrieved. If not provided, the service healthstats for the deployment`s current model will be retrieved.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve humility service statistics over time.


This method invokes \verb{GET /deployments/\{deploymentId\}/humilityStatsOverTime/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Humility statistics for deployment retrieved.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{HumilityStatsOverTimeRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | Start of the period to retrieve service health stats, defaults to 7 days ago from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | End of the period to retrieve service health stats, defaults to the next top of the hour.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
modelId <- 'modelId_example' # character | The ID of the model to retrieve service health stats. If provided, only the service health stats for that  specific model will be retrieved. If not provided, the service healthstats for the deployment`s current model will be retrieved.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsHumilityStatsOverTimeList(deploymentId, start=start, end=end, bucketSize=bucketSize, segmentAttribute=segmentAttribute, segmentValue=segmentValue, modelId=modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsList}{}}}
\subsection{Method \code{DeploymentsList()}}{
List deployments
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsList(
  offset,
  limit,
  orderBy = NULL,
  search = NULL,
  serviceHealth = NULL,
  modelHealth = NULL,
  accuracyHealth = NULL,
  role = NULL,
  status = NULL,
  importance = NULL,
  lastPredictionTimestampStart = NULL,
  lastPredictionTimestampEnd = NULL,
  predictionUsageDailyAvgGreaterThan = NULL,
  predictionUsageDailyAvgLessThan = NULL,
  defaultPredictionServerId = NULL,
  buildEnvironmentType = NULL,
  executionEnvironmentType = NULL,
  predictionEnvironmentPlatform = NULL,
  hasDecisionFlow = NULL,
  createdByMe = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of deployments to skip. Defaults to 0.}

\item{\code{limit}}{integer. The number of deployments (greater than zero, max 100) to return. Defaults to 20.}

\item{\code{orderBy}}{Enum < \link{label, -label, serviceHealth, -serviceHealth, modelHealth, -modelHealth, accuracyHealth, -accuracyHealth, recentPredictions, -recentPredictions, lastPredictionTimestamp, -lastPredictionTimestamp, currentModelDeployedTimestamp, -currentModelDeployedTimestamp, createdAtTimestamp, -createdAtTimestamp, importance, -importance, fairnessHealth, -fairnessHealth} > The order to sort the deployments.Defaults to order by deployment last prediction timestamp in descending order.}

\item{\code{search}}{character. Case insensitive search against deployment's label and description.}

\item{\code{serviceHealth}}{Enum < \link{unknown, warning, passing, unavailable, failing} > Filters deployments by their service health status.}

\item{\code{modelHealth}}{Enum < \link{unknown, warning, passing, unavailable, failing} > Filters deployments by their model health status.}

\item{\code{accuracyHealth}}{Enum < \link{unknown, warning, passing, unavailable, failing} > Filters deployments by their accuracy health status.}

\item{\code{role}}{Enum < \link{OWNER, USER} > Filter deployments to only those that the authenticated user has the specified role for.}

\item{\code{status}}{Enum < \link{active, inactive, stopping, launching, archived, replacingModel, errored} > Filters deployments by their status}

\item{\code{importance}}{Enum < \link{CRITICAL, HIGH, MODERATE, LOW} > Filters deployments by their importance}

\item{\code{lastPredictionTimestampStart}}{character. Only include deployments that have had a prediction request on or after the specified timestamp.}

\item{\code{lastPredictionTimestampEnd}}{character. Only include deployments that have had a prediction request before the specified timestamp.}

\item{\code{predictionUsageDailyAvgGreaterThan}}{integer. only include deployments that have had more than the specified number of predictions per day on average over the past week.}

\item{\code{predictionUsageDailyAvgLessThan}}{integer. Only include deployments that have had fewer than the specified number of predictions per day on average over the past week.}

\item{\code{defaultPredictionServerId}}{list( character )}

\item{\code{buildEnvironmentType}}{Enum < \link{DataRobot, Python, R, Java, Julia, Legacy, Other} > Filter deployments based on the type of their current model's build environment type.}

\item{\code{executionEnvironmentType}}{Enum < \link{datarobot, external} > Filter deployments based on the type of their execution environment.}

\item{\code{predictionEnvironmentPlatform}}{Enum < \link{aws, gcp, azure, onPremise, datarobot, openShift, other, snowflake} > Filter deployments based on prediction environment platform}

\item{\code{hasDecisionFlow}}{Enum < \link{false, False, true, True} > Filter deployments based if it is a decision flow}

\item{\code{createdByMe}}{Enum < \link{false, False, true, True} > Filter deployments to those created by the current user.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List deployments a user can view.


This method invokes \verb{GET /deployments/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The deployments
\itemize{
}
}
}

\subsection{Returns}{
\link{DeploymentListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of deployments to skip. Defaults to 0.
limit <- 20 # integer | The number of deployments (greater than zero, max 100) to return. Defaults to 20.
orderBy <- 'orderBy_example' # character | The order to sort the deployments.Defaults to order by deployment last prediction timestamp in descending order.
search <- 'search_example' # character | Case insensitive search against deployment's label and description.
serviceHealth <- ['serviceHealth_example'] # array[character] | Filters deployments by their service health status.
modelHealth <- ['modelHealth_example'] # array[character] | Filters deployments by their model health status.
accuracyHealth <- ['accuracyHealth_example'] # array[character] | Filters deployments by their accuracy health status.
role <- 'role_example' # character | Filter deployments to only those that the authenticated user has the specified role for.
status <- ['status_example'] # array[character] | Filters deployments by their status
importance <- ['importance_example'] # array[character] | Filters deployments by their importance
lastPredictionTimestampStart <- 'lastPredictionTimestampStart_example' # character | Only include deployments that have had a prediction request on or after the specified timestamp.
lastPredictionTimestampEnd <- 'lastPredictionTimestampEnd_example' # character | Only include deployments that have had a prediction request before the specified timestamp.
predictionUsageDailyAvgGreaterThan <- 56 # integer | only include deployments that have had more than the specified number of predictions per day on average over the past week.
predictionUsageDailyAvgLessThan <- 56 # integer | Only include deployments that have had fewer than the specified number of predictions per day on average over the past week.
defaultPredictionServerId <- ['defaultPredictionServerId_example'] # array[character] | Filter deployments to those whose default prediction server has the specified id.
buildEnvironmentType <- ['buildEnvironmentType_example'] # array[character] | Filter deployments based on the type of their current model's build environment type.
executionEnvironmentType <- ['executionEnvironmentType_example'] # array[character] | Filter deployments based on the type of their execution environment.
predictionEnvironmentPlatform <- ['predictionEnvironmentPlatform_example'] # array[character] | Filter deployments based on prediction environment platform
hasDecisionFlow <- 'hasDecisionFlow_example' # character | Filter deployments based if it is a decision flow
createdByMe <- 'createdByMe_example' # character | Filter deployments to those created by the current user.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsList(offset, limit, orderBy=orderBy, search=search, serviceHealth=serviceHealth, modelHealth=modelHealth, accuracyHealth=accuracyHealth, role=role, status=status, importance=importance, lastPredictionTimestampStart=lastPredictionTimestampStart, lastPredictionTimestampEnd=lastPredictionTimestampEnd, predictionUsageDailyAvgGreaterThan=predictionUsageDailyAvgGreaterThan, predictionUsageDailyAvgLessThan=predictionUsageDailyAvgLessThan, defaultPredictionServerId=defaultPredictionServerId, buildEnvironmentType=buildEnvironmentType, executionEnvironmentType=executionEnvironmentType, predictionEnvironmentPlatform=predictionEnvironmentPlatform, hasDecisionFlow=hasDecisionFlow, createdByMe=createdByMe)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsModelPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsModelPatchMany}{}}}
\subsection{Method \code{DeploymentsModelPatchMany()}}{
Model Replacement.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsModelPatchMany(
  deploymentId,
  modelReplacementSubmission = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{modelReplacementSubmission}}{\link{ModelReplacementSubmission}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Replace the model used to make predictions for the deployment. A validation process will be performed to make sure the new model is eligible as a replacement. If the validation fails, the model replacement will not occur.The Model Replacement Validation endpoint can be used to confirm the new model is eligible as a replacement.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/model/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{ModelReplacementValidationResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
modelReplacementSubmission <- ModelReplacementSubmission$new() # ModelReplacementSubmission | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelPatchMany(deploymentId, modelReplacementSubmission=modelReplacementSubmission)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationHistoryList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationHistoryList}{}}}
\subsection{Method \code{DeploymentsModelSecondaryDatasetConfigurationHistoryList()}}{
List the secondary datasets configuration history for a deployment
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationHistoryList(
  offset,
  limit,
  deploymentId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Number of items to skip. Defaults to 0 if not provided.}

\item{\code{limit}}{integer. Number of items to return, defaults to 100 if not provided.}

\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all the secondary datasets configuration used by a given Feature Discovery deployment


This method invokes \verb{GET /deployments/\{deploymentId\}/model/secondaryDatasetConfigurationHistory/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Secondary Datasets Configuration history.
\itemize{
}
}
}

\subsection{Returns}{
\link{SecondaryDatasetsConfigListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelSecondaryDatasetConfigurationHistoryList(offset, limit, deploymentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationList}{}}}
\subsection{Method \code{DeploymentsModelSecondaryDatasetConfigurationList()}}{
Retrieve secondary datasets configuration for a deployment.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationList(
  deploymentId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the secondary datasets configuration used by a deployed Feature discovery model.


This method invokes \verb{GET /deployments/\{deploymentId\}/model/secondaryDatasetConfiguration/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Secondary datasets configuration.
\itemize{
}
\item \strong{\code{404}} Deployment or secondary datasets configuration cannot be found for the deployed model.
\itemize{
}
}
}

\subsection{Returns}{
\link{SecondaryDatasetConfigResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelSecondaryDatasetConfigurationList(deploymentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsModelSecondaryDatasetConfigurationPatchMany}{}}}
\subsection{Method \code{DeploymentsModelSecondaryDatasetConfigurationPatchMany()}}{
Update the secondary datasets configuration for the deployed model.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsModelSecondaryDatasetConfigurationPatchMany(
  deploymentId,
  secondaryDatasetConfigUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{secondaryDatasetConfigUpdate}}{\link{SecondaryDatasetConfigUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the secondary datasets configuration used by the deployed feature discovery model.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/model/secondaryDatasetConfiguration/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Secondary Datasets Configuration updated successfully.
\itemize{
}
\item \strong{\code{403}} Invalid credentials for secondary datasets configuration.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
secondaryDatasetConfigUpdate <- SecondaryDatasetConfigUpdate$new() # SecondaryDatasetConfigUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelSecondaryDatasetConfigurationPatchMany(deploymentId, secondaryDatasetConfigUpdate=secondaryDatasetConfigUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsModelValidationCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsModelValidationCreate}{}}}
\subsection{Method \code{DeploymentsModelValidationCreate()}}{
Model Replacement Validation.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsModelValidationCreate(
  deploymentId,
  modelReplacementValidationRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{modelReplacementValidationRequest}}{\link{ModelReplacementValidationRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Validate that a model can be used to replace the current model of the deployment.


This method invokes \verb{POST /deployments/\{deploymentId\}/model/validation/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelReplacementValidationResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
modelReplacementValidationRequest <- ModelReplacementValidationRequest$new() # ModelReplacementValidationRequest | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsModelValidationCreate(deploymentId, modelReplacementValidationRequest=modelReplacementValidationRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsMonitoringDataDeletionsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsMonitoringDataDeletionsCreate}{}}}
\subsection{Method \code{DeploymentsMonitoringDataDeletionsCreate()}}{
Endpoint for deleting deployment monitoring data.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsMonitoringDataDeletionsCreate(
  deploymentId,
  monitoringDataDeletePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{monitoringDataDeletePayload}}{\link{MonitoringDataDeletePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete deployment monitoring data.


This method invokes \verb{POST /deployments/\{deploymentId\}/monitoringDataDeletions/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} Deployment or model not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
monitoringDataDeletePayload <- MonitoringDataDeletePayload$new() # MonitoringDataDeletePayload | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsMonitoringDataDeletionsCreate(deploymentId, monitoringDataDeletePayload=monitoringDataDeletePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsOnDemandReportsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsOnDemandReportsCreate}{}}}
\subsection{Method \code{DeploymentsOnDemandReportsCreate()}}{
Add report to execution queue.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsOnDemandReportsCreate(
  deploymentId,
  scheduledReportOnDemmand = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{scheduledReportOnDemmand}}{\link{ScheduledReportOnDemmand}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add report to execution queue.


This method invokes \verb{POST /deployments/\{deploymentId\}/onDemandReports/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Scheduled report job was addded to execution.
\itemize{
\item \strong{\code{Location}} URL to poll to track report generation has finished.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
scheduledReportOnDemmand <- ScheduledReportOnDemmand$new() # ScheduledReportOnDemmand | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsOnDemandReportsCreate(deploymentId, scheduledReportOnDemmand=scheduledReportOnDemmand)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsPatch}{}}}
\subsection{Method \code{DeploymentsPatch()}}{
Update deployment
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsPatch(deploymentId, deploymentUpdate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{deploymentUpdate}}{\link{DeploymentUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a deployment's label and description.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Deployment successfully updated
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentUpdate <- DeploymentUpdate$new() # DeploymentUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsPatch(deploymentId, deploymentUpdate=deploymentUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsPredictionInputsFromDatasetCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsPredictionInputsFromDatasetCreate}{}}}
\subsection{Method \code{DeploymentsPredictionInputsFromDatasetCreate()}}{
Submit external deployment prediction data.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsPredictionInputsFromDatasetCreate(
  deploymentId,
  predictionDatasetAssignment = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{predictionDatasetAssignment}}{\link{PredictionDatasetAssignment}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Assigns prediction dataset to the external deployment to enable the analysis of historical model performance. Multiple datasets containing historical predictions for the external deployment can be uploaded. This requires one request for each dataset. For a regression deployment, predictions can be either an int or float. For a classification (binary/multiclass) deployment, predictions must be lists with each list containing probabilities for each class.


This method invokes \verb{POST /deployments/\{deploymentId\}/predictionInputs/fromDataset/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Submitted successfully.
\itemize{
}
\item \strong{\code{405}} Data can only be uploaded to an external deployment.
\itemize{
}
\item \strong{\code{422}} Unable to process predictions upload.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
predictionDatasetAssignment <- PredictionDatasetAssignment$new() # PredictionDatasetAssignment | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsPredictionInputsFromDatasetCreate(deploymentId, predictionDatasetAssignment=predictionDatasetAssignment)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsPredictionResultsList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsPredictionResultsList}{}}}
\subsection{Method \code{DeploymentsPredictionResultsList()}}{
Retrieve predictions results.
Produces: "application/json", "text/csv"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsPredictionResultsList(
  deploymentId,
  start = NULL,
  end = NULL,
  offset = 0,
  limit = 100,
  modelId = NULL,
  actualsPresent = NULL,
  accept = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{modelId}}{character. The id of the model for which prediction results are being retrieved.}

\item{\code{actualsPresent}}{character. Filters predictions results to only those who have actuals present or with missing actuals.}

\item{\code{accept}}{Enum < \link{application/json, text/csv} > Requested MIME type for the returned data}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve predictions results of the deployment.


This method invokes \verb{GET /deployments/\{deploymentId\}/predictionResults/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictionResultsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
modelId <- 'modelId_example' # character | The id of the model for which prediction results are being retrieved.
actualsPresent <- 'actualsPresent_example' # character | Filters predictions results to only those who have actuals present or with missing actuals.
accept <- 'accept_example' # character | Requested MIME type for the returned data

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsPredictionResultsList(deploymentId, start=start, end=end, offset=offset, limit=limit, modelId=modelId, actualsPresent=actualsPresent, accept=accept)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsPredictionsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsPredictionsCreate}{}}}
\subsection{Method \code{DeploymentsPredictionsCreate()}}{
Compute predictions synchronously
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsPredictionsCreate(
  deploymentId,
  passthroughColumns = NULL,
  passthroughColumnsSet = NULL,
  maxExplanations = NULL,
  maxCodes = NULL,
  thresholdHigh = NULL,
  thresholdLow = NULL,
  excludeAdjustedPredictions = TRUE,
  forecastPoint = NULL,
  predictionsStartDate = NULL,
  predictionsEndDate = NULL,
  relaxKnownInAdvanceFeaturesCheck = NULL,
  predictionWarningEnabled = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{passthroughColumns}}{list( character )}

\item{\code{passthroughColumnsSet}}{Enum < \link{all} > If `passthroughColumnsSet=all` is passed, all columns from the scoring dataset are returned in the prediction response. All other values for this parameter are invalid. Mutually exclusive with `passthroughColumns`.}

\item{\code{maxExplanations}}{\link{OneOfintegerstring}. The maximum number of prediction explanations to supply per row of the dataset. The default `maxExplanations` is `3` when `xemp` based explanations are requested.  The default `maxExplanations` is `all` (no limit) when `shap` based explanations are requested.}

\item{\code{maxCodes}}{\link{OneOfintegerstring}. Deprecated alias of `maxExplanations`.}

\item{\code{thresholdHigh}}{numeric. The high threshold, above which a prediction must score in order for prediction explanations to be computed for a row in the dataset. If neither `thresholdHigh` nor `thresholdLow` is specified, prediction explanations will be computed for all rows. This option is ignored when `shap` based explanations are requested.}

\item{\code{thresholdLow}}{numeric. The lower threshold, below which a prediction must score in order for prediction explanations to be computed for a row in the dataset. If neither `thresholdHigh` nor `thresholdLow` is specified, prediction explanations will be computed for all rows. This option is ignored when `shap` based explanations are requested.}

\item{\code{excludeAdjustedPredictions}}{character. If `false`, include exposure-adjusted predictions in the response.}

\item{\code{forecastPoint}}{character. The time in the dataset relative to which predictions are generated. If not specified the default value is the value in the row with the latest specified timestamp.}

\item{\code{predictionsStartDate}}{character. The time in the dataset starting from which bulk predictions are generated. Should be defined together with `predictionsEndDate`. `forecastPoint` param can not be used if either `predictionsStartDate` or `predictionsEndDate` is passed.}

\item{\code{predictionsEndDate}}{character. The time in the dataset until which bulk predictions are generated. Should be defined together with `predictionsStartDate`. `forecastPoint` param can not be used if either `predictionsStartDate` or `predictionsEndDate` is passed.}

\item{\code{relaxKnownInAdvanceFeaturesCheck}}{character. If `true`, missing values in the known in advance features are allowed in the forecast window at the prediction time. If omitted or `false`, missing values are not allowed.}

\item{\code{predictionWarningEnabled}}{character. If `true` is passed, predictions response will include `isOutlierPrediction` key for each record with result of outlier check.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The route can be used for low-latency (hence synchronous) predictions. Scoring dataset, however, must be up to 50 MB and is limited by comma-delimited CSV and record oriented JSON. All other formats are not supported.


This method invokes \verb{POST /deployments/\{deploymentId\}/predictions/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Predictions and/or prediction explanations
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictionProxyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
passthroughColumns <- ['passthroughColumns_example'] # array[character] | List of columns from a scoring dataset to return in the prediction response. If not specified, no columns will be present in the response. Mutually exclusive with `passthroughColumnsSet`.
passthroughColumnsSet <- 'passthroughColumnsSet_example' # character | If `passthroughColumnsSet=all` is passed, all columns from the scoring dataset are returned in the prediction response. All other values for this parameter are invalid. Mutually exclusive with `passthroughColumns`.
maxExplanations <- 'maxExplanations_example' # OneOfintegerstring | The maximum number of prediction explanations to supply per row of the dataset. The default `maxExplanations` is `3` when `xemp` based explanations are requested.  The default `maxExplanations` is `all` (no limit) when `shap` based explanations are requested.
maxCodes <- 'maxCodes_example' # OneOfintegerstring | Deprecated alias of `maxExplanations`.
thresholdHigh <- 3.4 # numeric | The high threshold, above which a prediction must score in order for prediction explanations to be computed for a row in the dataset. If neither `thresholdHigh` nor `thresholdLow` is specified, prediction explanations will be computed for all rows. This option is ignored when `shap` based explanations are requested.
thresholdLow <- 3.4 # numeric | The lower threshold, below which a prediction must score in order for prediction explanations to be computed for a row in the dataset. If neither `thresholdHigh` nor `thresholdLow` is specified, prediction explanations will be computed for all rows. This option is ignored when `shap` based explanations are requested.
excludeAdjustedPredictions <- TRUE # character | If `false`, include exposure-adjusted predictions in the response.
forecastPoint <- 'forecastPoint_example' # character | The time in the dataset relative to which predictions are generated. If not specified the default value is the value in the row with the latest specified timestamp.
predictionsStartDate <- 'predictionsStartDate_example' # character | The time in the dataset starting from which bulk predictions are generated. Should be defined together with `predictionsEndDate`. `forecastPoint` param can not be used if either `predictionsStartDate` or `predictionsEndDate` is passed.
predictionsEndDate <- 'predictionsEndDate_example' # character | The time in the dataset until which bulk predictions are generated. Should be defined together with `predictionsStartDate`. `forecastPoint` param can not be used if either `predictionsStartDate` or `predictionsEndDate` is passed.
relaxKnownInAdvanceFeaturesCheck <- 'relaxKnownInAdvanceFeaturesCheck_example' # character | If `true`, missing values in the known in advance features are allowed in the forecast window at the prediction time. If omitted or `false`, missing values are not allowed.
predictionWarningEnabled <- 'predictionWarningEnabled_example' # character | If `true` is passed, predictions response will include `isOutlierPrediction` key for each record with result of outlier check.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsPredictionsCreate(deploymentId, passthroughColumns=passthroughColumns, passthroughColumnsSet=passthroughColumnsSet, maxExplanations=maxExplanations, maxCodes=maxCodes, thresholdHigh=thresholdHigh, thresholdLow=thresholdLow, excludeAdjustedPredictions=excludeAdjustedPredictions, forecastPoint=forecastPoint, predictionsStartDate=predictionsStartDate, predictionsEndDate=predictionsEndDate, relaxKnownInAdvanceFeaturesCheck=relaxKnownInAdvanceFeaturesCheck, predictionWarningEnabled=predictionWarningEnabled)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesCreate}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesCreate()}}{
Endpoint for creating a deployment retraining policy.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesCreate(
  deploymentId,
  retrainingPolicyCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingPolicyCreate}}{\link{RetrainingPolicyCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a deployment retraining policy.


This method invokes \verb{POST /deployments/\{deploymentId\}/retrainingPolicies/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} Deployment not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrainingPolicyRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyCreate <- RetrainingPolicyCreate$new() # RetrainingPolicyCreate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesCreate(deploymentId, retrainingPolicyCreate=retrainingPolicyCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesDelete"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesDelete}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesDelete()}}{
Endpoint for deleting a deployment retraining policy.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesDelete(
  deploymentId,
  retrainingPolicyId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingPolicyId}}{character. ID of the retraining policy.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a deployment retraining policy.


This method invokes \verb{DELETE /deployments/\{deploymentId\}/retrainingPolicies/\{retrainingPolicyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Delete a deployment retraining policy.
\itemize{
}
\item \strong{\code{404}} Deployment or retraining policy not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesDelete(deploymentId, retrainingPolicyId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesList}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesList()}}{
Endpoint for fetching a list of deployment retraining policies.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesList(
  deploymentId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a list of deployment retraining policies.


This method invokes \verb{GET /deployments/\{deploymentId\}/retrainingPolicies/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve a list of deployment retraining policies.
\itemize{
}
\item \strong{\code{404}} Deployment not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrainingPolicyListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesList(deploymentId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesPatch"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesPatch}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesPatch()}}{
Endpoint for updating a deployment retraining policy.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesPatch(
  deploymentId,
  retrainingPolicyId,
  retrainingPolicyUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingPolicyId}}{character. ID of the retraining policy.}

\item{\code{retrainingPolicyUpdate}}{\link{RetrainingPolicyUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a deployment retraining policy.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/retrainingPolicies/\{retrainingPolicyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} Deployment or retraining policy not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrainingPolicyRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.
retrainingPolicyUpdate <- RetrainingPolicyUpdate$new() # RetrainingPolicyUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesPatch(deploymentId, retrainingPolicyId, retrainingPolicyUpdate=retrainingPolicyUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesRetrieve}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesRetrieve()}}{
Endpoint for fetching a deployment retraining policy.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesRetrieve(
  deploymentId,
  retrainingPolicyId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingPolicyId}}{character. ID of the retraining policy.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a deployment retraining policy.


This method invokes \verb{GET /deployments/\{deploymentId\}/retrainingPolicies/\{retrainingPolicyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve a deployment retraining policy.
\itemize{
}
\item \strong{\code{404}} Deployment or retraining policy not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrainingPolicyRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRetrieve(deploymentId, retrainingPolicyId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsCreate}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesRunsCreate()}}{
Endpoint for initiating a deployment retraining policy run.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesRunsCreate(
  deploymentId,
  retrainingPolicyId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingPolicyId}}{character. ID of the retraining policy.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Initiate a deployment retraining policy run.


This method invokes \verb{POST /deployments/\{deploymentId\}/retrainingPolicies/\{retrainingPolicyId\}/runs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} Deployment or retraining policy not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRunsCreate(deploymentId, retrainingPolicyId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsList}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesRunsList()}}{
Endpoint for fetching a list of deployment retraining policy runs.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesRunsList(
  deploymentId,
  retrainingPolicyId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingPolicyId}}{character. ID of the retraining policy.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a list of deployment retraining policy runs.


This method invokes \verb{GET /deployments/\{deploymentId\}/retrainingPolicies/\{retrainingPolicyId\}/runs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve a list of deployment retraining policy runs.
\itemize{
}
\item \strong{\code{404}} Deployment or retraining policy not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrainingPolicyRunListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRunsList(deploymentId, retrainingPolicyId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsPatch}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesRunsPatch()}}{
Endpoint for updating a single deployment retraining policy run.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesRunsPatch(
  deploymentId,
  retrainingPolicyId,
  runId,
  retrainingPolicyRunUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingPolicyId}}{character. ID of the retraining policy.}

\item{\code{runId}}{character. ID of the retraining policy run.}

\item{\code{retrainingPolicyRunUpdate}}{\link{RetrainingPolicyRunUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a single deployment retraining policy run.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/retrainingPolicies/\{retrainingPolicyId\}/runs/\{runId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Update a single deployment retraining policy run.
\itemize{
}
\item \strong{\code{404}} Deployment or retraining policy not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrainingPolicyRunRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.
runId <- 'runId_example' # character | ID of the retraining policy run.
retrainingPolicyRunUpdate <- RetrainingPolicyRunUpdate$new() # RetrainingPolicyRunUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRunsPatch(deploymentId, retrainingPolicyId, runId, retrainingPolicyRunUpdate=retrainingPolicyRunUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingPoliciesRunsRetrieve}{}}}
\subsection{Method \code{DeploymentsRetrainingPoliciesRunsRetrieve()}}{
Endpoint for fetching a single deployment retraining policy run.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingPoliciesRunsRetrieve(
  deploymentId,
  retrainingPolicyId,
  runId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingPolicyId}}{character. ID of the retraining policy.}

\item{\code{runId}}{character. ID of the retraining policy run.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a single deployment retraining policy run.


This method invokes \verb{GET /deployments/\{deploymentId\}/retrainingPolicies/\{retrainingPolicyId\}/runs/\{runId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve a single deployment retraining policy run.
\itemize{
}
\item \strong{\code{404}} Deployment or retraining policy not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrainingPolicyRunRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingPolicyId <- 'retrainingPolicyId_example' # character | ID of the retraining policy.
runId <- 'runId_example' # character | ID of the retraining policy run.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingPoliciesRunsRetrieve(deploymentId, retrainingPolicyId, runId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingSettingsList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingSettingsList}{}}}
\subsection{Method \code{DeploymentsRetrainingSettingsList()}}{
Endpoint for fetching deployment retraining settings.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingSettingsList(deploymentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve deployment retraining settings.


This method invokes \verb{GET /deployments/\{deploymentId\}/retrainingSettings/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve deployment retraining settings.
\itemize{
}
\item \strong{\code{404}} Deployment not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrainingSettingsRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingSettingsList(deploymentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrainingSettingsPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrainingSettingsPatchMany}{}}}
\subsection{Method \code{DeploymentsRetrainingSettingsPatchMany()}}{
Endpoint for updating deployment retraining settings.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrainingSettingsPatchMany(
  deploymentId,
  retrainingSettingsUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{retrainingSettingsUpdate}}{\link{RetrainingSettingsUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update deployment retraining settings.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/retrainingSettings/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Update deployment retraining settings.
\itemize{
}
\item \strong{\code{404}} Deployment not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
retrainingSettingsUpdate <- RetrainingSettingsUpdate$new() # RetrainingSettingsUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrainingSettingsPatchMany(deploymentId, retrainingSettingsUpdate=retrainingSettingsUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsRetrieve}{}}}
\subsection{Method \code{DeploymentsRetrieve()}}{
Retrieve deployment
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsRetrieve(deploymentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a deployment.


This method invokes \verb{GET /deployments/\{deploymentId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The deployment
\itemize{
}
}
}

\subsection{Returns}{
\link{DeploymentRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsRetrieve(deploymentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsScoringCodeBuildsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsScoringCodeBuildsCreate}{}}}
\subsection{Method \code{DeploymentsScoringCodeBuildsCreate()}}{
Build Java package containing Scoring Code with agent integration.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsScoringCodeBuildsCreate(
  deploymentId,
  deploymentsScoringCodeBuildPayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{deploymentsScoringCodeBuildPayload}}{\link{DeploymentsScoringCodeBuildPayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Build Java package containing Scoring Code with agent integration.


This method invokes \verb{POST /deployments/\{deploymentId\}/scoringCodeBuilds/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentsScoringCodeBuildPayload <- DeploymentsScoringCodeBuildPayload$new() # DeploymentsScoringCodeBuildPayload | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsScoringCodeBuildsCreate(deploymentId, deploymentsScoringCodeBuildPayload=deploymentsScoringCodeBuildPayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsScoringCodeList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsScoringCodeList}{}}}
\subsection{Method \code{DeploymentsScoringCodeList()}}{
Retrieve Scoring Code
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsScoringCodeList(
  deploymentId,
  sourceCode = "false",
  includeAgent = "false",
  includePe = "false",
  includePredictionExplanations = "false",
  includePredictionIntervals = "false",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{sourceCode}}{Enum < \link{false, False, true, True} > Whether source code or binary of the Scoring Code will be retrieved}

\item{\code{includeAgent}}{Enum < \link{false, False, true, True} > Whether the Scoring code retrieved will include tracking agent}

\item{\code{includePe}}{Enum < \link{false, False, true, True} > Please use includePredictionExplanations parameter instead}

\item{\code{includePredictionExplanations}}{Enum < \link{false, False, true, True} > Whether the Scoring Code retrieved will include prediction explanations}

\item{\code{includePredictionIntervals}}{Enum < \link{false, False, true, True} > Whether the Scoring Code retrieved will include prediction intervals}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Scoring Code of the current deployed model for making predictions outside of a DataRobot prediction server. You need the \"Scoring Code\" feature enabled to use this route.  By default, returns a compiled executable JAR that can be executed locally to calculate model predictions, or it can be used as a library for a Java application. Execute it with the '--help\\` parameters to learn how to use it as a command-line utility. See model API documentation at <https://javadoc.io/doc/com.datarobot/datarobot-prediction/latest/index.html> to be able to use it inside an existing Java application.  With sourceCode query parameter set to 'true', returns a source code archive that can be used to review internal calculations of the model. This JAR is NOT executable.  See \"<https://app.datarobot.com/docs/predictions/scoring-code/scorecode.html>\" documentation in DataRobot application for more information.  \emph{Note} Cannot retrieve source code if agent is included.


This method invokes \verb{GET /deployments/\{deploymentId\}/scoringCode/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} JAR file
\itemize{
\item \strong{\code{ContentMinusDisposition}} Indicating the content is supposed to be downloaded as an attachment
\item \strong{\code{ContentMinusType}} application/java-archive
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
sourceCode <- "false" # character | Whether source code or binary of the Scoring Code will be retrieved
includeAgent <- "false" # character | Whether the Scoring code retrieved will include tracking agent
includePe <- "false" # character | Please use includePredictionExplanations parameter instead
includePredictionExplanations <- "false" # character | Whether the Scoring Code retrieved will include prediction explanations
includePredictionIntervals <- "false" # character | Whether the Scoring Code retrieved will include prediction intervals

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsScoringCodeList(deploymentId, sourceCode=sourceCode, includeAgent=includeAgent, includePe=includePe, includePredictionExplanations=includePredictionExplanations, includePredictionIntervals=includePredictionIntervals)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsServiceStatsList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsServiceStatsList}{}}}
\subsection{Method \code{DeploymentsServiceStatsList()}}{
Retrieve service statistics
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsServiceStatsList(
  deploymentId,
  start = NULL,
  end = NULL,
  bucketSize = NULL,
  segmentAttribute = NULL,
  segmentValue = "",
  modelId = NULL,
  executionTimeQuantile = 0.5,
  responseTimeQuantile = 0.5,
  slowRequestsThreshold = 1000,
  monitoringType = "serviceHealth",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{bucketSize}}{character. The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.}

\item{\code{segmentAttribute}}{Enum < \link{DataRobot-Consumer, DataRobot-Remote-IP, DataRobot-Host-IP} > The name of a segment attribute used for segment analysis.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{modelId}}{character. The id of the model for which metrics are being retrieved.}

\item{\code{executionTimeQuantile}}{numeric. Quantile for `executionTime` metric, defaults to 0.5.}

\item{\code{responseTimeQuantile}}{numeric. Quantile for `responseTime` metric, defaults to 0.5.}

\item{\code{slowRequestsThreshold}}{integer. Threshold for `slowRequests` metric, defaults to 1000.}

\item{\code{monitoringType}}{Enum < \link{serviceHealth, dataDrift, accuracy, humility} > The monitoring type for which segment attributes and segment values are being retrieved. Can be one of three options which corresponds to a deployment monitoring tab}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve deployment service health statistics overview.


This method invokes \verb{GET /deployments/\{deploymentId\}/serviceStats/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Service health statistics overview retrieved.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{ServiceStatsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
modelId <- 'modelId_example' # character | The id of the model for which metrics are being retrieved.
executionTimeQuantile <- 0.5 # numeric | Quantile for `executionTime` metric, defaults to 0.5.
responseTimeQuantile <- 0.5 # numeric | Quantile for `responseTime` metric, defaults to 0.5.
slowRequestsThreshold <- 1000 # integer | Threshold for `slowRequests` metric, defaults to 1000.
monitoringType <- "serviceHealth" # character | The monitoring type for which segment attributes and segment values are being retrieved. Can be one of three options which corresponds to a deployment monitoring tab

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsServiceStatsList(deploymentId, start=start, end=end, bucketSize=bucketSize, segmentAttribute=segmentAttribute, segmentValue=segmentValue, modelId=modelId, executionTimeQuantile=executionTimeQuantile, responseTimeQuantile=responseTimeQuantile, slowRequestsThreshold=slowRequestsThreshold, monitoringType=monitoringType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsServiceStatsOverTimeList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsServiceStatsOverTimeList}{}}}
\subsection{Method \code{DeploymentsServiceStatsOverTimeList()}}{
Retrieve service statistics over time
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsServiceStatsOverTimeList(
  deploymentId,
  start = NULL,
  end = NULL,
  bucketSize = NULL,
  metric = "totalPredictions",
  quantile = NULL,
  threshold = NULL,
  segmentAttribute = NULL,
  segmentValue = "",
  modelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{bucketSize}}{character. The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.}

\item{\code{metric}}{Enum < \link{totalPredictions, totalRequests, slowRequests, executionTime, responseTime, userErrorRate, serverErrorRate, numConsumers, cacheHitRatio, medianLoad, peakLoad} > Name of the metric. See below for a list of supported metrics.}

\item{\code{quantile}}{numeric. A quantile for resulting data, used if `metric` is `executionTime` or `responseTime`, defaults to 0.5.}

\item{\code{threshold}}{integer. A threshold for filtering results, used if `metric` is `slowQueries`, defaults to 1000.}

\item{\code{segmentAttribute}}{Enum < \link{DataRobot-Consumer, DataRobot-Remote-IP, DataRobot-Host-IP} > The name of a segment attribute used for segment analysis.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{modelId}}{character. The id of the model for which metrics are being retrieved.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve deployment service health statistics over time data for one single metric.


This method invokes \verb{GET /deployments/\{deploymentId\}/serviceStatsOverTime/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Service health statistics for metric retrieved.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{ServiceStatsOverTimeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
bucketSize <- 'bucketSize_example' # character | The time duration of a bucket. Needs to be multiple of one hour. Can not be longer than the total length of the period. If not set, a default value will be calculated based on the start and end time.
metric <- "totalPredictions" # character | Name of the metric. See below for a list of supported metrics.
quantile <- 3.4 # numeric | A quantile for resulting data, used if `metric` is `executionTime` or `responseTime`, defaults to 0.5.
threshold <- 56 # integer | A threshold for filtering results, used if `metric` is `slowQueries`, defaults to 1000.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.
modelId <- 'modelId_example' # character | The id of the model for which metrics are being retrieved.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsServiceStatsOverTimeList(deploymentId, start=start, end=end, bucketSize=bucketSize, metric=metric, quantile=quantile, threshold=threshold, segmentAttribute=segmentAttribute, segmentValue=segmentValue, modelId=modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsSettingsList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsSettingsList}{}}}
\subsection{Method \code{DeploymentsSettingsList()}}{
Get deployment settings
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsSettingsList(deploymentId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve deployment settings.


This method invokes \verb{GET /deployments/\{deploymentId\}/settings/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The deployment settings
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or the user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{DeploymentSettingsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsSettingsList(deploymentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsSettingsPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsSettingsPatchMany}{}}}
\subsection{Method \code{DeploymentsSettingsPatchMany()}}{
Update deployment settings
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsSettingsPatchMany(
  deploymentId,
  deploymentSettingsUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{deploymentSettingsUpdate}}{\link{DeploymentSettingsUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Updates deployment settings.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/settings/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted.  See Location header.
\itemize{
\item \strong{\code{Location}} the location to poll for settings update status
}
\item \strong{\code{403}} User can view deployment but does not have permission to update settings.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or the user does not have permission to view the deployment.
\itemize{
}
\item \strong{\code{409}} The proposed settings changes are invalid and would result in a logical conflict.
\itemize{
}
\item \strong{\code{422}} The provided settings changes could not be processed.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentSettingsUpdate <- DeploymentSettingsUpdate$new() # DeploymentSettingsUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsSettingsPatchMany(deploymentId, deploymentSettingsUpdate=deploymentSettingsUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsSharedRolesList}{}}}
\subsection{Method \code{DeploymentsSharedRolesList()}}{
Get model deployment's access control list
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsSharedRolesList(
  offset,
  limit,
  deploymentId,
  id = NULL,
  name = NULL,
  shareRecipientType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{deploymentId}}{character. The deployment ID.}

\item{\code{id}}{character. Only return roles for a user, group or organization with this identifier.}

\item{\code{name}}{character. Only return roles for a user, group or organization with this name.}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > List access controls for recipients with this type.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations who have access to this deployment and their roles.


This method invokes \verb{GET /deployments/\{deploymentId\}/sharedRoles/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{400}} Both username and userId were specified
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or the user does not have permissions to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{SharingListV2Response}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
deploymentId <- 'deploymentId_example' # character | The deployment ID.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsSharedRolesList(offset, limit, deploymentId, id=id, name=name, shareRecipientType=shareRecipientType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsSharedRolesPatchMany}{}}}
\subsection{Method \code{DeploymentsSharedRolesPatchMany()}}{
Update model deployment's controls
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsSharedRolesPatchMany(
  deploymentId,
  sharedRolesUpdateWithGrant = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. The deployment ID.}

\item{\code{sharedRolesUpdateWithGrant}}{\link{SharedRolesUpdateWithGrant}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Set roles for users on this model deployment.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/sharedRoles/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Roles updated successfully.
\itemize{
}
\item \strong{\code{409}} The request would leave the project without an owner.
\itemize{
}
\item \strong{\code{422}} One of the users in the request does not exist, or the request is otherwise invalid
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | The deployment ID.
sharedRolesUpdateWithGrant <- SharedRolesUpdateWithGrant$new() # SharedRolesUpdateWithGrant | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsSharedRolesPatchMany(deploymentId, sharedRolesUpdateWithGrant=sharedRolesUpdateWithGrant)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsStatusPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsStatusPatchMany}{}}}
\subsection{Method \code{DeploymentsStatusPatchMany()}}{
Change deployment status
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsStatusPatchMany(
  deploymentId,
  deploymentStatusUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{deploymentStatusUpdate}}{\link{DeploymentStatusUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Change deployment status.


This method invokes \verb{PATCH /deployments/\{deploymentId\}/status/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} URL for tracking async job status.
}
\item \strong{\code{409}} Deployment is already in process of status change or already in requested status.
\itemize{
}
\item \strong{\code{422}} Deployment status change request could not be processed.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
deploymentStatusUpdate <- DeploymentStatusUpdate$new() # DeploymentStatusUpdate | 

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsStatusPatchMany(deploymentId, deploymentStatusUpdate=deploymentStatusUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-DeploymentsTargetDriftList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-DeploymentsTargetDriftList}{}}}
\subsection{Method \code{DeploymentsTargetDriftList()}}{
Retrieve target drift
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$DeploymentsTargetDriftList(
  deploymentId,
  start = NULL,
  end = NULL,
  modelId = NULL,
  metric = "psi",
  segmentAttribute = NULL,
  segmentValue = "",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deploymentId}}{character. Unique identifier of the deployment.}

\item{\code{start}}{character. RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{end}}{character. RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.}

\item{\code{modelId}}{character. An ID of the model in the deployment. If not set, defaults to the deployment current model.}

\item{\code{metric}}{Enum < \link{psi, kl_divergence, dissimilarity, hellinger, js_divergence} > Metric used to calculate drift score.}

\item{\code{segmentAttribute}}{character. The name of a segment attribute used for segment analysis.}

\item{\code{segmentValue}}{character. The value of the `segmentAttribute` to segment on.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve target drift data.


This method invokes \verb{GET /deployments/\{deploymentId\}/targetDrift/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Target drift over specified time period retrieved.
\itemize{
}
\item \strong{\code{400}} Request invalid, refer to messages for detail.
\itemize{
}
\item \strong{\code{403}} Model Deployments and/or Monitoring are not enabled.
\itemize{
}
\item \strong{\code{404}} Either the deployment does not exist or user does not have permission to view the deployment.
\itemize{
}
}
}

\subsection{Returns}{
\link{DeploymentTargetDriftResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
deploymentId <- 'deploymentId_example' # character | Unique identifier of the deployment.
start <- 'start_example' # character | RFC3339 datetime. Start of time period to retrieve the features drift for. If not set, defaults to 1 week from the end of the period.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
end <- 'end_example' # character | RFC3339 datetime. End of time period to retrieve the features drift for. If not set, defaults to the next top of the hour from now.Note: this field only accepts top of the hour RFC3339 datetime strings For example: ``2019-08-01T00:00:00Z``.
modelId <- 'modelId_example' # character | An ID of the model in the deployment. If not set, defaults to the deployment current model.
metric <- "psi" # character | Metric used to calculate drift score.
segmentAttribute <- 'segmentAttribute_example' # character | The name of a segment attribute used for segment analysis.
segmentValue <- "" # character | The value of the `segmentAttribute` to segment on.

api.instance <- DeploymentsApi$new()
result <- api.instance$DeploymentsTargetDriftList(deploymentId, start=start, end=end, modelId=modelId, metric=metric, segmentAttribute=segmentAttribute, segmentValue=segmentValue)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-PredictionServersList"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-PredictionServersList}{}}}
\subsection{Method \code{PredictionServersList()}}{
List prediction servers.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$PredictionServersList(offset = 0, limit = 100, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List prediction servers available for a user.


This method invokes \verb{GET /predictionServers/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictionServerListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- DeploymentsApi$new()
result <- api.instance$PredictionServersList(offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DeploymentsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DeploymentsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DeploymentsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
