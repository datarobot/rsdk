% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/insights_api.R
\docType{class}
\name{InsightsApi}
\alias{InsightsApi}
\title{Insights operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Insights
}
\examples{

## ------------------------------------------------
## Method `InsightsApi$MultilabelInsightsHistogramList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsHistogramList(multilabelInsightsKey)
}

## ------------------------------------------------
## Method `InsightsApi$MultilabelInsightsPairwiseManualSelectionsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`
pairwiseManualSelectionCreatePayload <- PairwiseManualSelectionCreatePayload$new() # PairwiseManualSelectionCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseManualSelectionsCreate(multilabelInsightsKey, pairwiseManualSelectionCreatePayload=pairwiseManualSelectionCreatePayload)
}

## ------------------------------------------------
## Method `InsightsApi$MultilabelInsightsPairwiseManualSelectionsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`
manualSelectionListId <- 'manualSelectionListId_example' # character | ID of the label set.

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseManualSelectionsDelete(multilabelInsightsKey, manualSelectionListId)
}

## ------------------------------------------------
## Method `InsightsApi$MultilabelInsightsPairwiseManualSelectionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseManualSelectionsList(multilabelInsightsKey)
}

## ------------------------------------------------
## Method `InsightsApi$MultilabelInsightsPairwiseManualSelectionsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`
manualSelectionListId <- 'manualSelectionListId_example' # character | ID of the label set.
pairwiseManualSelectionUpdateRequest <- PairwiseManualSelectionUpdateRequest$new() # PairwiseManualSelectionUpdateRequest |

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseManualSelectionsPatch(multilabelInsightsKey, manualSelectionListId, pairwiseManualSelectionUpdateRequest=pairwiseManualSelectionUpdateRequest)
}

## ------------------------------------------------
## Method `InsightsApi$MultilabelInsightsPairwiseStatisticsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statisticType <- 'statisticType_example' # character | Type of pairwise statistic.
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseStatisticsList(statisticType, multilabelInsightsKey)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsAnomalyAssessmentRecordsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
recordId <- 'recordId_example' # character | The anomaly assessment record ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsAnomalyAssessmentRecordsDelete(projectId, recordId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsAnomalyAssessmentRecordsExplanationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
recordId <- 'recordId_example' # character | The anomaly assessment record ID
startDate <- 'startDate_example' # character | The start of the date range to return. Date should be in UTC format. For example: ``2019-08-01T00:00:00.000000Z``.
endDate <- 'endDate_example' # character | The end of the date range to return, inclusive. Date should be in UTC format. For example: ``2020-01-01T00:00:00.000000Z``.
pointsCount <- 56 # integer | Count of points to return.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsAnomalyAssessmentRecordsExplanationsList(projectId, recordId, startDate=startDate, endDate=endDate, pointsCount=pointsCount)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsAnomalyAssessmentRecordsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
modelId <- 'modelId_example' # character | The model ID to filter records by.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | The backtest to filter records by.
source <- 'source_example' # character | The source of the data to filter records by.
seriesId <- 'seriesId_example' # character | Can be specified for multiseries projects. The series id to filter records by.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsAnomalyAssessmentRecordsList(projectId, offset=offset, limit=limit, modelId=modelId, backtest=backtest, source=source, seriesId=seriesId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsAnomalyAssessmentRecordsPredictionsPreviewList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
recordId <- 'recordId_example' # character | The anomaly assessment record ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsAnomalyAssessmentRecordsPredictionsPreviewList(projectId, recordId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsBiasVsAccuracyInsightsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
accuracyMetric <- 'accuracyMetric_example' # character | The metric to return model accuracy scores. Defaults to the optimization metric configured in project options.
protectedFeature <- OneOfstringarray$new() # OneOfstringarray | Name of the protected feature.
fairnessMetric <- OneOfstringarray$new() # OneOfstringarray | The fairness metric used to calculate the fairness scores.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsBiasVsAccuracyInsightsList(projectId, accuracyMetric=accuracyMetric, protectedFeature=protectedFeature, fairnessMetric=fairnessMetric)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
forecastDistance <- 56 # integer | Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.
resolution <- 'resolution_example' # character | Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`
maxBinSize <- 500 # integer | Specifies the maximum number of bins for the retrieval.
startDate <- 'startDate_example' # character | The start of the date range to return. If not specified, start date for requested plots will be used.
endDate <- 'endDate_example' # character | The end of the date range to return. If not specified, end date for requested plots will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAccuracyOverTimePlotsList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, forecastDistance=forecastDistance, resolution=resolution, maxBinSize=maxBinSize, startDate=startDate, endDate=endDate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
forecastDistance <- 56 # integer | Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList(projectId, modelId, forecastDistance=forecastDistance, seriesId=seriesId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
forecastDistance <- 56 # integer | Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, forecastDistance=forecastDistance)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
resolution <- 'resolution_example' # character | Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`
maxBinSize <- 500 # integer | Specifies the maximum number of bins for the retrieval.
startDate <- 'startDate_example' # character | The start of the date range to return. If not specified, start date for requested plots will be used.
endDate <- 'endDate_example' # character | The end of the date range to return. If not specified, end date for requested plots will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAnomalyOverTimePlotsList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, resolution=resolution, maxBinSize=maxBinSize, startDate=startDate, endDate=endDate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList(projectId, modelId, seriesId=seriesId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
predictionThreshold <- 0.5 # numeric | Only bins with predictions exceeding this threshold will be returned in the response.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, predictionThreshold=predictionThreshold)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsBacktestStabilityPlotList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
metricName <- 'metricName_example' # character | The name of the metric to retrieve the scores for. If omitted, the default project metric will be used
forecastDistance <- 56 # integer | The forecast distance to retrieve the plot for. If not specified, the scores for each partition are aggregated across all forecast distances. This parameter is only available for time series models.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsBacktestStabilityPlotList(projectId, modelId, metricName=metricName, forecastDistance=forecastDistance)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id which was used to compute the AOT chart.
modelId <- 'modelId_example' # character | The model id which was used to compute the AOT chart.
datasetId <- 'datasetId_example' # character | The dataset id which was used to compute the AOT chart.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList(projectId, modelId, datasetId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id which was used to compute the AOT chart.
modelId <- 'modelId_example' # character | The model id which was used to compute the AOT chart.
datasetId <- 'datasetId_example' # character | The dataset id which was used to compute the AOT chart.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList(projectId, modelId, datasetId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id which was used to compute the AOT chart.
modelId <- 'modelId_example' # character | The model id which was used to compute the AOT chart.
datasetId <- 'datasetId_example' # character | The dataset id which was used to compute the AOT chart.
maxBinSize <- 500 # integer | The limit of returned bins.
startDate <- 'startDate_example' # character | The start of the date range to return (UTC string), for example: '2010-05-13T00:00:00.000000Z'. If not specified, the start date for this model and source of the data will be used instead.
endDate <- 'endDate_example' # character | The end of the date range to return (UTC string), for example: '2010-05-13T00:00:00.000000Z'. If not specified, the end date for this model and source of the data will be used instead.
resolution <- 'resolution_example' # character | Specifies at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data such that bins <= `maxBinSize`.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve(projectId, modelId, datasetId, maxBinSize=maxBinSize, startDate=startDate, endDate=endDate, resolution=resolution)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsDatetimeTrendPlotsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
datetimeTrendPlotsCreate <- DatetimeTrendPlotsCreate$new() # DatetimeTrendPlotsCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsDatetimeTrendPlotsCreate(projectId, modelId, datetimeTrendPlotsCreate=datetimeTrendPlotsCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsFeatureEffectsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
featureEffectsCreateDatetime <- FeatureEffectsCreateDatetime$new() # FeatureEffectsCreateDatetime |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureEffectsCreate(projectId, modelId, featureEffectsCreateDatetime=featureEffectsCreateDatetime)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsFeatureEffectsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
backtestIndex <- 'backtestIndex_example' # character | The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureEffectsList(backtestIndex, projectId, modelId, source=source, includeIcePlots=includeIcePlots)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsFeatureEffectsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureEffectsMetadataList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsFeatureFitCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
modelXrayCreateDatetime <- ModelXrayCreateDatetime$new() # ModelXrayCreateDatetime |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureFitCreate(projectId, modelId, modelXrayCreateDatetime=modelXrayCreateDatetime)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsFeatureFitList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
backtestIndex <- 'backtestIndex_example' # character | The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureFitList(backtestIndex, projectId, modelId, source=source, includeIcePlots=includeIcePlots)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsFeatureFitMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureFitMetadataList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsForecastDistanceStabilityPlotList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
metricName <- 'metricName_example' # character | The name of the metric to retrieve the scores for. If omitted, the default project metric will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsForecastDistanceStabilityPlotList(projectId, modelId, metricName=metricName)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
resolution <- 'resolution_example' # character | Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`
forecastDistanceStart <- 56 # integer | The start of forecast distance range (forecast window) to retrieve. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.
forecastDistanceEnd <- 56 # integer | The end of forecast distance range (forecast window) to retrieve. If not specified, the last forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.
maxBinSize <- 500 # integer | Specifies the maximum number of bins for the retrieval.
startDate <- 'startDate_example' # character | The start of the date range to return. If not specified, start date for requested plots will be used.
endDate <- 'endDate_example' # character | The end of the date range to return. If not specified, end date for requested plots will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsForecastVsActualPlotsList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, resolution=resolution, forecastDistanceStart=forecastDistanceStart, forecastDistanceEnd=forecastDistanceEnd, maxBinSize=maxBinSize, startDate=startDate, endDate=endDate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsForecastVsActualPlotsMetadataList(projectId, modelId, seriesId=seriesId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsPreviewList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsForecastVsActualPlotsPreviewList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsMulticlassFeatureEffectsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
multiclassFeatureEffectDatetimeCreate <- MulticlassFeatureEffectDatetimeCreate$new() # MulticlassFeatureEffectDatetimeCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMulticlassFeatureEffectsCreate(projectId, modelId, multiclassFeatureEffectDatetimeCreate=multiclassFeatureEffectDatetimeCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsMulticlassFeatureEffectsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
backtestIndex <- 'backtestIndex_example' # character | The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
class <- 'class_example' # character | Target class label.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMulticlassFeatureEffectsList(backtestIndex, projectId, modelId, source=source, includeIcePlots=includeIcePlots, offset=offset, limit=limit, class=class)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsMultiseriesHistogramsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
attribute <- "rowCount" # character | The series attribute to build a histogram for.
bins <- "10" # character | The number of bins in a histogram. Can be 10, 20 or 50. The default is 10.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
metric <- 'metric_example' # character | The name of the metric to retrieve the histogram for attributes \"validationScore\", \"backtestingScore\", and\"holdoutScore\". If omitted, the default project metric will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMultiseriesHistogramsList(attribute, bins, projectId, modelId, metric=metric)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsMultiseriesScoresCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesAccuracyCompute <- SeriesAccuracyCompute$new() # SeriesAccuracyCompute |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMultiseriesScoresCreate(projectId, modelId, seriesAccuracyCompute=seriesAccuracyCompute)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsMultiseriesScoresFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
multiseriesValue <- 'multiseriesValue_example' # character | If specified, only the series containing the given value in one of the series ID columns will be returned.
metric <- 'metric_example' # character | The name of the metric to retrieve the scores for. If omitted, the default project metric will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMultiseriesScoresFileList(projectId, modelId, multiseriesValue=multiseriesValue, metric=metric)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsDatetimeModelsMultiseriesScoresList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of results to skip. Defaults to 0 if not specified.
limit <- 100 # integer | The maximum number of results to return. Defaults to 100 if not specified.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
multiseriesValue <- 'multiseriesValue_example' # character | Only the series containing the given value in one of the series ID columns will be returned if specified.
metric <- 'metric_example' # character | The name of the metric to retrieve the scores for.If omitted, the default project metric will be used.
orderBy <- 'orderBy_example' # character | Used for sorting the series. Supported attributes for ordering include: \"multiseriesValue\", \"rowCount\", \"validationScore\", \"holdoutScore\"  and \"backtestingScore\", \"startDate\", \"endDate\", and \"targetAverage\".Prefix the attribute name with a dash to sort in descending order,e.g. `orderBy=-rowCount`. If multiple series with equal values of the ordering attributeexist, ties will be broken arbitrarily.
filterBy <- 'filterBy_example' # character | Used to specify on which attribute values to filter the series.Supported attributes for filtering include: \"rowCount\", \"startDate\", \"endDate\", \"targetAverage\", \"validationScore\", \"holdoutScore\", and \"backtestingScore\".`filterByBins` and `numberOfBins` are required if this parameter is used.
numberOfBins <- 'numberOfBins_example' # character | Used to specify the number of bins in the histogram on which to filter the series.Can be 10, 20 or 50.`filterBy` and `filterByBins` are required if this parameter is used.
filterByBins <- 'filterByBins_example' # character | Used to specify the multiseries histogram bins on which to filter the series.`filterBy` and `numberOfBins` are required if this parameter is used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMultiseriesScoresList(offset, limit, projectId, modelId, multiseriesValue=multiseriesValue, metric=metric, orderBy=orderBy, filterBy=filterBy, numberOfBins=numberOfBins, filterByBins=filterByBins)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsExternalScoresCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
externalScoresCreate <- ExternalScoresCreate$new() # ExternalScoresCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsExternalScoresCreate(projectId, externalScoresCreate=externalScoresCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsExternalScoresList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return scores for dataset with matching datasetId.
modelId <- 'modelId_example' # character | If provided will return scores for model with matching modelId.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsExternalScoresList(projectId, offset=offset, limit=limit, datasetId=datasetId, modelId=modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsFeatureAssociationFeaturelistsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeatureAssociationFeaturelistsList(projectId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsFeatureAssociationMatrixCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
featureAssociationCreatePayload <- FeatureAssociationCreatePayload$new() # FeatureAssociationCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeatureAssociationMatrixCreate(projectId, featureAssociationCreatePayload=featureAssociationCreatePayload)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsFeatureAssociationMatrixDetailsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
feature1 <- 'feature1_example' # character | The name of a feature.
feature2 <- 'feature2_example' # character | the name of another feature.
projectId <- 'projectId_example' # character | The project ID
featurelistId <- 'featurelistId_example' # character | the feature list to lookup FAM data for. By default, depending on the type of the project `Informative Features` or `Timeseries Informative Features` list will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeatureAssociationMatrixDetailsList(feature1, feature2, projectId, featurelistId=featurelistId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsFeatureAssociationMatrixList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
type <- "association" # character | the type of dependence for the data. Must be either `association` or `correlation`. Since v2.19 this is optional and defaults to `association`.
metric <- "mutualInfo" # character | the name of a metric to get pairwise data for. Must be one of `mutualInfo`, `cramersV`, `spearman`, `pearson`, or `tau`. Since v2.19 this is optional and defaults to `mutualInfo`.
projectId <- 'projectId_example' # character | The project ID
featurelistId <- 'featurelistId_example' # character | the feature list to lookup FAM data for. By default, depending on the type of the project `Informative Features` or `Timeseries Informative Features` list will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeatureAssociationMatrixList(type, metric, projectId, featurelistId=featurelistId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsFeaturesFrequentValuesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | project id
featureName <- 'featureName_example' # character | name of the feature

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeaturesFrequentValuesList(projectId, featureName)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsGeometryFeaturePlotsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project Id. It is the project to select the location feature from.
geometryFeaturePLotCreatePayload <- GeometryFeaturePLotCreatePayload$new() # GeometryFeaturePLotCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsGeometryFeaturePlotsCreate(projectId, geometryFeaturePLotCreatePayload=geometryFeaturePLotCreatePayload)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsGeometryFeaturePlotsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project Id. It is the project to select the feature from.
featureName <- 'featureName_example' # character | Name of location feature to plot on map. Must be supplied in order to determine which plot to retrieve.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsGeometryFeaturePlotsRetrieve(projectId, featureName)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsImageActivationMapsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | The number of items to skip over.
limit <- 100 # integer | The number of items to return.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsImageActivationMapsList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsImageEmbeddingsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | The number of items to skip over.
limit <- 100 # integer | The number of items to return.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsImageEmbeddingsList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsAnomalyAssessmentInitializationCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
anomalyAssessmentInitialize <- AnomalyAssessmentInitialize$new() # AnomalyAssessmentInitialize |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsAnomalyAssessmentInitializationCreate(projectId, modelId, anomalyAssessmentInitialize=anomalyAssessmentInitialize)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsAnomalyInsightsFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
filename <- 'filename_example' # character | name of the file to generate and return

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsAnomalyInsightsFileList(projectId, modelId, filename=filename)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsAnomalyInsightsTableList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
anomalyScoreRounding <- 56 # integer | number of decimals each element anomalyScore column will be rounded to.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsAnomalyInsightsTableList(projectId, modelId, anomalyScoreRounding=anomalyScoreRounding)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsClusterInsightsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
body <- NULL # object |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsClusterInsightsCreate(projectId, modelId, body=body)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsClusterInsightsDownloadList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
format <- "CSV" # character | A format to use.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsClusterInsightsDownloadList(projectId, modelId, format=format)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsClusterInsightsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 15 # integer | At most this many results are returned. The default may change without notice.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
orderBy <- 'orderBy_example' # character | Order results by the specified field value.
searchFor <- 'searchFor_example' # character | Search for a specific string in a feature name.This search is case insensitive. If not specified, all features will be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsClusterInsightsList(limit, projectId, modelId, offset=offset, orderBy=orderBy, searchFor=searchFor)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsConfusionChartsClassDetailsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
className <- 'className_example' # character | Name of a class for which distribution frequency is requested.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsConfusionChartsClassDetailsList(className, projectId, modelId, source)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsConfusionChartsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsConfusionChartsList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsConfusionChartsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
thumbnailCellSize <- 10 # integer | Number of classes in a single 'thumbnail' cell.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsConfusionChartsMetadataList(projectId, modelId, source, orderBy=orderBy, orientation=orientation, thumbnailCellSize=thumbnailCellSize)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsConfusionChartsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
rowStart <- 56 # integer | start index of row for slicing the confusion matrix.
rowEnd <- 56 # integer | end index of row for slicing the confusion matrix.
colStart <- 56 # integer | start index of column for slicing the confusion matrix.
colEnd <- 56 # integer | end index of column for slicing the confusion matrix.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsConfusionChartsRetrieve(projectId, modelId, source, orderBy=orderBy, orientation=orientation, rowStart=rowStart, rowEnd=rowEnd, colStart=colStart, colEnd=colEnd)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsCrossClassAccuracyScoresCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsCrossClassAccuracyScoresCreate(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsCrossClassAccuracyScoresList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsCrossClassAccuracyScoresList(projectId, modelId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDataDisparityInsightsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
dataDisparityCreatePayload <- DataDisparityCreatePayload$new() # DataDisparityCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDataDisparityInsightsCreate(projectId, modelId, dataDisparityCreatePayload=dataDisparityCreatePayload)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDataDisparityInsightsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
feature <- 'feature_example' # character | Feature for which insight is computed.
className1 <- 'className1_example' # character | One of the compared classes.
className2 <- 'className2_example' # character | Another compared class.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDataDisparityInsightsList(feature, className1, className2, projectId, modelId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDatasetConfusionChartsClassDetailsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
className <- 'className_example' # character | Name of a class for which distribution frequency is requested.
projectId <- 'projectId_example' # character | The project to retrieve a Confusion chart from.
modelId <- 'modelId_example' # character | The model to retrieve a Confusion chart from.
datasetId <- 'datasetId_example' # character | The dataset to retrieve a Confusion chart from.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetConfusionChartsClassDetailsList(className, projectId, modelId, datasetId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDatasetConfusionChartsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve a Confusion chart from.
modelId <- 'modelId_example' # character | The model to retrieve a Confusion chart from.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
rowStart <- 56 # integer | start index of row for slicing the confusion matrix.
rowEnd <- 56 # integer | end index of row for slicing the confusion matrix.
colStart <- 56 # integer | start index of column for slicing the confusion matrix.
colEnd <- 56 # integer | end index of column for slicing the confusion matrix.
datasetId <- 'datasetId_example' # character | The datasetId to retrieve a Confusion chart from.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetConfusionChartsList(projectId, modelId, offset=offset, limit=limit, orderBy=orderBy, orientation=orientation, rowStart=rowStart, rowEnd=rowEnd, colStart=colStart, colEnd=colEnd, datasetId=datasetId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDatasetConfusionChartsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve a Confusion chart from.
modelId <- 'modelId_example' # character | The model to retrieve a Confusion chart from.
datasetId <- 'datasetId_example' # character | The dataset to retrieve a Confusion chart from.
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
thumbnailCellSize <- 10 # integer | Number of classes in a single 'thumbnail' cell.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetConfusionChartsMetadataList(projectId, modelId, datasetId, orderBy=orderBy, orientation=orientation, thumbnailCellSize=thumbnailCellSize)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDatasetConfusionChartsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve a Confusion chart from.
modelId <- 'modelId_example' # character | The model to retrieve a Confusion chart from.
datasetId <- 'datasetId_example' # character | The dataset to retrieve a Confusion chart from.
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
rowStart <- 56 # integer | start index of row for slicing the confusion matrix.
rowEnd <- 56 # integer | end index of row for slicing the confusion matrix.
colStart <- 56 # integer | start index of column for slicing the confusion matrix.
colEnd <- 56 # integer | end index of column for slicing the confusion matrix.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetConfusionChartsRetrieve(projectId, modelId, datasetId, orderBy=orderBy, orientation=orientation, rowStart=rowStart, rowEnd=rowEnd, colStart=colStart, colEnd=colEnd)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDatasetLiftChartsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return Lift chart for dataset with matching datasetId.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetLiftChartsList(projectId, modelId, offset=offset, limit=limit, datasetId=datasetId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDatasetMulticlassLiftChartsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return Lift chart for dataset with matching datasetId.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetMulticlassLiftChartsList(projectId, modelId, offset=offset, limit=limit, datasetId=datasetId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDatasetResidualsChartsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return ROC curve for dataset with matching `datasetId`.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetResidualsChartsList(projectId, modelId, offset=offset, limit=limit, datasetId=datasetId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsDatasetRocCurvesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return ROC curve for dataset with matching `datasetId`.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetRocCurvesList(projectId, modelId, offset=offset, limit=limit, datasetId=datasetId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFairnessInsightsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
fairnessInsightsStartCalculationPayload <- FairnessInsightsStartCalculationPayload$new() # FairnessInsightsStartCalculationPayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFairnessInsightsCreate(projectId, modelId, fairnessInsightsStartCalculationPayload=fairnessInsightsStartCalculationPayload)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFairnessInsightsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.
fairnessMetricsSet <- 'fairnessMetricsSet_example' # character | Metric to use for calculating fairness. Can be one of ``proportionalParity``, ``equalParity``, ``predictionBalance``, ``trueFavorableAndUnfavorableRateParity`` or ``FavorableAndUnfavorablePredictiveValueParity``. Used and required only if *Bias & Fairness in AutoML* feature is enabled.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFairnessInsightsList(projectId, modelId, offset=offset, limit=limit, fairnessMetricsSet=fairnessMetricsSet)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureEffectsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
featureEffectCreate <- FeatureEffectCreate$new() # FeatureEffectCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureEffectsCreate(projectId, modelId, featureEffectCreate=featureEffectCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureEffectsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureEffectsList(projectId, modelId, source=source, includeIcePlots=includeIcePlots)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureEffectsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureEffectsMetadataList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureFitCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureFitCreate(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureFitList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureFitList(projectId, modelId, source=source, includeIcePlots=includeIcePlots)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureFitMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureFitMetadataList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureImpactCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
featureImpactCreatePayload <- FeatureImpactCreatePayload$new() # FeatureImpactCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureImpactCreate(projectId, modelId, featureImpactCreatePayload=featureImpactCreatePayload)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureImpactList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
backtest <- 'backtest_example' # character | The backtest value is used for Feature Impact computation. It is possible to re-compute Feature Impact for different backtests in datetime partitioned models.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureImpactList(projectId, modelId, backtest=backtest)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsFeatureListsClusterInsightsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 15 # integer | At most this many results are returned. The default may change without notice.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
datasetId <- 'datasetId_example' # character | The dataset ID
offset <- 0 # integer | Number of results to skip.
orderBy <- 'orderBy_example' # character | Order results by the specified field value.
searchFor <- 'searchFor_example' # character | Search for a specific string in a feature name.This search is case insensitive. If not specified, all features will be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureListsClusterInsightsList(limit, projectId, modelId, datasetId, offset=offset, orderBy=orderBy, searchFor=searchFor)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsImageActivationMapsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsImageActivationMapsCreate(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsImageActivationMapsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the feature to query
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsImageActivationMapsList(featureName, projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsImageEmbeddingsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsImageEmbeddingsCreate(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsImageEmbeddingsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the feature to query
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsImageEmbeddingsList(featureName, projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsLabelwiseRocCurvesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project Id.
modelId <- 'modelId_example' # character | Model Id.
source <- 'source_example' # character | Chart source.
labels <- 'labels_example' # character | Labels for which data is requested.
searchQuery <- 'searchQuery_example' # character | Search query for label.
sortBy <- "label" # character | Property to sort labels in the response.
sortOrder <- "ascending" # character | Sort order.
threshold <- 3.4 # numeric | Threshold at which the metric should be sorted.
offset <- 0 # integer | Number of labels to skip.
limit <- 100 # integer | Number of labels to return.
includeModelAverage <- FALSE # character | Whether model average metrics should be included in the response.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsLabelwiseRocCurvesList(projectId, modelId, source, labels=labels, searchQuery=searchQuery, sortBy=sortBy, sortOrder=sortOrder, threshold=threshold, offset=offset, limit=limit, includeModelAverage=includeModelAverage)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsLiftChartList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsLiftChartList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsLiftChartRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsLiftChartRetrieve(projectId, modelId, source)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsMulticlassFeatureEffectsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
multiclassFeatureEffectCreate <- MulticlassFeatureEffectCreate$new() # MulticlassFeatureEffectCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassFeatureEffectsCreate(projectId, modelId, multiclassFeatureEffectCreate=multiclassFeatureEffectCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsMulticlassFeatureEffectsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
class <- 'class_example' # character | Target class label.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassFeatureEffectsList(projectId, modelId, source=source, includeIcePlots=includeIcePlots, offset=offset, limit=limit, class=class)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsMulticlassFeatureImpactList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassFeatureImpactList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsMulticlassLiftChartList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassLiftChartList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsMulticlassLiftChartRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassLiftChartRetrieve(projectId, modelId, source)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsMultilabelLiftChartsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project Id.
modelId <- 'modelId_example' # character | Model Id.
source <- 'source_example' # character | Chart source.
labels <- 'labels_example' # character | Labels for which data is requested.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMultilabelLiftChartsRetrieve(projectId, modelId, source, labels=labels)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsPredictionExplanationsInitializationCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
predictionExplanationsInitializationCreate <- PredictionExplanationsInitializationCreate$new() # PredictionExplanationsInitializationCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationCreate(projectId, modelId, predictionExplanationsInitializationCreate=predictionExplanationsInitializationCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsPredictionExplanationsInitializationDeleteMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationDeleteMany(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsPredictionExplanationsInitializationList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
excludeAdjustedPredictions <- "true" # character | Whether to include adjusted prediction in the PredictionExplanationsSample response.
predictionExplanationsInitializationRetrieve <- PredictionExplanationsInitializationRetrieve$new() # PredictionExplanationsInitializationRetrieve |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationList(projectId, modelId, excludeAdjustedPredictions=excludeAdjustedPredictions, predictionExplanationsInitializationRetrieve=predictionExplanationsInitializationRetrieve)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsResidualsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsResidualsList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsResidualsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsResidualsRetrieve(projectId, modelId, source)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsRocCurveList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsRocCurveList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsRocCurveRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsRocCurveRetrieve(projectId, modelId, source)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsShapImpactCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
featureImpactCreatePayload <- FeatureImpactCreatePayload$new() # FeatureImpactCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsShapImpactCreate(projectId, modelId, featureImpactCreatePayload=featureImpactCreatePayload)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsShapImpactList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsShapImpactList(projectId, modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsModelsWordCloudList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
excludeStopWords <- 'excludeStopWords_example' # character | Set to true if you want stopwords excluded from the response.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsWordCloudList(projectId, modelId, excludeStopWords=excludeStopWords)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsMulticategoricalInvalidFormatFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The ID of the project this request is associated with.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsMulticategoricalInvalidFormatFileList(projectId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsMulticategoricalInvalidFormatList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The ID of the project this request is associated with.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsMulticategoricalInvalidFormatList(projectId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPayoffMatricesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
payoffMatricesCreate <- PayoffMatricesCreate$new() # PayoffMatricesCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPayoffMatricesCreate(projectId, payoffMatricesCreate=payoffMatricesCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPayoffMatricesDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
payoffMatrixId <- 'payoffMatrixId_example' # character | ObjectId of the payoff matrix.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPayoffMatricesDelete(projectId, payoffMatrixId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPayoffMatricesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of payoff matrices to skip.
limit <- 100 # integer | Number of payoff matrices to return.
projectId <- 'projectId_example' # character | The project ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPayoffMatricesList(offset, limit, projectId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPayoffMatricesPut`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
payoffMatrixId <- 'payoffMatrixId_example' # character | ObjectId of the payoff matrix.
payoffMatricesCreate <- PayoffMatricesCreate$new() # PayoffMatricesCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPayoffMatricesPut(projectId, payoffMatrixId, payoffMatricesCreate=payoffMatricesCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPredictionExplanationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsCreate <- PredictionExplanationsCreate$new() # PredictionExplanationsCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsCreate(projectId, predictionExplanationsCreate=predictionExplanationsCreate)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPredictionExplanationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 3000 # integer | At most this many results are returned. The default may change and a new maximum limit may be imposed without notice.
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.
offset <- 0 # integer | This many results will be skipped.
excludeAdjustedPredictions <- "true" # character | Whether to include adjusted prediction in PredictionExplanationsRow response.
predictionExplanationsRetrieve <- PredictionExplanationsRetrieve$new() # PredictionExplanationsRetrieve |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsList(limit, projectId, predictionExplanationsId, offset=offset, excludeAdjustedPredictions=excludeAdjustedPredictions, predictionExplanationsRetrieve=predictionExplanationsRetrieve)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPredictionExplanationsRecordsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsDelete(projectId, predictionExplanationsId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPredictionExplanationsRecordsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
modelId <- 'modelId_example' # character | If specified, only prediction explanations records computed for this model will be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsList(projectId, offset=offset, limit=limit, modelId=modelId)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsPredictionExplanationsRecordsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.
predictionExplanationsRecord <- PredictionExplanationsRecord$new() # PredictionExplanationsRecord |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsRetrieve(projectId, predictionExplanationsId, predictionExplanationsRecord=predictionExplanationsRecord)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsShapMatricesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
createShapMatrixPayload <- CreateShapMatrixPayload$new() # CreateShapMatrixPayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsShapMatricesCreate(projectId, createShapMatrixPayload=createShapMatrixPayload)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsShapMatricesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsShapMatricesList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `InsightsApi$ProjectsShapMatricesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
shapMatrixId <- 'shapMatrixId_example' # character | The SHAP matrix ID.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsShapMatricesRetrieve(projectId, shapMatrixId)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{InsightsApi$new()}}
\item \href{#method-MultilabelInsightsHistogramList}{\code{InsightsApi$MultilabelInsightsHistogramList()}}
\item \href{#method-MultilabelInsightsPairwiseManualSelectionsCreate}{\code{InsightsApi$MultilabelInsightsPairwiseManualSelectionsCreate()}}
\item \href{#method-MultilabelInsightsPairwiseManualSelectionsDelete}{\code{InsightsApi$MultilabelInsightsPairwiseManualSelectionsDelete()}}
\item \href{#method-MultilabelInsightsPairwiseManualSelectionsList}{\code{InsightsApi$MultilabelInsightsPairwiseManualSelectionsList()}}
\item \href{#method-MultilabelInsightsPairwiseManualSelectionsPatch}{\code{InsightsApi$MultilabelInsightsPairwiseManualSelectionsPatch()}}
\item \href{#method-MultilabelInsightsPairwiseStatisticsList}{\code{InsightsApi$MultilabelInsightsPairwiseStatisticsList()}}
\item \href{#method-ProjectsAnomalyAssessmentRecordsDelete}{\code{InsightsApi$ProjectsAnomalyAssessmentRecordsDelete()}}
\item \href{#method-ProjectsAnomalyAssessmentRecordsExplanationsList}{\code{InsightsApi$ProjectsAnomalyAssessmentRecordsExplanationsList()}}
\item \href{#method-ProjectsAnomalyAssessmentRecordsList}{\code{InsightsApi$ProjectsAnomalyAssessmentRecordsList()}}
\item \href{#method-ProjectsAnomalyAssessmentRecordsPredictionsPreviewList}{\code{InsightsApi$ProjectsAnomalyAssessmentRecordsPredictionsPreviewList()}}
\item \href{#method-ProjectsBiasVsAccuracyInsightsList}{\code{InsightsApi$ProjectsBiasVsAccuracyInsightsList()}}
\item \href{#method-ProjectsDatetimeModelsAccuracyOverTimePlotsList}{\code{InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsList()}}
\item \href{#method-ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList}{\code{InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList()}}
\item \href{#method-ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList}{\code{InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList()}}
\item \href{#method-ProjectsDatetimeModelsAnomalyOverTimePlotsList}{\code{InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsList()}}
\item \href{#method-ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList}{\code{InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList()}}
\item \href{#method-ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList}{\code{InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList()}}
\item \href{#method-ProjectsDatetimeModelsBacktestStabilityPlotList}{\code{InsightsApi$ProjectsDatetimeModelsBacktestStabilityPlotList()}}
\item \href{#method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList}{\code{InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList()}}
\item \href{#method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList}{\code{InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList()}}
\item \href{#method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve}{\code{InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve()}}
\item \href{#method-ProjectsDatetimeModelsDatetimeTrendPlotsCreate}{\code{InsightsApi$ProjectsDatetimeModelsDatetimeTrendPlotsCreate()}}
\item \href{#method-ProjectsDatetimeModelsFeatureEffectsCreate}{\code{InsightsApi$ProjectsDatetimeModelsFeatureEffectsCreate()}}
\item \href{#method-ProjectsDatetimeModelsFeatureEffectsList}{\code{InsightsApi$ProjectsDatetimeModelsFeatureEffectsList()}}
\item \href{#method-ProjectsDatetimeModelsFeatureEffectsMetadataList}{\code{InsightsApi$ProjectsDatetimeModelsFeatureEffectsMetadataList()}}
\item \href{#method-ProjectsDatetimeModelsFeatureFitCreate}{\code{InsightsApi$ProjectsDatetimeModelsFeatureFitCreate()}}
\item \href{#method-ProjectsDatetimeModelsFeatureFitList}{\code{InsightsApi$ProjectsDatetimeModelsFeatureFitList()}}
\item \href{#method-ProjectsDatetimeModelsFeatureFitMetadataList}{\code{InsightsApi$ProjectsDatetimeModelsFeatureFitMetadataList()}}
\item \href{#method-ProjectsDatetimeModelsForecastDistanceStabilityPlotList}{\code{InsightsApi$ProjectsDatetimeModelsForecastDistanceStabilityPlotList()}}
\item \href{#method-ProjectsDatetimeModelsForecastVsActualPlotsList}{\code{InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsList()}}
\item \href{#method-ProjectsDatetimeModelsForecastVsActualPlotsMetadataList}{\code{InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsMetadataList()}}
\item \href{#method-ProjectsDatetimeModelsForecastVsActualPlotsPreviewList}{\code{InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsPreviewList()}}
\item \href{#method-ProjectsDatetimeModelsMulticlassFeatureEffectsCreate}{\code{InsightsApi$ProjectsDatetimeModelsMulticlassFeatureEffectsCreate()}}
\item \href{#method-ProjectsDatetimeModelsMulticlassFeatureEffectsList}{\code{InsightsApi$ProjectsDatetimeModelsMulticlassFeatureEffectsList()}}
\item \href{#method-ProjectsDatetimeModelsMultiseriesHistogramsList}{\code{InsightsApi$ProjectsDatetimeModelsMultiseriesHistogramsList()}}
\item \href{#method-ProjectsDatetimeModelsMultiseriesScoresCreate}{\code{InsightsApi$ProjectsDatetimeModelsMultiseriesScoresCreate()}}
\item \href{#method-ProjectsDatetimeModelsMultiseriesScoresFileList}{\code{InsightsApi$ProjectsDatetimeModelsMultiseriesScoresFileList()}}
\item \href{#method-ProjectsDatetimeModelsMultiseriesScoresList}{\code{InsightsApi$ProjectsDatetimeModelsMultiseriesScoresList()}}
\item \href{#method-ProjectsExternalScoresCreate}{\code{InsightsApi$ProjectsExternalScoresCreate()}}
\item \href{#method-ProjectsExternalScoresList}{\code{InsightsApi$ProjectsExternalScoresList()}}
\item \href{#method-ProjectsFeatureAssociationFeaturelistsList}{\code{InsightsApi$ProjectsFeatureAssociationFeaturelistsList()}}
\item \href{#method-ProjectsFeatureAssociationMatrixCreate}{\code{InsightsApi$ProjectsFeatureAssociationMatrixCreate()}}
\item \href{#method-ProjectsFeatureAssociationMatrixDetailsList}{\code{InsightsApi$ProjectsFeatureAssociationMatrixDetailsList()}}
\item \href{#method-ProjectsFeatureAssociationMatrixList}{\code{InsightsApi$ProjectsFeatureAssociationMatrixList()}}
\item \href{#method-ProjectsFeaturesFrequentValuesList}{\code{InsightsApi$ProjectsFeaturesFrequentValuesList()}}
\item \href{#method-ProjectsGeometryFeaturePlotsCreate}{\code{InsightsApi$ProjectsGeometryFeaturePlotsCreate()}}
\item \href{#method-ProjectsGeometryFeaturePlotsRetrieve}{\code{InsightsApi$ProjectsGeometryFeaturePlotsRetrieve()}}
\item \href{#method-ProjectsImageActivationMapsList}{\code{InsightsApi$ProjectsImageActivationMapsList()}}
\item \href{#method-ProjectsImageEmbeddingsList}{\code{InsightsApi$ProjectsImageEmbeddingsList()}}
\item \href{#method-ProjectsModelsAnomalyAssessmentInitializationCreate}{\code{InsightsApi$ProjectsModelsAnomalyAssessmentInitializationCreate()}}
\item \href{#method-ProjectsModelsAnomalyInsightsFileList}{\code{InsightsApi$ProjectsModelsAnomalyInsightsFileList()}}
\item \href{#method-ProjectsModelsAnomalyInsightsTableList}{\code{InsightsApi$ProjectsModelsAnomalyInsightsTableList()}}
\item \href{#method-ProjectsModelsClusterInsightsCreate}{\code{InsightsApi$ProjectsModelsClusterInsightsCreate()}}
\item \href{#method-ProjectsModelsClusterInsightsDownloadList}{\code{InsightsApi$ProjectsModelsClusterInsightsDownloadList()}}
\item \href{#method-ProjectsModelsClusterInsightsList}{\code{InsightsApi$ProjectsModelsClusterInsightsList()}}
\item \href{#method-ProjectsModelsConfusionChartsClassDetailsList}{\code{InsightsApi$ProjectsModelsConfusionChartsClassDetailsList()}}
\item \href{#method-ProjectsModelsConfusionChartsList}{\code{InsightsApi$ProjectsModelsConfusionChartsList()}}
\item \href{#method-ProjectsModelsConfusionChartsMetadataList}{\code{InsightsApi$ProjectsModelsConfusionChartsMetadataList()}}
\item \href{#method-ProjectsModelsConfusionChartsRetrieve}{\code{InsightsApi$ProjectsModelsConfusionChartsRetrieve()}}
\item \href{#method-ProjectsModelsCrossClassAccuracyScoresCreate}{\code{InsightsApi$ProjectsModelsCrossClassAccuracyScoresCreate()}}
\item \href{#method-ProjectsModelsCrossClassAccuracyScoresList}{\code{InsightsApi$ProjectsModelsCrossClassAccuracyScoresList()}}
\item \href{#method-ProjectsModelsDataDisparityInsightsCreate}{\code{InsightsApi$ProjectsModelsDataDisparityInsightsCreate()}}
\item \href{#method-ProjectsModelsDataDisparityInsightsList}{\code{InsightsApi$ProjectsModelsDataDisparityInsightsList()}}
\item \href{#method-ProjectsModelsDatasetConfusionChartsClassDetailsList}{\code{InsightsApi$ProjectsModelsDatasetConfusionChartsClassDetailsList()}}
\item \href{#method-ProjectsModelsDatasetConfusionChartsList}{\code{InsightsApi$ProjectsModelsDatasetConfusionChartsList()}}
\item \href{#method-ProjectsModelsDatasetConfusionChartsMetadataList}{\code{InsightsApi$ProjectsModelsDatasetConfusionChartsMetadataList()}}
\item \href{#method-ProjectsModelsDatasetConfusionChartsRetrieve}{\code{InsightsApi$ProjectsModelsDatasetConfusionChartsRetrieve()}}
\item \href{#method-ProjectsModelsDatasetLiftChartsList}{\code{InsightsApi$ProjectsModelsDatasetLiftChartsList()}}
\item \href{#method-ProjectsModelsDatasetMulticlassLiftChartsList}{\code{InsightsApi$ProjectsModelsDatasetMulticlassLiftChartsList()}}
\item \href{#method-ProjectsModelsDatasetResidualsChartsList}{\code{InsightsApi$ProjectsModelsDatasetResidualsChartsList()}}
\item \href{#method-ProjectsModelsDatasetRocCurvesList}{\code{InsightsApi$ProjectsModelsDatasetRocCurvesList()}}
\item \href{#method-ProjectsModelsFairnessInsightsCreate}{\code{InsightsApi$ProjectsModelsFairnessInsightsCreate()}}
\item \href{#method-ProjectsModelsFairnessInsightsList}{\code{InsightsApi$ProjectsModelsFairnessInsightsList()}}
\item \href{#method-ProjectsModelsFeatureEffectsCreate}{\code{InsightsApi$ProjectsModelsFeatureEffectsCreate()}}
\item \href{#method-ProjectsModelsFeatureEffectsList}{\code{InsightsApi$ProjectsModelsFeatureEffectsList()}}
\item \href{#method-ProjectsModelsFeatureEffectsMetadataList}{\code{InsightsApi$ProjectsModelsFeatureEffectsMetadataList()}}
\item \href{#method-ProjectsModelsFeatureFitCreate}{\code{InsightsApi$ProjectsModelsFeatureFitCreate()}}
\item \href{#method-ProjectsModelsFeatureFitList}{\code{InsightsApi$ProjectsModelsFeatureFitList()}}
\item \href{#method-ProjectsModelsFeatureFitMetadataList}{\code{InsightsApi$ProjectsModelsFeatureFitMetadataList()}}
\item \href{#method-ProjectsModelsFeatureImpactCreate}{\code{InsightsApi$ProjectsModelsFeatureImpactCreate()}}
\item \href{#method-ProjectsModelsFeatureImpactList}{\code{InsightsApi$ProjectsModelsFeatureImpactList()}}
\item \href{#method-ProjectsModelsFeatureListsClusterInsightsList}{\code{InsightsApi$ProjectsModelsFeatureListsClusterInsightsList()}}
\item \href{#method-ProjectsModelsImageActivationMapsCreate}{\code{InsightsApi$ProjectsModelsImageActivationMapsCreate()}}
\item \href{#method-ProjectsModelsImageActivationMapsList}{\code{InsightsApi$ProjectsModelsImageActivationMapsList()}}
\item \href{#method-ProjectsModelsImageEmbeddingsCreate}{\code{InsightsApi$ProjectsModelsImageEmbeddingsCreate()}}
\item \href{#method-ProjectsModelsImageEmbeddingsList}{\code{InsightsApi$ProjectsModelsImageEmbeddingsList()}}
\item \href{#method-ProjectsModelsLabelwiseRocCurvesList}{\code{InsightsApi$ProjectsModelsLabelwiseRocCurvesList()}}
\item \href{#method-ProjectsModelsLiftChartList}{\code{InsightsApi$ProjectsModelsLiftChartList()}}
\item \href{#method-ProjectsModelsLiftChartRetrieve}{\code{InsightsApi$ProjectsModelsLiftChartRetrieve()}}
\item \href{#method-ProjectsModelsMulticlassFeatureEffectsCreate}{\code{InsightsApi$ProjectsModelsMulticlassFeatureEffectsCreate()}}
\item \href{#method-ProjectsModelsMulticlassFeatureEffectsList}{\code{InsightsApi$ProjectsModelsMulticlassFeatureEffectsList()}}
\item \href{#method-ProjectsModelsMulticlassFeatureImpactList}{\code{InsightsApi$ProjectsModelsMulticlassFeatureImpactList()}}
\item \href{#method-ProjectsModelsMulticlassLiftChartList}{\code{InsightsApi$ProjectsModelsMulticlassLiftChartList()}}
\item \href{#method-ProjectsModelsMulticlassLiftChartRetrieve}{\code{InsightsApi$ProjectsModelsMulticlassLiftChartRetrieve()}}
\item \href{#method-ProjectsModelsMultilabelLiftChartsRetrieve}{\code{InsightsApi$ProjectsModelsMultilabelLiftChartsRetrieve()}}
\item \href{#method-ProjectsModelsPredictionExplanationsInitializationCreate}{\code{InsightsApi$ProjectsModelsPredictionExplanationsInitializationCreate()}}
\item \href{#method-ProjectsModelsPredictionExplanationsInitializationDeleteMany}{\code{InsightsApi$ProjectsModelsPredictionExplanationsInitializationDeleteMany()}}
\item \href{#method-ProjectsModelsPredictionExplanationsInitializationList}{\code{InsightsApi$ProjectsModelsPredictionExplanationsInitializationList()}}
\item \href{#method-ProjectsModelsResidualsList}{\code{InsightsApi$ProjectsModelsResidualsList()}}
\item \href{#method-ProjectsModelsResidualsRetrieve}{\code{InsightsApi$ProjectsModelsResidualsRetrieve()}}
\item \href{#method-ProjectsModelsRocCurveList}{\code{InsightsApi$ProjectsModelsRocCurveList()}}
\item \href{#method-ProjectsModelsRocCurveRetrieve}{\code{InsightsApi$ProjectsModelsRocCurveRetrieve()}}
\item \href{#method-ProjectsModelsShapImpactCreate}{\code{InsightsApi$ProjectsModelsShapImpactCreate()}}
\item \href{#method-ProjectsModelsShapImpactList}{\code{InsightsApi$ProjectsModelsShapImpactList()}}
\item \href{#method-ProjectsModelsWordCloudList}{\code{InsightsApi$ProjectsModelsWordCloudList()}}
\item \href{#method-ProjectsMulticategoricalInvalidFormatFileList}{\code{InsightsApi$ProjectsMulticategoricalInvalidFormatFileList()}}
\item \href{#method-ProjectsMulticategoricalInvalidFormatList}{\code{InsightsApi$ProjectsMulticategoricalInvalidFormatList()}}
\item \href{#method-ProjectsPayoffMatricesCreate}{\code{InsightsApi$ProjectsPayoffMatricesCreate()}}
\item \href{#method-ProjectsPayoffMatricesDelete}{\code{InsightsApi$ProjectsPayoffMatricesDelete()}}
\item \href{#method-ProjectsPayoffMatricesList}{\code{InsightsApi$ProjectsPayoffMatricesList()}}
\item \href{#method-ProjectsPayoffMatricesPut}{\code{InsightsApi$ProjectsPayoffMatricesPut()}}
\item \href{#method-ProjectsPredictionExplanationsCreate}{\code{InsightsApi$ProjectsPredictionExplanationsCreate()}}
\item \href{#method-ProjectsPredictionExplanationsList}{\code{InsightsApi$ProjectsPredictionExplanationsList()}}
\item \href{#method-ProjectsPredictionExplanationsRecordsDelete}{\code{InsightsApi$ProjectsPredictionExplanationsRecordsDelete()}}
\item \href{#method-ProjectsPredictionExplanationsRecordsList}{\code{InsightsApi$ProjectsPredictionExplanationsRecordsList()}}
\item \href{#method-ProjectsPredictionExplanationsRecordsRetrieve}{\code{InsightsApi$ProjectsPredictionExplanationsRecordsRetrieve()}}
\item \href{#method-ProjectsShapMatricesCreate}{\code{InsightsApi$ProjectsShapMatricesCreate()}}
\item \href{#method-ProjectsShapMatricesList}{\code{InsightsApi$ProjectsShapMatricesList()}}
\item \href{#method-ProjectsShapMatricesRetrieve}{\code{InsightsApi$ProjectsShapMatricesRetrieve()}}
\item \href{#method-clone}{\code{InsightsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MultilabelInsightsHistogramList"></a>}}
\if{latex}{\out{\hypertarget{method-MultilabelInsightsHistogramList}{}}}
\subsection{Method \code{MultilabelInsightsHistogramList()}}{
Retrieve multicategorical feature histogram.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$MultilabelInsightsHistogramList(multilabelInsightsKey, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{multilabelInsightsKey}}{character. Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve multicategorical feature histogram.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Multicategorical feature histogram.
\itemize{
}
}
}

\subsection{Returns}{
\link{MulticategoricalHistogram}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsHistogramList(multilabelInsightsKey)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MultilabelInsightsPairwiseManualSelectionsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-MultilabelInsightsPairwiseManualSelectionsCreate}{}}}
\subsection{Method \code{MultilabelInsightsPairwiseManualSelectionsCreate()}}{
Save a list of manually selected labels for Feature Statistics matrix.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$MultilabelInsightsPairwiseManualSelectionsCreate(
  multilabelInsightsKey,
  pairwiseManualSelectionCreatePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{multilabelInsightsKey}}{character. Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`}

\item{\code{pairwiseManualSelectionCreatePayload}}{\link{PairwiseManualSelectionCreatePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Save a list of manually selected labels for Feature Statistics matrix.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Whether manually selected labels were saved successfully.
\itemize{
}
\item \strong{\code{422}} The manual selection name is already taken or another exception occurred.
\itemize{
}
}
}

\subsection{Returns}{
\link{PairwiseManualSelectionCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`
pairwiseManualSelectionCreatePayload <- PairwiseManualSelectionCreatePayload$new() # PairwiseManualSelectionCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseManualSelectionsCreate(multilabelInsightsKey, pairwiseManualSelectionCreatePayload=pairwiseManualSelectionCreatePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MultilabelInsightsPairwiseManualSelectionsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-MultilabelInsightsPairwiseManualSelectionsDelete}{}}}
\subsection{Method \code{MultilabelInsightsPairwiseManualSelectionsDelete()}}{
Delete label list.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$MultilabelInsightsPairwiseManualSelectionsDelete(
  multilabelInsightsKey,
  manualSelectionListId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{multilabelInsightsKey}}{character. Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`}

\item{\code{manualSelectionListId}}{character. ID of the label set.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete label list.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} ID of the deleted label list.
\itemize{
}
}
}

\subsection{Returns}{
\link{PairwiseManualSelectionResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`
manualSelectionListId <- 'manualSelectionListId_example' # character | ID of the label set.

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseManualSelectionsDelete(multilabelInsightsKey, manualSelectionListId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MultilabelInsightsPairwiseManualSelectionsList"></a>}}
\if{latex}{\out{\hypertarget{method-MultilabelInsightsPairwiseManualSelectionsList}{}}}
\subsection{Method \code{MultilabelInsightsPairwiseManualSelectionsList()}}{
Get all label lists.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$MultilabelInsightsPairwiseManualSelectionsList(
  multilabelInsightsKey,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{multilabelInsightsKey}}{character. Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get all label lists.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} All label lists
\itemize{
}
}
}

\subsection{Returns}{
\link{PairwiseManualSelectionsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseManualSelectionsList(multilabelInsightsKey)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MultilabelInsightsPairwiseManualSelectionsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-MultilabelInsightsPairwiseManualSelectionsPatch}{}}}
\subsection{Method \code{MultilabelInsightsPairwiseManualSelectionsPatch()}}{
Update label list's name.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$MultilabelInsightsPairwiseManualSelectionsPatch(
  multilabelInsightsKey,
  manualSelectionListId,
  pairwiseManualSelectionUpdateRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{multilabelInsightsKey}}{character. Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`}

\item{\code{manualSelectionListId}}{character. ID of the label set.}

\item{\code{pairwiseManualSelectionUpdateRequest}}{\link{PairwiseManualSelectionUpdateRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update label list's name.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} ID of the updated label list.
\itemize{
}
}
}

\subsection{Returns}{
\link{PairwiseManualSelectionResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`
manualSelectionListId <- 'manualSelectionListId_example' # character | ID of the label set.
pairwiseManualSelectionUpdateRequest <- PairwiseManualSelectionUpdateRequest$new() # PairwiseManualSelectionUpdateRequest |

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseManualSelectionsPatch(multilabelInsightsKey, manualSelectionListId, pairwiseManualSelectionUpdateRequest=pairwiseManualSelectionUpdateRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MultilabelInsightsPairwiseStatisticsList"></a>}}
\if{latex}{\out{\hypertarget{method-MultilabelInsightsPairwiseStatisticsList}{}}}
\subsection{Method \code{MultilabelInsightsPairwiseStatisticsList()}}{
Retrieve pairwise statistics for the given multilabel insights key.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$MultilabelInsightsPairwiseStatisticsList(
  statisticType,
  multilabelInsightsKey,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statisticType}}{Enum < \link{jointProbability, correlation, conditionalProbability} > Type of pairwise statistic.}

\item{\code{multilabelInsightsKey}}{character. Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve multilabel specific pairwise label statistics for the given multilabel insights key: correlation, joint probability and conditional probability.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Pairwise label statistics.
\itemize{
}
}
}

\subsection{Returns}{
\link{PairwiseStatisticsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statisticType <- 'statisticType_example' # character | Type of pairwise statistic.
multilabelInsightsKey <- 'multilabelInsightsKey_example' # character | Key for multilabel insights, unique per project, feature, and EDA stage. The most recent key can be retrieved via :http:get:`/api/v2/projects/(projectId)/features/` or :http:get:`/api/v2/projects/(projectId)/features/(featurename:featureName)/`

api.instance <- InsightsApi$new()
result <- api.instance$MultilabelInsightsPairwiseStatisticsList(statisticType, multilabelInsightsKey)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsAnomalyAssessmentRecordsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsAnomalyAssessmentRecordsDelete}{}}}
\subsection{Method \code{ProjectsAnomalyAssessmentRecordsDelete()}}{
Delete the anomaly assessment record.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsAnomalyAssessmentRecordsDelete(projectId, recordId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{recordId}}{character. The anomaly assessment record ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the anomaly assessment record.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Anomaly assessment record deleted.
\itemize{
}
\item \strong{\code{404}} Data was not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
recordId <- 'recordId_example' # character | The anomaly assessment record ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsAnomalyAssessmentRecordsDelete(projectId, recordId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsAnomalyAssessmentRecordsExplanationsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsAnomalyAssessmentRecordsExplanationsList}{}}}
\subsection{Method \code{ProjectsAnomalyAssessmentRecordsExplanationsList()}}{
Retrieve anomaly assessment record.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsAnomalyAssessmentRecordsExplanationsList(
  projectId,
  recordId,
  startDate = NULL,
  endDate = NULL,
  pointsCount = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{recordId}}{character. The anomaly assessment record ID}

\item{\code{startDate}}{character. The start of the date range to return. Date should be in UTC format. For example: ``2019-08-01T00:00:00.000000Z``.}

\item{\code{endDate}}{character. The end of the date range to return, inclusive. Date should be in UTC format. For example: ``2020-01-01T00:00:00.000000Z``.}

\item{\code{pointsCount}}{integer. Count of points to return.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve anomaly assessment record. Two out of three parameters: `startDate`, `endDate` or `pointsCount` must be specified.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Anomaly assessment record.
\itemize{
}
\item \strong{\code{404}} Data was not found.
\itemize{
}
\item \strong{\code{422}} Insight is not available.
\itemize{
}
}
}

\subsection{Returns}{
\link{AnomalyAssessmentExplanationsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
recordId <- 'recordId_example' # character | The anomaly assessment record ID
startDate <- 'startDate_example' # character | The start of the date range to return. Date should be in UTC format. For example: ``2019-08-01T00:00:00.000000Z``.
endDate <- 'endDate_example' # character | The end of the date range to return, inclusive. Date should be in UTC format. For example: ``2020-01-01T00:00:00.000000Z``.
pointsCount <- 56 # integer | Count of points to return.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsAnomalyAssessmentRecordsExplanationsList(projectId, recordId, startDate=startDate, endDate=endDate, pointsCount=pointsCount)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsAnomalyAssessmentRecordsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsAnomalyAssessmentRecordsList}{}}}
\subsection{Method \code{ProjectsAnomalyAssessmentRecordsList()}}{
Retrieve anomaly assessment records.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsAnomalyAssessmentRecordsList(
  projectId,
  offset = 0,
  limit = 100,
  modelId = NULL,
  backtest = NULL,
  source = NULL,
  seriesId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{modelId}}{character. The model ID to filter records by.}

\item{\code{backtest}}{\link{OneOfintegerstring}. The backtest to filter records by.}

\item{\code{source}}{Enum < \link{training, validation} > The source of the data to filter records by.}

\item{\code{seriesId}}{character. Can be specified for multiseries projects. The series id to filter records by.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve anomaly assessment records.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve anomaly assessment records.
\itemize{
}
\item \strong{\code{404}} No data found
\itemize{
}
\item \strong{\code{422}} Input parameters are invalid
\itemize{
}
}
}

\subsection{Returns}{
\link{AnomalyAssessmentRecordsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
modelId <- 'modelId_example' # character | The model ID to filter records by.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | The backtest to filter records by.
source <- 'source_example' # character | The source of the data to filter records by.
seriesId <- 'seriesId_example' # character | Can be specified for multiseries projects. The series id to filter records by.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsAnomalyAssessmentRecordsList(projectId, offset=offset, limit=limit, modelId=modelId, backtest=backtest, source=source, seriesId=seriesId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsAnomalyAssessmentRecordsPredictionsPreviewList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsAnomalyAssessmentRecordsPredictionsPreviewList}{}}}
\subsection{Method \code{ProjectsAnomalyAssessmentRecordsPredictionsPreviewList()}}{
Retrieve predictions preview for the anomaly assessment record.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsAnomalyAssessmentRecordsPredictionsPreviewList(
  projectId,
  recordId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{recordId}}{character. The anomaly assessment record ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve predictions preview for the anomaly assessment record.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Predictions preview for the anomaly assessment record.
\itemize{
}
\item \strong{\code{404}} Record not found.
\itemize{
}
\item \strong{\code{422}} Predictions preview is not available.
\itemize{
}
}
}

\subsection{Returns}{
\link{AnomalyAssessmentPreviewResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
recordId <- 'recordId_example' # character | The anomaly assessment record ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsAnomalyAssessmentRecordsPredictionsPreviewList(projectId, recordId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsBiasVsAccuracyInsightsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsBiasVsAccuracyInsightsList}{}}}
\subsection{Method \code{ProjectsBiasVsAccuracyInsightsList()}}{
List Bias vs Accuracy insights.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsBiasVsAccuracyInsightsList(
  projectId,
  accuracyMetric = NULL,
  protectedFeature = NULL,
  fairnessMetric = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{accuracyMetric}}{Enum < \link{AUC, Weighted AUC, Area Under PR Curve, Weighted Area Under PR Curve, Kolmogorov-Smirnov, Weighted Kolmogorov-Smirnov, Ians Metric, FVE Binomial, Weighted FVE Binomial, Gini, Weighted Gini, Gini Norm, Weighted Gini Norm, LogLoss, Weighted LogLoss, LogLossSig, Weighted LogLossSig, Max MCC, Weighted Max MCC, Rate@Top5\%, Weighted Rate@Top5\%, Rate@Top10\%, Weighted Rate@Top10\%, Rate@TopTenth\%, RMSE, Weighted RMSE} > The metric to return model accuracy scores. Defaults to the optimization metric configured in project options.}

\item{\code{protectedFeature}}{\link{OneOfstringarray}. Name of the protected feature.}

\item{\code{fairnessMetric}}{\link{OneOfstringarray}. The fairness metric used to calculate the fairness scores.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a list of Bias vs Accuracy insights for the model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns Bias vs Accuracy results.
\itemize{
}
}
}

\subsection{Returns}{
\link{BiasVsAccuracyInsightRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
accuracyMetric <- 'accuracyMetric_example' # character | The metric to return model accuracy scores. Defaults to the optimization metric configured in project options.
protectedFeature <- OneOfstringarray$new() # OneOfstringarray | Name of the protected feature.
fairnessMetric <- OneOfstringarray$new() # OneOfstringarray | The fairness metric used to calculate the fairness scores.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsBiasVsAccuracyInsightsList(projectId, accuracyMetric=accuracyMetric, protectedFeature=protectedFeature, fairnessMetric=fairnessMetric)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsAccuracyOverTimePlotsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsAccuracyOverTimePlotsList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsAccuracyOverTimePlotsList()}}{
Retrieve the data for the Accuracy over Time plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsList(
  projectId,
  modelId,
  seriesId = NULL,
  backtest = NULL,
  source = "validation",
  forecastDistance = NULL,
  resolution = NULL,
  maxBinSize = 500,
  startDate = NULL,
  endDate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.}

\item{\code{backtest}}{\link{OneOfintegerstring}. Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.}

\item{\code{source}}{Enum < \link{training, validation} > The source of the data for the backtest/holdout.}

\item{\code{forecastDistance}}{integer. Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.}

\item{\code{resolution}}{Enum < \link{milliseconds, seconds, minutes, hours, days, weeks, months, quarters, years} > Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`}

\item{\code{maxBinSize}}{integer. Specifies the maximum number of bins for the retrieval.}

\item{\code{startDate}}{character. The start of the date range to return. If not specified, start date for requested plots will be used.}

\item{\code{endDate}}{character. The end of the date range to return. If not specified, end date for requested plots will be used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the data for the Accuracy over Time plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Accuracy over Time plots data
\itemize{
}
\item \strong{\code{404}} Accuracy over Time plots data was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{AccuracyOverTimePlotsDataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
forecastDistance <- 56 # integer | Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.
resolution <- 'resolution_example' # character | Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`
maxBinSize <- 500 # integer | Specifies the maximum number of bins for the retrieval.
startDate <- 'startDate_example' # character | The start of the date range to return. If not specified, start date for requested plots will be used.
endDate <- 'endDate_example' # character | The end of the date range to return. If not specified, end date for requested plots will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAccuracyOverTimePlotsList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, forecastDistance=forecastDistance, resolution=resolution, maxBinSize=maxBinSize, startDate=startDate, endDate=endDate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList()}}{
Retrieve the metadata for the Accuracy over Time plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList(
  projectId,
  modelId,
  forecastDistance = NULL,
  seriesId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{forecastDistance}}{integer. Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the metadata for the Accuracy over Time plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Accuracy over Time plots metadata
\itemize{
}
\item \strong{\code{404}} Accuracy over Time plots metadata was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{AccuracyOverTimePlotsMetadataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
forecastDistance <- 56 # integer | Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAccuracyOverTimePlotsMetadataList(projectId, modelId, forecastDistance=forecastDistance, seriesId=seriesId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList()}}{
Retrieve the preview for the Accuracy over Time plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList(
  projectId,
  modelId,
  seriesId = NULL,
  backtest = NULL,
  source = "validation",
  forecastDistance = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.}

\item{\code{backtest}}{\link{OneOfintegerstring}. Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.}

\item{\code{source}}{Enum < \link{training, validation} > The source of the data for the backtest/holdout.}

\item{\code{forecastDistance}}{integer. Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the preview for the Accuracy over Time plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Accuracy over Time plots preview
\itemize{
}
\item \strong{\code{404}} Accuracy over Time plots preview was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{DatetimeTrendPlotsPreviewResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
forecastDistance <- 56 # integer | Forecast distance to retrieve the data for. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAccuracyOverTimePlotsPreviewList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, forecastDistance=forecastDistance)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsAnomalyOverTimePlotsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsAnomalyOverTimePlotsList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsAnomalyOverTimePlotsList()}}{
Retrieve the data for the Anomaly over Time plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsList(
  projectId,
  modelId,
  seriesId = NULL,
  backtest = NULL,
  source = "validation",
  resolution = NULL,
  maxBinSize = 500,
  startDate = NULL,
  endDate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.}

\item{\code{backtest}}{\link{OneOfintegerstring}. Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.}

\item{\code{source}}{Enum < \link{training, validation} > The source of the data for the backtest/holdout.}

\item{\code{resolution}}{Enum < \link{milliseconds, seconds, minutes, hours, days, weeks, months, quarters, years} > Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`}

\item{\code{maxBinSize}}{integer. Specifies the maximum number of bins for the retrieval.}

\item{\code{startDate}}{character. The start of the date range to return. If not specified, start date for requested plots will be used.}

\item{\code{endDate}}{character. The end of the date range to return. If not specified, end date for requested plots will be used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the data for the Anomaly over Time plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Anomaly over Time plots data
\itemize{
}
\item \strong{\code{404}} Anomaly over Time plots data was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{AnomalyOverTimePlotsDataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
resolution <- 'resolution_example' # character | Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`
maxBinSize <- 500 # integer | Specifies the maximum number of bins for the retrieval.
startDate <- 'startDate_example' # character | The start of the date range to return. If not specified, start date for requested plots will be used.
endDate <- 'endDate_example' # character | The end of the date range to return. If not specified, end date for requested plots will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAnomalyOverTimePlotsList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, resolution=resolution, maxBinSize=maxBinSize, startDate=startDate, endDate=endDate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList()}}{
Retrieve the metadata for the Anomaly over Time plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList(
  projectId,
  modelId,
  seriesId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the metadata for the Anomaly over Time plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Anomaly over Time plots metadata
\itemize{
}
\item \strong{\code{404}} Anomaly over Time plots metadata was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{AnomalyOverTimePlotsMetadataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAnomalyOverTimePlotsMetadataList(projectId, modelId, seriesId=seriesId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList()}}{
Retrieve the preview for the Anomaly over Time plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList(
  projectId,
  modelId,
  seriesId = NULL,
  backtest = NULL,
  source = "validation",
  predictionThreshold = 0.5,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.}

\item{\code{backtest}}{\link{OneOfintegerstring}. Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.}

\item{\code{source}}{Enum < \link{training, validation} > The source of the data for the backtest/holdout.}

\item{\code{predictionThreshold}}{numeric. Only bins with predictions exceeding this threshold will be returned in the response.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the preview for the Anomaly over Time plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Anomaly over Time plots preview
\itemize{
}
\item \strong{\code{404}} Anomaly over Time plots preview was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{AnomalyOverTimePlotsPreviewResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
predictionThreshold <- 0.5 # numeric | Only bins with predictions exceeding this threshold will be returned in the response.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsAnomalyOverTimePlotsPreviewList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, predictionThreshold=predictionThreshold)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsBacktestStabilityPlotList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsBacktestStabilityPlotList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsBacktestStabilityPlotList()}}{
Retrieve a plot displaying the stability of the datetime model across different backtests.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsBacktestStabilityPlotList(
  projectId,
  modelId,
  metricName = NULL,
  forecastDistance = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{metricName}}{character. The name of the metric to retrieve the scores for. If omitted, the default project metric will be used}

\item{\code{forecastDistance}}{integer. The forecast distance to retrieve the plot for. If not specified, the scores for each partition are aggregated across all forecast distances. This parameter is only available for time series models.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a plot displaying the stability of the datetime model across different backtests.  All durations and datetimes should be specified in accordance with the :ref:`timestamp and duration formatting rules<time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Backtest stability plot data for datetime partitioned model.
\itemize{
}
\item \strong{\code{422}} Backtest stability plot data not available.
\itemize{
}
}
}

\subsection{Returns}{
\link{BacktestStabilityPlotResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
metricName <- 'metricName_example' # character | The name of the metric to retrieve the scores for. If omitted, the default project metric will be used
forecastDistance <- 56 # integer | The forecast distance to retrieve the plot for. If not specified, the scores for each partition are aggregated across all forecast distances. This parameter is only available for time series models.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsBacktestStabilityPlotList(projectId, modelId, metricName=metricName, forecastDistance=forecastDistance)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList()}}{
Retrieve the metadata of the Accuracy Over Time (AOT) chart for an external dataset.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList(
  projectId,
  modelId,
  datasetId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project id which was used to compute the AOT chart.}

\item{\code{modelId}}{character. The model id which was used to compute the AOT chart.}

\item{\code{datasetId}}{character. The dataset id which was used to compute the AOT chart.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the metadata of the Accuracy Over Time (AOT) chart for an external dataset. Datetimes are specified in accordance with :ref:`timestamp and duration formatting rules <time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Metadata of the Accuracy Over Time (AOT) chart for an external dataset.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{AOTChartMetadataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id which was used to compute the AOT chart.
modelId <- 'modelId_example' # character | The model id which was used to compute the AOT chart.
datasetId <- 'datasetId_example' # character | The dataset id which was used to compute the AOT chart.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsMetadataList(projectId, modelId, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList()}}{
Retrieve a preview of the Accuracy Over Time (AOT) chart for an external dataset.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList(
  projectId,
  modelId,
  datasetId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project id which was used to compute the AOT chart.}

\item{\code{modelId}}{character. The model id which was used to compute the AOT chart.}

\item{\code{datasetId}}{character. The dataset id which was used to compute the AOT chart.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a preview of the Accuracy Over Time (AOT) chart for an external dataset. Datetimes are specified in accordance with :ref:`timestamp and duration formatting rules <time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Preview of the Accuracy Over Time (AOT) chart for an external dataset.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{AOTChartPreviewResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id which was used to compute the AOT chart.
modelId <- 'modelId_example' # character | The model id which was used to compute the AOT chart.
datasetId <- 'datasetId_example' # character | The dataset id which was used to compute the AOT chart.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsPreviewList(projectId, modelId, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve}{}}}
\subsection{Method \code{ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve()}}{
Retrieve the Accuracy Over Time (AOT) chart data for an external dataset for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve(
  projectId,
  modelId,
  datasetId,
  maxBinSize = 500,
  startDate = NULL,
  endDate = NULL,
  resolution = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project id which was used to compute the AOT chart.}

\item{\code{modelId}}{character. The model id which was used to compute the AOT chart.}

\item{\code{datasetId}}{character. The dataset id which was used to compute the AOT chart.}

\item{\code{maxBinSize}}{integer. The limit of returned bins.}

\item{\code{startDate}}{character. The start of the date range to return (UTC string), for example: '2010-05-13T00:00:00.000000Z'. If not specified, the start date for this model and source of the data will be used instead.}

\item{\code{endDate}}{character. The end of the date range to return (UTC string), for example: '2010-05-13T00:00:00.000000Z'. If not specified, the end date for this model and source of the data will be used instead.}

\item{\code{resolution}}{Enum < \link{microseconds, milliseconds, seconds, minutes, hours, days, weeks, months, quarters, years} > Specifies at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data such that bins <= `maxBinSize`.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the Accuracy Over Time (AOT) chart data for an external dataset for a project. Datetimes are specified in accordance with :ref:`timestamp and duration formatting rules <time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Accuracy Over Time (AOT) chart data for an external dataset for a project.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{AOTChartRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id which was used to compute the AOT chart.
modelId <- 'modelId_example' # character | The model id which was used to compute the AOT chart.
datasetId <- 'datasetId_example' # character | The dataset id which was used to compute the AOT chart.
maxBinSize <- 500 # integer | The limit of returned bins.
startDate <- 'startDate_example' # character | The start of the date range to return (UTC string), for example: '2010-05-13T00:00:00.000000Z'. If not specified, the start date for this model and source of the data will be used instead.
endDate <- 'endDate_example' # character | The end of the date range to return (UTC string), for example: '2010-05-13T00:00:00.000000Z'. If not specified, the end date for this model and source of the data will be used instead.
resolution <- 'resolution_example' # character | Specifies at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data such that bins <= `maxBinSize`.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsDatasetAccuracyOverTimePlotsRetrieve(projectId, modelId, datasetId, maxBinSize=maxBinSize, startDate=startDate, endDate=endDate, resolution=resolution)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsDatetimeTrendPlotsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsDatetimeTrendPlotsCreate}{}}}
\subsection{Method \code{ProjectsDatetimeModelsDatetimeTrendPlotsCreate()}}{
Computes Datetime Trend plots for time series and OTV projects.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsDatetimeTrendPlotsCreate(
  projectId,
  modelId,
  datetimeTrendPlotsCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{datetimeTrendPlotsCreate}}{\link{DatetimeTrendPlotsCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Computes Datetime Trend plots for time series and OTV projects: * For OTV projects, computes Accuracy over Time plots. * For time series supervised projects, computes both Accuracy over Time plots and Forecast vs Actual plots. .. minversion:: v2.25    * For unsupervised time series and OTV models, computes Anomaly Over Time plots. .. note::    For the multiseries time series projects only first 1000 series in alphabetical order    and an average plot for them will be computed. .. note::    Maximum 100 forecast distances can be requested for calculation in time series supervised projects.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Datetime Trend plots computation job submitted successfully.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{422}} There were invalid parameters in the submitted request. See the `message` field for more details.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatetimeTrendPlotsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
datetimeTrendPlotsCreate <- DatetimeTrendPlotsCreate$new() # DatetimeTrendPlotsCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsDatetimeTrendPlotsCreate(projectId, modelId, datetimeTrendPlotsCreate=datetimeTrendPlotsCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsFeatureEffectsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsFeatureEffectsCreate}{}}}
\subsection{Method \code{ProjectsDatetimeModelsFeatureEffectsCreate()}}{
Add a request to the queue to calculate Feature Effects for a backtest.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsFeatureEffectsCreate(
  projectId,
  modelId,
  featureEffectsCreateDatetime = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{featureEffectsCreateDatetime}}{\link{FeatureEffectsCreateDatetime}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add a request to the queue to calculate Feature Effects for a backtest. If the job has been previously submitted, the request fails, returning the `jobId` of the previously submitted job. Use this `jobId` to check status of the previously submitted job.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The Feature Effects request for a backtest has been successfully submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{403}} User does not have permission to view or submit jobs for the project.
\itemize{
}
\item \strong{\code{404}} Provided project, model, or backtest index does not exist.
\itemize{
}
\item \strong{\code{422}} Queue submission error.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
featureEffectsCreateDatetime <- FeatureEffectsCreateDatetime$new() # FeatureEffectsCreateDatetime |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureEffectsCreate(projectId, modelId, featureEffectsCreateDatetime=featureEffectsCreateDatetime)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsFeatureEffectsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsFeatureEffectsList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsFeatureEffectsList()}}{
Retrieve Feature Effects for a model backtest.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsFeatureEffectsList(
  backtestIndex,
  projectId,
  modelId,
  source = "training",
  includeIcePlots = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{backtestIndex}}{character. The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{training, validation, holdout} > Models data source.}

\item{\code{includeIcePlots}}{Enum < \link{false, False, true, True} > Indicates whether Individual Conditional Expectation (ICE) plots should be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Feature Effects for a model backtest. Feature Effects provides partial dependence and predicted vs actual values for the top 500 features, ordered by feature impact score. The partial dependence shows marginal effect of a feature on the target variable after accounting for the average effects of all other predictive features. It indicates how, holding all other variables except the feature of interest as they were, the value of this feature affects your prediction. If a Feature Effects job was previously submitted for a given backtest, this endpoint will return a response structured as {\"message\": <message>, \"jobId\": <jobId>} where `jobId` is the ID of the job. Retrieve the job with :http:get:`/api/v2/projects/(projectId)/jobs/(jobId)/`


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project, model, source, backtest index, or computation results do not exist.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureEffectsDatetimeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
backtestIndex <- 'backtestIndex_example' # character | The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureEffectsList(backtestIndex, projectId, modelId, source=source, includeIcePlots=includeIcePlots)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsFeatureEffectsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsFeatureEffectsMetadataList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsFeatureEffectsMetadataList()}}{
Retrieve Feature Effects metadata for each backtest. Response contains status and available sources for each backtest of the model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsFeatureEffectsMetadataList(
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Feature Effects metadata for each backtest. Response contains status and available sources for each backtest of the model. One of the provided `backtestIndex` indexes used for submitting the compute request and retrieving Feature Effects. * Start/stop models contain a single `backtestIndex` response value of `startstop`. * Other models contain `backtestIndex` of `0`, `1`, ..., `holdout`. One of the provided `source` parameters used for retrieving Feature Effects. * Each backtest source can be, at a minimum, `training` or `validation`. If holdout is configured for the project, `backtestIndex` also includes `holdout` with sources `training` and `holdout`. * Source value of `training` is always available. (versions prior to v2.17 support `validation` only) * When a start/stop model is trained into `validation` or `holdout` without stacked predictions (i.e., no out-of-sample predictions in `validation` or `holdout`), `validation` and `holdout` sources are not available. * Source `holdout` is not available when there is no holdout configured for the project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project or model does not exist.
\itemize{
}
\item \strong{\code{422}} The model is not datetime partitioned.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelXrayMetadataDatetimeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureEffectsMetadataList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsFeatureFitCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsFeatureFitCreate}{}}}
\subsection{Method \code{ProjectsDatetimeModelsFeatureFitCreate()}}{
Add a request to the queue to calculate Feature Fit for a backtest.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsFeatureFitCreate(
  projectId,
  modelId,
  modelXrayCreateDatetime = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{modelXrayCreateDatetime}}{\link{ModelXrayCreateDatetime}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
NOTE: Starting from API v2.29 this endpoint will be deprecated. Add a request to the queue to calculate Feature Fit for a backtest. If the job has been previously submitted, the request fails, returning the `jobId` of the previously submitted job. Use this `jobId` to check status of the previously submitted job.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The Feature Fit request for a backtest has been successfully submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{403}} User does not have permission to view or submit jobs for the project.
\itemize{
}
\item \strong{\code{404}} Provided project, model, or backtest index does not exist.
\itemize{
}
\item \strong{\code{422}} Queue submission error.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
modelXrayCreateDatetime <- ModelXrayCreateDatetime$new() # ModelXrayCreateDatetime |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureFitCreate(projectId, modelId, modelXrayCreateDatetime=modelXrayCreateDatetime)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsFeatureFitList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsFeatureFitList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsFeatureFitList()}}{
Retrieve Feature Fit for a model backtest.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsFeatureFitList(
  backtestIndex,
  projectId,
  modelId,
  source = "training",
  includeIcePlots = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{backtestIndex}}{character. The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{training, validation, holdout} > Models data source.}

\item{\code{includeIcePlots}}{Enum < \link{false, False, true, True} > Indicates whether Individual Conditional Expectation (ICE) plots should be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
NOTE: Starting from API v2.29 this endpoint will be deprecated. Retrieve Feature Fit for a model backtest. Feature Fit provides partial dependence and predicted vs actual values for the top 500 features, ordered by feature importance score. The partial dependence shows marginal effect of a feature on the target variable after accounting for the average effects of all other predictive features. It indicates how, holding all other variables except the feature of interest as they were, the value of this feature affects your prediction. If a Feature Fit job was previously submitted for a given backtest, this endpoint will return a response structured as {\"message\": <message>, \"jobId\": <jobId>} where jobId is the ID of the job. Retrieve the job with :http:get:`/api/v2/projects/(projectId)/jobs/(jobId)/`


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project, model, source, backtest index, or computation results do not exist.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureFitDatetimeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
backtestIndex <- 'backtestIndex_example' # character | The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureFitList(backtestIndex, projectId, modelId, source=source, includeIcePlots=includeIcePlots)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsFeatureFitMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsFeatureFitMetadataList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsFeatureFitMetadataList()}}{
Retrieve Feature Fit metadata for each backtest. Response contains status and available sources for each backtest of the model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsFeatureFitMetadataList(
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
NOTE: Starting from API v2.29 this endpoint will be deprecated. Retrieve Feature Fit metadata for each backtest. Response contains status and available sources for each backtest of the model. One of the provided `backtestIndex` indexes used for submitting the compute request and retrieving Feature Fit. * Start/stop models contain a single `backtestIndex` response value of `startstop`. * Other models contain `backtestIndex` of `0`, `1`, ..., `holdout`. One of the provided `source` parameters used for retrieving Feature Fit. * Each backtest source can be, at a minimum, `training` or `validation`. If holdout is configured for the project, `backtestIndex` also includes `holdout` with sources `training` and `holdout`. * Source value of `training` is always available. (versions prior to v2.17 support `validation` only) * When a start/stop model is trained into `validation` or `holdout` without stacked predictions (i.e., no out-of-sample predictions in `validation` or `holdout`), `validation` and `holdout` sources are not available. * Source `holdout` is not available when there is no holdout configured for the project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project or model does not exist.
\itemize{
}
\item \strong{\code{422}} The model is not datetime partitioned.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelXrayMetadataDatetimeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsFeatureFitMetadataList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsForecastDistanceStabilityPlotList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsForecastDistanceStabilityPlotList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsForecastDistanceStabilityPlotList()}}{
Retrieve a plot displaying the stability of the time series model across different forecast distances.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsForecastDistanceStabilityPlotList(
  projectId,
  modelId,
  metricName = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{metricName}}{character. The name of the metric to retrieve the scores for. If omitted, the default project metric will be used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a plot displaying the stability of the time series model across different forecast distances. .. note::    All durations and datetimes are specified in accordance with the   :ref:`timestamp and duration formatting rules <time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Forecast distance stability plot for datetime partitioned model.
\itemize{
}
\item \strong{\code{422}} There was an error while retrieving the plot.
\itemize{
}
}
}

\subsection{Returns}{
\link{ForecastDistanceStabilityPlotResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
metricName <- 'metricName_example' # character | The name of the metric to retrieve the scores for. If omitted, the default project metric will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsForecastDistanceStabilityPlotList(projectId, modelId, metricName=metricName)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsForecastVsActualPlotsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsForecastVsActualPlotsList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsForecastVsActualPlotsList()}}{
Retrieve the data for the Forecast vs Actual plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsList(
  projectId,
  modelId,
  seriesId = NULL,
  backtest = NULL,
  source = "validation",
  resolution = NULL,
  forecastDistanceStart = NULL,
  forecastDistanceEnd = NULL,
  maxBinSize = 500,
  startDate = NULL,
  endDate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.}

\item{\code{backtest}}{\link{OneOfintegerstring}. Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.}

\item{\code{source}}{Enum < \link{training, validation} > The source of the data for the backtest/holdout.}

\item{\code{resolution}}{Enum < \link{milliseconds, seconds, minutes, hours, days, weeks, months, quarters, years} > Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`}

\item{\code{forecastDistanceStart}}{integer. The start of forecast distance range (forecast window) to retrieve. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.}

\item{\code{forecastDistanceEnd}}{integer. The end of forecast distance range (forecast window) to retrieve. If not specified, the last forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.}

\item{\code{maxBinSize}}{integer. Specifies the maximum number of bins for the retrieval.}

\item{\code{startDate}}{character. The start of the date range to return. If not specified, start date for requested plots will be used.}

\item{\code{endDate}}{character. The end of the date range to return. If not specified, end date for requested plots will be used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the data for the Forecast vs Actual plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Forecast vs Actual plots data
\itemize{
}
\item \strong{\code{404}} Forecast vs Actual plots data was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{ForecastVsActualPlotsDataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.
resolution <- 'resolution_example' # character | Specifying at which resolution the data should be binned. If not specified, optimal resolution will be used to build chart data with number of bins <= `maxBinSize`
forecastDistanceStart <- 56 # integer | The start of forecast distance range (forecast window) to retrieve. If not specified, the first forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.
forecastDistanceEnd <- 56 # integer | The end of forecast distance range (forecast window) to retrieve. If not specified, the last forecast distance for this project will be used. Forecast distance specifies the number of time steps between the predicted point and the origin point. Only available for time series supervised projects.
maxBinSize <- 500 # integer | Specifies the maximum number of bins for the retrieval.
startDate <- 'startDate_example' # character | The start of the date range to return. If not specified, start date for requested plots will be used.
endDate <- 'endDate_example' # character | The end of the date range to return. If not specified, end date for requested plots will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsForecastVsActualPlotsList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source, resolution=resolution, forecastDistanceStart=forecastDistanceStart, forecastDistanceEnd=forecastDistanceEnd, maxBinSize=maxBinSize, startDate=startDate, endDate=endDate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsForecastVsActualPlotsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsForecastVsActualPlotsMetadataList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsForecastVsActualPlotsMetadataList()}}{
Retrieve the metadata for the Forecast vs Actual plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsMetadataList(
  projectId,
  modelId,
  seriesId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the metadata for the Forecast vs Actual plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Forecast vs Actual plots metadata
\itemize{
}
\item \strong{\code{404}} Forecast vs Actual plots metadata was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{ForecastVsActualPlotsMetadataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided a metadata of average plot for the first 1000 series will be retrieved.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsForecastVsActualPlotsMetadataList(projectId, modelId, seriesId=seriesId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsForecastVsActualPlotsPreviewList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsForecastVsActualPlotsPreviewList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsForecastVsActualPlotsPreviewList()}}{
Retrieve the preview for the Forecast vs Actual plots.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsForecastVsActualPlotsPreviewList(
  projectId,
  modelId,
  seriesId = NULL,
  backtest = NULL,
  source = "validation",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesId}}{character. The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.}

\item{\code{backtest}}{\link{OneOfintegerstring}. Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.}

\item{\code{source}}{Enum < \link{training, validation} > The source of the data for the backtest/holdout.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the preview for the Forecast vs Actual plots.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Forecast vs Actual plots preview
\itemize{
}
\item \strong{\code{404}} Forecast vs Actual plots preview was not found
\itemize{
}
\item \strong{\code{422}} Invalid parameters were submitted
\itemize{
}
}
}

\subsection{Returns}{
\link{DatetimeTrendPlotsPreviewResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve. Only available for time series multiseries projects. If not provided an average plot for the first 1000 series will be retrieved.
backtest <- OneOfintegerstring$new() # OneOfintegerstring | Retrieve plots for a specific backtest (use the backtest index starting from zero) or `holdout`. If not specified the first backtest (backtest index 0) will be used.
source <- "validation" # character | The source of the data for the backtest/holdout.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsForecastVsActualPlotsPreviewList(projectId, modelId, seriesId=seriesId, backtest=backtest, source=source)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsMulticlassFeatureEffectsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsMulticlassFeatureEffectsCreate}{}}}
\subsection{Method \code{ProjectsDatetimeModelsMulticlassFeatureEffectsCreate()}}{
Compute feature effects for a multiclass datetime model.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsMulticlassFeatureEffectsCreate(
  projectId,
  modelId,
  multiclassFeatureEffectDatetimeCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{multiclassFeatureEffectDatetimeCreate}}{\link{MulticlassFeatureEffectDatetimeCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Compute feature effects for a multiclass datetime model. If the job has been previously submitted, the request fails, returning the ``jobId`` of the previously submitted job. Use this ``jobId`` to check status of the previously submitted job. NOTE: feature effects are computed for top 100 classes.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The Feature Effects request has been successfully submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{403}} User does not have permission to view or submit jobs for the project.
\itemize{
}
\item \strong{\code{404}} Project, model, source or computation results do not exist.
\itemize{
}
\item \strong{\code{422}} Queue submission error. If the ``rowCount`` exceeds the maximum or minimum value for this dataset. Minimum is 10 rows. Maximum is 100000 rows or the training sample size of the model, whichever is less. If invalid class names are provided in ``classes``.If neither ``features`` nor ``topNFeatures`` is provided. If invalid ``backtestIndex`` is provided.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
multiclassFeatureEffectDatetimeCreate <- MulticlassFeatureEffectDatetimeCreate$new() # MulticlassFeatureEffectDatetimeCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMulticlassFeatureEffectsCreate(projectId, modelId, multiclassFeatureEffectDatetimeCreate=multiclassFeatureEffectDatetimeCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsMulticlassFeatureEffectsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsMulticlassFeatureEffectsList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsMulticlassFeatureEffectsList()}}{
Retrieve feature effects for each class in a multiclass datetime model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsMulticlassFeatureEffectsList(
  backtestIndex,
  projectId,
  modelId,
  source = "training",
  includeIcePlots = NULL,
  offset = 0,
  limit = 100,
  class = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{backtestIndex}}{character. The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{training, validation, holdout} > Models data source.}

\item{\code{includeIcePlots}}{Enum < \link{false, False, true, True} > Indicates whether Individual Conditional Expectation (ICE) plots should be returned.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{class}}{character. Target class label.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve feature effects for each class in a multiclass datetime model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project, model, source or computation results do not exist.
\itemize{
}
}
}

\subsection{Returns}{
\link{MulticlassDatetimeFeatureEffectsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
backtestIndex <- 'backtestIndex_example' # character | The backtest index. For example: `0`, `1`, ..., `20`, `holdout`, `startstop`.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
class <- 'class_example' # character | Target class label.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMulticlassFeatureEffectsList(backtestIndex, projectId, modelId, source=source, includeIcePlots=includeIcePlots, offset=offset, limit=limit, class=class)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsMultiseriesHistogramsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsMultiseriesHistogramsList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsMultiseriesHistogramsList()}}{
Retrieve the histograms for series insights.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsMultiseriesHistogramsList(
  attribute,
  bins,
  projectId,
  modelId,
  metric = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{attribute}}{Enum < \link{rowCount, duration, startDate, endDate, targetAverage, validationScore, backtestingScore, holdoutScore} > The series attribute to build a histogram for.}

\item{\code{bins}}{Enum < \link{10, 20, 50} > The number of bins in a histogram. Can be 10, 20 or 50. The default is 10.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{metric}}{character. The name of the metric to retrieve the histogram for attributes \"validationScore\", \"backtestingScore\", and\"holdoutScore\". If omitted, the default project metric will be used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the histograms for series insights.  Histogram is computed only for first 1000 series (ordered by name).


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve the histograms for series insights in form of an array of histogram bins.
\itemize{
}
\item \strong{\code{403}} User does not have permissions to manage models.
\itemize{
}
\item \strong{\code{404}} Model with specified `modelId` doesn't exist, or user does not have access to the project.
\itemize{
}
\item \strong{\code{422}} Metric provided to query is not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{MultiseriesHistogramsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
attribute <- "rowCount" # character | The series attribute to build a histogram for.
bins <- "10" # character | The number of bins in a histogram. Can be 10, 20 or 50. The default is 10.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
metric <- 'metric_example' # character | The name of the metric to retrieve the histogram for attributes \"validationScore\", \"backtestingScore\", and\"holdoutScore\". If omitted, the default project metric will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMultiseriesHistogramsList(attribute, bins, projectId, modelId, metric=metric)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsMultiseriesScoresCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsMultiseriesScoresCreate}{}}}
\subsection{Method \code{ProjectsDatetimeModelsMultiseriesScoresCreate()}}{
Request the computation of per-series scores for a multiseries model.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsMultiseriesScoresCreate(
  projectId,
  modelId,
  seriesAccuracyCompute = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{seriesAccuracyCompute}}{\link{SeriesAccuracyCompute}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Request the computation of per-series scores for a multiseries model. .. note::    Computation uses available partitions only. This endpoint will not compute backtesting   scores if no backtesting scores exist prior to this request.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Multiseries score computation has been successfully requested.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
seriesAccuracyCompute <- SeriesAccuracyCompute$new() # SeriesAccuracyCompute |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMultiseriesScoresCreate(projectId, modelId, seriesAccuracyCompute=seriesAccuracyCompute)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsMultiseriesScoresFileList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsMultiseriesScoresFileList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsMultiseriesScoresFileList()}}{
Retrieve the CSV file for the series accuracy.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsMultiseriesScoresFileList(
  projectId,
  modelId,
  multiseriesValue = NULL,
  metric = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{multiseriesValue}}{character. If specified, only the series containing the given value in one of the series ID columns will be returned.}

\item{\code{metric}}{character. The name of the metric to retrieve the scores for. If omitted, the default project metric will be used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the CSV file for the series accuracy.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The response will contain a file containing the series accuracy data in csv format.
\itemize{
\item \strong{\code{ContentMinusDisposition}} Contains an auto generated filename for this download (\"attachment;filename=Series accuracy (model:<lid>) (<metric>).csv\").
\item \strong{\code{ContentMinusType}} MIME type of the returned data
}
\item \strong{\code{403}} User does not have permissions to manage models.
\itemize{
}
\item \strong{\code{404}} Model with specified `modelId` doesn't exist, or user does not have access to the project.
\itemize{
}
\item \strong{\code{422}} Metric provided to query is not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
multiseriesValue <- 'multiseriesValue_example' # character | If specified, only the series containing the given value in one of the series ID columns will be returned.
metric <- 'metric_example' # character | The name of the metric to retrieve the scores for. If omitted, the default project metric will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMultiseriesScoresFileList(projectId, modelId, multiseriesValue=multiseriesValue, metric=metric)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimeModelsMultiseriesScoresList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimeModelsMultiseriesScoresList}{}}}
\subsection{Method \code{ProjectsDatetimeModelsMultiseriesScoresList()}}{
List the scores per individual series for the specified multiseries model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsDatetimeModelsMultiseriesScoresList(
  offset,
  limit,
  projectId,
  modelId,
  multiseriesValue = NULL,
  metric = NULL,
  orderBy = NULL,
  filterBy = NULL,
  numberOfBins = NULL,
  filterByBins = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of results to skip. Defaults to 0 if not specified.}

\item{\code{limit}}{integer. The maximum number of results to return. Defaults to 100 if not specified.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{multiseriesValue}}{character. Only the series containing the given value in one of the series ID columns will be returned if specified.}

\item{\code{metric}}{character. The name of the metric to retrieve the scores for.If omitted, the default project metric will be used.}

\item{\code{orderBy}}{Enum < \link{multiseriesValue, -multiseriesValue, rowCount, -rowCount, startDate, -startDate, endDate, -endDate, targetAverage, -targetAverage, validationScore, -validationScore, backtestingScore, -backtestingScore, holdoutScore, -holdoutScore} > Used for sorting the series. Supported attributes for ordering include: \"multiseriesValue\", \"rowCount\", \"validationScore\", \"holdoutScore\"  and \"backtestingScore\", \"startDate\", \"endDate\", and \"targetAverage\".Prefix the attribute name with a dash to sort in descending order,e.g. `orderBy=-rowCount`. If multiple series with equal values of the ordering attributeexist, ties will be broken arbitrarily.}

\item{\code{filterBy}}{Enum < \link{rowCount, startDate, endDate, targetAverage, validationScore, backtestingScore, holdoutScore} > Used to specify on which attribute values to filter the series.Supported attributes for filtering include: \"rowCount\", \"startDate\", \"endDate\", \"targetAverage\", \"validationScore\", \"holdoutScore\", and \"backtestingScore\".`filterByBins` and `numberOfBins` are required if this parameter is used.}

\item{\code{numberOfBins}}{Enum < \link{10, 20, 50} > Used to specify the number of bins in the histogram on which to filter the series.Can be 10, 20 or 50.`filterBy` and `filterByBins` are required if this parameter is used.}

\item{\code{filterByBins}}{character. Used to specify the multiseries histogram bins on which to filter the series.`filterBy` and `numberOfBins` are required if this parameter is used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the scores per individual series for the specified multiseries model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve the accuracy scores for each series for the specified multiseries model.
\itemize{
}
\item \strong{\code{403}} User does not have permissions to manage models.
\itemize{
}
\item \strong{\code{404}} Model with specified `modelId` doesn't exist, or user does not have access to the project.
\itemize{
}
\item \strong{\code{422}} Metric provided to query is not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{SeriesAccuracyRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of results to skip. Defaults to 0 if not specified.
limit <- 100 # integer | The maximum number of results to return. Defaults to 100 if not specified.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
multiseriesValue <- 'multiseriesValue_example' # character | Only the series containing the given value in one of the series ID columns will be returned if specified.
metric <- 'metric_example' # character | The name of the metric to retrieve the scores for.If omitted, the default project metric will be used.
orderBy <- 'orderBy_example' # character | Used for sorting the series. Supported attributes for ordering include: \"multiseriesValue\", \"rowCount\", \"validationScore\", \"holdoutScore\"  and \"backtestingScore\", \"startDate\", \"endDate\", and \"targetAverage\".Prefix the attribute name with a dash to sort in descending order,e.g. `orderBy=-rowCount`. If multiple series with equal values of the ordering attributeexist, ties will be broken arbitrarily.
filterBy <- 'filterBy_example' # character | Used to specify on which attribute values to filter the series.Supported attributes for filtering include: \"rowCount\", \"startDate\", \"endDate\", \"targetAverage\", \"validationScore\", \"holdoutScore\", and \"backtestingScore\".`filterByBins` and `numberOfBins` are required if this parameter is used.
numberOfBins <- 'numberOfBins_example' # character | Used to specify the number of bins in the histogram on which to filter the series.Can be 10, 20 or 50.`filterBy` and `filterByBins` are required if this parameter is used.
filterByBins <- 'filterByBins_example' # character | Used to specify the multiseries histogram bins on which to filter the series.`filterBy` and `numberOfBins` are required if this parameter is used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsDatetimeModelsMultiseriesScoresList(offset, limit, projectId, modelId, multiseriesValue=multiseriesValue, metric=metric, orderBy=orderBy, filterBy=filterBy, numberOfBins=numberOfBins, filterByBins=filterByBins)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsExternalScoresCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsExternalScoresCreate}{}}}
\subsection{Method \code{ProjectsExternalScoresCreate()}}{
Compute model scores for external dataset.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsExternalScoresCreate(
  projectId,
  externalScoresCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{externalScoresCreate}}{\link{ExternalScoresCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Compute model scores for external dataset, first upload your dataset to the project, and then using the corresponding datasetId, compute scores against that dataset. Computing external scores and insights depends on computed prediction, predictions will be computed if they are not available for this dataset. In order to compute scores and insights, uploaded dataset should contain actual value column. This api is not available in time series projects.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}}
\itemize{
}
\item \strong{\code{422}} The project type does not support or modeling is not finished yet.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
externalScoresCreate <- ExternalScoresCreate$new() # ExternalScoresCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsExternalScoresCreate(projectId, externalScoresCreate=externalScoresCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsExternalScoresList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsExternalScoresList}{}}}
\subsection{Method \code{ProjectsExternalScoresList()}}{
List of scores on prediction datasets for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsExternalScoresList(
  projectId,
  offset = 0,
  limit = 100,
  datasetId = NULL,
  modelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{datasetId}}{character. If provided will return scores for dataset with matching datasetId.}

\item{\code{modelId}}{character. If provided will return scores for model with matching modelId.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of scores on prediction datasets for a project with filtering option by dataset or model or both of them. Prediction dataset may have scores if it contained a column with actual values and predictions were computed on this dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of scores on prediction datasets.
\itemize{
}
\item \strong{\code{404}} Project not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{ExternalScoresListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return scores for dataset with matching datasetId.
modelId <- 'modelId_example' # character | If provided will return scores for model with matching modelId.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsExternalScoresList(projectId, offset=offset, limit=limit, datasetId=datasetId, modelId=modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsFeatureAssociationFeaturelistsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsFeatureAssociationFeaturelistsList}{}}}
\subsection{Method \code{ProjectsFeatureAssociationFeaturelistsList()}}{
List all featurelists with feature association matrix availability flags for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsFeatureAssociationFeaturelistsList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all featurelists with feature association matrix availability flags for a project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List available Feature Association Matrix for a project.
\itemize{
}
\item \strong{\code{404}} Project not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureAssociationListControllerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeatureAssociationFeaturelistsList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsFeatureAssociationMatrixCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsFeatureAssociationMatrixCreate}{}}}
\subsection{Method \code{ProjectsFeatureAssociationMatrixCreate()}}{
Compute feature association matrix.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsFeatureAssociationMatrixCreate(
  projectId,
  featureAssociationCreatePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{featureAssociationCreatePayload}}{\link{FeatureAssociationCreatePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Compute feature association matrix for given featurelist.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}}
\itemize{
}
\item \strong{\code{404}} A project with `projectId` or a featurelist with `featurelistId` was not found.
\itemize{
}
\item \strong{\code{422}} The feature association matrix calculation is not supported for this project.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
featureAssociationCreatePayload <- FeatureAssociationCreatePayload$new() # FeatureAssociationCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeatureAssociationMatrixCreate(projectId, featureAssociationCreatePayload=featureAssociationCreatePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsFeatureAssociationMatrixDetailsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsFeatureAssociationMatrixDetailsList}{}}}
\subsection{Method \code{ProjectsFeatureAssociationMatrixDetailsList()}}{
Retrieval for feature association plotting between a pair of features.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsFeatureAssociationMatrixDetailsList(
  feature1,
  feature2,
  projectId,
  featurelistId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature1}}{character. The name of a feature.}

\item{\code{feature2}}{character. the name of another feature.}

\item{\code{projectId}}{character. The project ID}

\item{\code{featurelistId}}{character. the feature list to lookup FAM data for. By default, depending on the type of the project `Informative Features` or `Timeseries Informative Features` list will be used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieval for feature association plotting between a pair of features.         Projects created prior to v2.17 are not supported by this feature.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieval for feature association plotting between a pair of features.
\itemize{
}
\item \strong{\code{404}} Wrong query parameters specified or no such `projectId` exists.
\itemize{
}
\item \strong{\code{422}} This project does not support feature associations, (e.g. multilabel, multiseries, time series unsupervised projects.).
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureAssociationDetailsRetrieveControllerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
feature1 <- 'feature1_example' # character | The name of a feature.
feature2 <- 'feature2_example' # character | the name of another feature.
projectId <- 'projectId_example' # character | The project ID
featurelistId <- 'featurelistId_example' # character | the feature list to lookup FAM data for. By default, depending on the type of the project `Informative Features` or `Timeseries Informative Features` list will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeatureAssociationMatrixDetailsList(feature1, feature2, projectId, featurelistId=featurelistId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsFeatureAssociationMatrixList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsFeatureAssociationMatrixList}{}}}
\subsection{Method \code{ProjectsFeatureAssociationMatrixList()}}{
Retrieval for pairwise feature association statistics.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsFeatureAssociationMatrixList(
  type,
  metric,
  projectId,
  featurelistId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Enum < \link{association, correlation} > the type of dependence for the data. Must be either `association` or `correlation`. Since v2.19 this is optional and defaults to `association`.}

\item{\code{metric}}{Enum < \link{mutualInfo, cramersV, spearman, pearson, tau} > the name of a metric to get pairwise data for. Must be one of `mutualInfo`, `cramersV`, `spearman`, `pearson`, or `tau`. Since v2.19 this is optional and defaults to `mutualInfo`.}

\item{\code{projectId}}{character. The project ID}

\item{\code{featurelistId}}{character. the feature list to lookup FAM data for. By default, depending on the type of the project `Informative Features` or `Timeseries Informative Features` list will be used.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieval for pairwise feature association statistics.         Projects created prior to v2.17 are not supported by this feature.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve Feature Association Matrix for project.
\itemize{
}
\item \strong{\code{404}} Wrong query parameters specified or no such `projectId` exists.
\itemize{
}
\item \strong{\code{422}} The project does not support feature associations.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureAssociationRetrieveControllerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
type <- "association" # character | the type of dependence for the data. Must be either `association` or `correlation`. Since v2.19 this is optional and defaults to `association`.
metric <- "mutualInfo" # character | the name of a metric to get pairwise data for. Must be one of `mutualInfo`, `cramersV`, `spearman`, `pearson`, or `tau`. Since v2.19 this is optional and defaults to `mutualInfo`.
projectId <- 'projectId_example' # character | The project ID
featurelistId <- 'featurelistId_example' # character | the feature list to lookup FAM data for. By default, depending on the type of the project `Informative Features` or `Timeseries Informative Features` list will be used.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeatureAssociationMatrixList(type, metric, projectId, featurelistId=featurelistId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsFeaturesFrequentValuesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsFeaturesFrequentValuesList}{}}}
\subsection{Method \code{ProjectsFeaturesFrequentValuesList()}}{
Retrieve the frequent values information for a particular feature.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsFeaturesFrequentValuesList(projectId, featureName, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. project id}

\item{\code{featureName}}{character. name of the feature}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the frequent values information for a particular feature.         Only valid for numeric features.         This route returns information about the frequent values seen for a particular feature,         based on the EDA sample of the dataset. Up to 60 values will be returned,         and when more values are present, they will be bucketed into a level called \"==All Other==\"         at the end of the response.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve the frequent values information for a particular feature.
\itemize{
}
\item \strong{\code{404}} If the feature doesn't exist, or no such projectId exists
\itemize{
}
\item \strong{\code{422}} If the feature isn't numeric
\itemize{
}
}
}

\subsection{Returns}{
\link{FrequentValuesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | project id
featureName <- 'featureName_example' # character | name of the feature

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsFeaturesFrequentValuesList(projectId, featureName)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsGeometryFeaturePlotsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsGeometryFeaturePlotsCreate}{}}}
\subsection{Method \code{ProjectsGeometryFeaturePlotsCreate()}}{
Create a map of one location feature
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsGeometryFeaturePlotsCreate(
  projectId,
  geometryFeaturePLotCreatePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. Project Id. It is the project to select the location feature from.}

\item{\code{geometryFeaturePLotCreatePayload}}{\link{GeometryFeaturePLotCreatePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a map of one location feature


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Create a map of one location feature
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{422}} Unprocessed Entity
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project Id. It is the project to select the location feature from.
geometryFeaturePLotCreatePayload <- GeometryFeaturePLotCreatePayload$new() # GeometryFeaturePLotCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsGeometryFeaturePlotsCreate(projectId, geometryFeaturePLotCreatePayload=geometryFeaturePLotCreatePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsGeometryFeaturePlotsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsGeometryFeaturePlotsRetrieve}{}}}
\subsection{Method \code{ProjectsGeometryFeaturePlotsRetrieve()}}{
Retrieve a map of one location feature
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsGeometryFeaturePlotsRetrieve(projectId, featureName, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. Project Id. It is the project to select the feature from.}

\item{\code{featureName}}{character. Name of location feature to plot on map. Must be supplied in order to determine which plot to retrieve.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a map of one location feature


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve the map of one location feature
\itemize{
}
\item \strong{\code{404}} Map of feature not found
\itemize{
}
}
}

\subsection{Returns}{
\link{GeometryFeaturePlotRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project Id. It is the project to select the feature from.
featureName <- 'featureName_example' # character | Name of location feature to plot on map. Must be supplied in order to determine which plot to retrieve.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsGeometryFeaturePlotsRetrieve(projectId, featureName)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsImageActivationMapsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsImageActivationMapsList}{}}}
\subsection{Method \code{ProjectsImageActivationMapsList()}}{
List all Image Activation Maps for the project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsImageActivationMapsList(
  projectId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. The number of items to skip over.}

\item{\code{limit}}{integer. The number of items to return.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all Image Activation Maps for the project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Activation Maps
\itemize{
}
}
}

\subsection{Returns}{
\link{ActivationMapsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | The number of items to skip over.
limit <- 100 # integer | The number of items to return.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsImageActivationMapsList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsImageEmbeddingsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsImageEmbeddingsList}{}}}
\subsection{Method \code{ProjectsImageEmbeddingsList()}}{
List all Image Embeddings for the project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsImageEmbeddingsList(
  projectId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. The number of items to skip over.}

\item{\code{limit}}{integer. The number of items to return.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all Image Embeddings for the project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Embeddings
\itemize{
}
}
}

\subsection{Returns}{
\link{EmbeddingsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | The number of items to skip over.
limit <- 100 # integer | The number of items to return.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsImageEmbeddingsList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsAnomalyAssessmentInitializationCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsAnomalyAssessmentInitializationCreate}{}}}
\subsection{Method \code{ProjectsModelsAnomalyAssessmentInitializationCreate()}}{
Calculate the anomaly assessment insight.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsAnomalyAssessmentInitializationCreate(
  projectId,
  modelId,
  anomalyAssessmentInitialize = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{anomalyAssessmentInitialize}}{\link{AnomalyAssessmentInitialize}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Initialize the anomaly assessment insight and calculate Shapley explanations for the most anomalous points in the subset. The insight is available for anomaly detection models in time series unsupervised projects which also support calculation of Shapley values.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
anomalyAssessmentInitialize <- AnomalyAssessmentInitialize$new() # AnomalyAssessmentInitialize |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsAnomalyAssessmentInitializationCreate(projectId, modelId, anomalyAssessmentInitialize=anomalyAssessmentInitialize)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsAnomalyInsightsFileList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsAnomalyInsightsFileList}{}}}
\subsection{Method \code{ProjectsModelsAnomalyInsightsFileList()}}{
Retrieve a CSV file of the raw data displayed with the anomaly score from the model.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsAnomalyInsightsFileList(
  projectId,
  modelId,
  filename = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{filename}}{character. name of the file to generate and return}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a CSV file of the raw data displayed with the anomaly score from the specific model. The number of rows included will be set by the expected outlier fraction but up to a maximum of 1000 rows. Only models built from anomaly detection blueprints have those insights.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve a CSV file of the raw data displayed with the anomaly score from the model.
\itemize{
}
\item \strong{\code{404}} project Id / model Id does not exist or model doesn't have anomaly insights table.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
filename <- 'filename_example' # character | name of the file to generate and return

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsAnomalyInsightsFileList(projectId, modelId, filename=filename)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsAnomalyInsightsTableList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsAnomalyInsightsTableList}{}}}
\subsection{Method \code{ProjectsModelsAnomalyInsightsTableList()}}{
Retrieve a table of the raw data displayed with the anomaly score from the specific model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsAnomalyInsightsTableList(
  projectId,
  modelId,
  anomalyScoreRounding = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{anomalyScoreRounding}}{integer. number of decimals each element anomalyScore column will be rounded to.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a table of the raw data displayed with the anomaly score from the specific model. The number of rows displayed is limited to 100 rows by the ANOMALY_INSIGHT_SAMPLE_ROW_COUNT configuration setting. Additionally, feature column count and the size of data in text fields is also limited. Only models built from anomaly detection blueprints have those insights.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve a table of the raw data displayed with the anomaly score from the specific model.
\itemize{
}
\item \strong{\code{404}} The model doesn't have anomaly insights table.
\itemize{
}
}
}

\subsection{Returns}{
\link{AnomalyInsightTableRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
anomalyScoreRounding <- 56 # integer | number of decimals each element anomalyScore column will be rounded to.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsAnomalyInsightsTableList(projectId, modelId, anomalyScoreRounding=anomalyScoreRounding)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsClusterInsightsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsClusterInsightsCreate}{}}}
\subsection{Method \code{ProjectsModelsClusterInsightsCreate()}}{
Compute Cluster Insights.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsClusterInsightsCreate(
  projectId,
  modelId,
  body = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{body}}{object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Compute Cluster Insights for a clustering project model.The number of features computed for cluster insights are capped at 100, starting with the features used to train the model sorted by feature impact (high to low), and then the remaining features in the dataset alphabetically.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} A URI of the newly submitted job in the \"Location\" header.
\itemize{
}
\item \strong{\code{404}} The project or the model was not found or insights have not been computed yet.
\itemize{
}
\item \strong{\code{422}} Feature Impact is already in progress or Cluster Insighst is already in progress, but we were unable to find the previous job.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
body <- NULL # object |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsClusterInsightsCreate(projectId, modelId, body=body)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsClusterInsightsDownloadList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsClusterInsightsDownloadList}{}}}
\subsection{Method \code{ProjectsModelsClusterInsightsDownloadList()}}{
Download Cluster Insights result.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsClusterInsightsDownloadList(
  projectId,
  modelId,
  format = "CSV",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{format}}{Enum < \link{CSV} > A format to use.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Download all computed Cluster Insights for a clustering project model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A file with insights for a clustering project model.
\itemize{
\item \strong{\code{ContentMinusDisposition}} Contains an auto generated filename for this download (\"attachment;filename=cluster_insights_<project_id>_<model_id>.csv\").
}
\item \strong{\code{404}} The project or the model was not found or insights have not been computed yet.
\itemize{
}
\item \strong{\code{422}} Feature Impact is required. Please, compute it first.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
format <- "CSV" # character | A format to use.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsClusterInsightsDownloadList(projectId, modelId, format=format)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsClusterInsightsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsClusterInsightsList}{}}}
\subsection{Method \code{ProjectsModelsClusterInsightsList()}}{
Retrieve Cluster Insights for all features.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsClusterInsightsList(
  limit,
  projectId,
  modelId,
  offset = 0,
  orderBy = NULL,
  searchFor = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{orderBy}}{Enum < \link{featureImpact, -featureImpact, featureName, -featureName} > Order results by the specified field value.}

\item{\code{searchFor}}{character. Search for a specific string in a feature name.This search is case insensitive. If not specified, all features will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve all computed Cluster Insights for a clustering project model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Insights for a clustering project model.
\itemize{
}
\item \strong{\code{404}} The project or the model was not found or insights have not been computed yet.
\itemize{
}
\item \strong{\code{422}} Feature Impact is required. Please, compute it first.
\itemize{
}
}
}

\subsection{Returns}{
\link{ClusterInsightsPaginatedResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 15 # integer | At most this many results are returned. The default may change without notice.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
orderBy <- 'orderBy_example' # character | Order results by the specified field value.
searchFor <- 'searchFor_example' # character | Search for a specific string in a feature name.This search is case insensitive. If not specified, all features will be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsClusterInsightsList(limit, projectId, modelId, offset=offset, orderBy=orderBy, searchFor=searchFor)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsConfusionChartsClassDetailsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsConfusionChartsClassDetailsList}{}}}
\subsection{Method \code{ProjectsModelsConfusionChartsClassDetailsList()}}{
Calculates and sends frequency of class in distributed among other classes for actual and predicted data.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsConfusionChartsClassDetailsList(
  className,
  projectId,
  modelId,
  source,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{className}}{character. Name of a class for which distribution frequency is requested.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{backtest_9, backtest_3, backtest_20, crossValidation, backtest_6, backtest_17, backtest_18, backtest_12, backtest_11, validation, backtest_10, backtest_16, backtest_15, backtest_8, backtest_19, backtest_5, backtest_13, backtest_2, backtest_4, backtest_14, holdout, backtest_7} > Source of the data}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\preformatted{     Calculates and sends frequency of class in distributed among other         classes for actual and predicted data. A confusion chart class details for given class gives         stats of misclassification done by model for given class for actual and predicted data.         .. note:: Available for multiclass projects only.
}


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The details of the confusion matrix of a model for a specific class.
\itemize{
}
\item \strong{\code{404}} No confusion chart for source.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelConfusionChartClassDetailsRetrieveReponseController}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
className <- 'className_example' # character | Name of a class for which distribution frequency is requested.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsConfusionChartsClassDetailsList(className, projectId, modelId, source)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsConfusionChartsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsConfusionChartsList}{}}}
\subsection{Method \code{ProjectsModelsConfusionChartsList()}}{
Retrieve all available confusion charts for model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsConfusionChartsList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\preformatted{     Retrieve all available confusion charts for model. The response will         include a json array of all available confusion charts, in the same format as the response         from :http:get:&#x60;/api/v2/projects/(projectId)/models/(modelId)/confusionCharts/(source)/&#x60;.         .. note:: Available for multiclass projects only.
}


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} All of the available confusion charts for a model.
\itemize{
}
\item \strong{\code{404}} No confusion chart available.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelConfusionChartListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsConfusionChartsList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsConfusionChartsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsConfusionChartsMetadataList}{}}}
\subsection{Method \code{ProjectsModelsConfusionChartsMetadataList()}}{
Retrieve metadata for the confusion chart of a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsConfusionChartsMetadataList(
  projectId,
  modelId,
  source,
  orderBy = "className",
  orientation = "actual",
  thumbnailCellSize = 10,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{backtest_9, backtest_3, backtest_20, crossValidation, backtest_6, backtest_17, backtest_18, backtest_12, backtest_11, validation, backtest_10, backtest_16, backtest_15, backtest_8, backtest_19, backtest_5, backtest_13, backtest_2, backtest_4, backtest_14, holdout, backtest_7} > Source of the data}

\item{\code{orderBy}}{Enum < \link{className, -className, actualCount, -actualCount, predictedCount, -predictedCount, f1, -f1} > Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'}

\item{\code{orientation}}{Enum < \link{actual, -actual, predicted, -predicted} > Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').}

\item{\code{thumbnailCellSize}}{integer. Number of classes in a single 'thumbnail' cell.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\preformatted{     Retrieve metadata for the confusion chart of a model.         .. note:: Available for multiclass projects only.
}


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The metadata for the confusion chart of a model.
\itemize{
}
\item \strong{\code{404}} No confusion chart for source.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelConfusionChartMetadataRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
thumbnailCellSize <- 10 # integer | Number of classes in a single 'thumbnail' cell.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsConfusionChartsMetadataList(projectId, modelId, source, orderBy=orderBy, orientation=orientation, thumbnailCellSize=thumbnailCellSize)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsConfusionChartsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsConfusionChartsRetrieve}{}}}
\subsection{Method \code{ProjectsModelsConfusionChartsRetrieve()}}{
Retrieve the confusion chart data from a single source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsConfusionChartsRetrieve(
  projectId,
  modelId,
  source,
  orderBy = "className",
  orientation = "actual",
  rowStart = NULL,
  rowEnd = NULL,
  colStart = NULL,
  colEnd = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{backtest_9, backtest_3, backtest_20, crossValidation, backtest_6, backtest_17, backtest_18, backtest_12, backtest_11, validation, backtest_10, backtest_16, backtest_15, backtest_8, backtest_19, backtest_5, backtest_13, backtest_2, backtest_4, backtest_14, holdout, backtest_7} > Source of the data}

\item{\code{orderBy}}{Enum < \link{className, -className, actualCount, -actualCount, predictedCount, -predictedCount, f1, -f1} > Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'}

\item{\code{orientation}}{Enum < \link{actual, -actual, predicted, -predicted} > Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').}

\item{\code{rowStart}}{integer. start index of row for slicing the confusion matrix.}

\item{\code{rowEnd}}{integer. end index of row for slicing the confusion matrix.}

\item{\code{colStart}}{integer. start index of column for slicing the confusion matrix.}

\item{\code{colEnd}}{integer. end index of column for slicing the confusion matrix.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\preformatted{     Retrieve the confusion chart data from a single source. A confusion chart consists of the confusion matrix for all classes, classes frequencies and &#x60;oneVsAll&#x60; metrics for all classes. The confusion matrix can be requested in a particular sort order and orientated by rows or columns. A subset of the confusion matrix can also be requested in part by specifying slicing indices. Throughout the following specification, &#x60;C&#x60; refers to the total number of classes in the dataset. The full confusion matrix refers to the confusion matrix with &#x60;C&#x60; classes.          .. note:: Available for multiclass projects only.          An example on the meaning of wasActualPercentages and wasPredictedPercentages:         Let&#39;s say we have the following data:         .. code-block:: js                         classMetrics.classA.wasActualPercentages[0].percentage &#x3D; 0.56            classMetrics.classA.wasPredictedPercentages[0].percentage &#x3D; 0.62            classA.wasActualPercentages[0].otherClassName &#x3D; \\&quot;classB\\&quot;            classA.wasPredictedPercentages[0].otherClassName &#x3D; \\&quot;classB\\&quot;               That means:          1) \\&quot;Given that it was actually classA, it predicted classB 56\% of the time\\&quot;.         2) \\&quot;Given that classA was predicted, it was actually classB 62\% of the time\\&quot;.
}


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The confusion chart data from a single source.
\itemize{
}
\item \strong{\code{404}} No confusion chart for source.
\itemize{
}
\item \strong{\code{422}} Invalid indices for confusion matrix.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelConfusionChartRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
rowStart <- 56 # integer | start index of row for slicing the confusion matrix.
rowEnd <- 56 # integer | end index of row for slicing the confusion matrix.
colStart <- 56 # integer | start index of column for slicing the confusion matrix.
colEnd <- 56 # integer | end index of column for slicing the confusion matrix.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsConfusionChartsRetrieve(projectId, modelId, source, orderBy=orderBy, orientation=orientation, rowStart=rowStart, rowEnd=rowEnd, colStart=colStart, colEnd=colEnd)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsCrossClassAccuracyScoresCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsCrossClassAccuracyScoresCreate}{}}}
\subsection{Method \code{ProjectsModelsCrossClassAccuracyScoresCreate()}}{
Start Cross Class Accuracy calculations.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsCrossClassAccuracyScoresCreate(
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Submits a job to start Cross Class Accuracy scores calculations for the model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CrossClassAccuracyCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsCrossClassAccuracyScoresCreate(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsCrossClassAccuracyScoresList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsCrossClassAccuracyScoresList}{}}}
\subsection{Method \code{ProjectsModelsCrossClassAccuracyScoresList()}}{
List Cross Class Accuracy scores.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsCrossClassAccuracyScoresList(
  projectId,
  modelId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{offset}}{integer. Number of items to skip. Defaults to 0 if not provided.}

\item{\code{limit}}{integer. Number of items to return, defaults to 100 if not provided.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves a list of Cross Class Accuracy scores for the model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns Cross Class Accuracy scores.
\itemize{
}
}
}

\subsection{Returns}{
\link{CrossClassAccuracyList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsCrossClassAccuracyScoresList(projectId, modelId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDataDisparityInsightsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDataDisparityInsightsCreate}{}}}
\subsection{Method \code{ProjectsModelsDataDisparityInsightsCreate()}}{
Start insight calculations.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDataDisparityInsightsCreate(
  projectId,
  modelId,
  dataDisparityCreatePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{dataDisparityCreatePayload}}{\link{DataDisparityCreatePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Submits a job to start Cross Class Data Disparity insight calculations.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{DataDisparityCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
dataDisparityCreatePayload <- DataDisparityCreatePayload$new() # DataDisparityCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDataDisparityInsightsCreate(projectId, modelId, dataDisparityCreatePayload=dataDisparityCreatePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDataDisparityInsightsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDataDisparityInsightsList}{}}}
\subsection{Method \code{ProjectsModelsDataDisparityInsightsList()}}{
Get Cross Class Data Disparity results.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDataDisparityInsightsList(
  feature,
  className1,
  className2,
  projectId,
  modelId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{feature}}{character. Feature for which insight is computed.}

\item{\code{className1}}{character. One of the compared classes.}

\item{\code{className2}}{character. Another compared class.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{offset}}{integer. Number of items to skip. Defaults to 0 if not provided.}

\item{\code{limit}}{integer. Number of items to return, defaults to 100 if not provided.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a list of Cross Class Data Disparity insights for the model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns Cross Class Data Disparity results.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataDisparityRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
feature <- 'feature_example' # character | Feature for which insight is computed.
className1 <- 'className1_example' # character | One of the compared classes.
className2 <- 'className2_example' # character | Another compared class.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDataDisparityInsightsList(feature, className1, className2, projectId, modelId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDatasetConfusionChartsClassDetailsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDatasetConfusionChartsClassDetailsList}{}}}
\subsection{Method \code{ProjectsModelsDatasetConfusionChartsClassDetailsList()}}{
Calculate and sends frequency of class in distributed among other classes for actual and predicted data.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDatasetConfusionChartsClassDetailsList(
  className,
  projectId,
  modelId,
  datasetId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{className}}{character. Name of a class for which distribution frequency is requested.}

\item{\code{projectId}}{character. The project to retrieve a Confusion chart from.}

\item{\code{modelId}}{character. The model to retrieve a Confusion chart from.}

\item{\code{datasetId}}{character. The dataset to retrieve a Confusion chart from.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Calculate and sends frequency of class in distributed among other classes for actual and predicted data. A confusion chart class details for given class gives stats of misclassification done by model for given class for actual and predicted data. Available for multiclass projects only.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A confusion chart class details for given class.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelConfusionChartClassDetailsForDatasetRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
className <- 'className_example' # character | Name of a class for which distribution frequency is requested.
projectId <- 'projectId_example' # character | The project to retrieve a Confusion chart from.
modelId <- 'modelId_example' # character | The model to retrieve a Confusion chart from.
datasetId <- 'datasetId_example' # character | The dataset to retrieve a Confusion chart from.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetConfusionChartsClassDetailsList(className, projectId, modelId, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDatasetConfusionChartsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDatasetConfusionChartsList}{}}}
\subsection{Method \code{ProjectsModelsDatasetConfusionChartsList()}}{
List of Confusion Charts objects on external datasets for a project with filtering option by dataset.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDatasetConfusionChartsList(
  projectId,
  modelId,
  offset = 0,
  limit = 100,
  orderBy = "className",
  orientation = "actual",
  rowStart = NULL,
  rowEnd = NULL,
  colStart = NULL,
  colEnd = NULL,
  datasetId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to retrieve a Confusion chart from.}

\item{\code{modelId}}{character. The model to retrieve a Confusion chart from.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{orderBy}}{Enum < \link{className, -className, actualCount, -actualCount, predictedCount, -predictedCount, f1, -f1} > Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'}

\item{\code{orientation}}{Enum < \link{actual, -actual, predicted, -predicted} > Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').}

\item{\code{rowStart}}{integer. start index of row for slicing the confusion matrix.}

\item{\code{rowEnd}}{integer. end index of row for slicing the confusion matrix.}

\item{\code{colStart}}{integer. start index of column for slicing the confusion matrix.}

\item{\code{colEnd}}{integer. end index of column for slicing the confusion matrix.}

\item{\code{datasetId}}{character. The datasetId to retrieve a Confusion chart from.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of Confusion Charts objects on external datasets for a project with filtering option by dataset. Prediction dataset may have Confusion Chart for multiclass projects computed if it contained a target with actual values and insights were computed on this dataset. A confusion chart consists of the confusion matrix for all classes, classes frequencies and oneVsAll metrics for all classes. The confusion matrix can be requested in a particular sort order and orientated by rows or columns. Available for multiclass projects only.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of Confusion Charts objects for external datasets.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{ConfusionChartForDatasetsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve a Confusion chart from.
modelId <- 'modelId_example' # character | The model to retrieve a Confusion chart from.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
rowStart <- 56 # integer | start index of row for slicing the confusion matrix.
rowEnd <- 56 # integer | end index of row for slicing the confusion matrix.
colStart <- 56 # integer | start index of column for slicing the confusion matrix.
colEnd <- 56 # integer | end index of column for slicing the confusion matrix.
datasetId <- 'datasetId_example' # character | The datasetId to retrieve a Confusion chart from.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetConfusionChartsList(projectId, modelId, offset=offset, limit=limit, orderBy=orderBy, orientation=orientation, rowStart=rowStart, rowEnd=rowEnd, colStart=colStart, colEnd=colEnd, datasetId=datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDatasetConfusionChartsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDatasetConfusionChartsMetadataList}{}}}
\subsection{Method \code{ProjectsModelsDatasetConfusionChartsMetadataList()}}{
Retrieve metadata for the confusion chart of a model on external dataset for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDatasetConfusionChartsMetadataList(
  projectId,
  modelId,
  datasetId,
  orderBy = "className",
  orientation = "actual",
  thumbnailCellSize = 10,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to retrieve a Confusion chart from.}

\item{\code{modelId}}{character. The model to retrieve a Confusion chart from.}

\item{\code{datasetId}}{character. The dataset to retrieve a Confusion chart from.}

\item{\code{orderBy}}{Enum < \link{className, -className, actualCount, -actualCount, predictedCount, -predictedCount, f1, -f1} > Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'}

\item{\code{orientation}}{Enum < \link{actual, -actual, predicted, -predicted} > Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').}

\item{\code{thumbnailCellSize}}{integer. Number of classes in a single 'thumbnail' cell.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve metadata for the confusion chart of a model on external dataset for a project. Available for multiclass projects only.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve metadata for the Confusion Chart objects on external datasets.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{ConfusionChartRetrieveMetadataForDatasets}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve a Confusion chart from.
modelId <- 'modelId_example' # character | The model to retrieve a Confusion chart from.
datasetId <- 'datasetId_example' # character | The dataset to retrieve a Confusion chart from.
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
thumbnailCellSize <- 10 # integer | Number of classes in a single 'thumbnail' cell.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetConfusionChartsMetadataList(projectId, modelId, datasetId, orderBy=orderBy, orientation=orientation, thumbnailCellSize=thumbnailCellSize)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDatasetConfusionChartsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDatasetConfusionChartsRetrieve}{}}}
\subsection{Method \code{ProjectsModelsDatasetConfusionChartsRetrieve()}}{
Retrieve Confusion Chart objects on external datasets for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDatasetConfusionChartsRetrieve(
  projectId,
  modelId,
  datasetId,
  orderBy = "className",
  orientation = "actual",
  rowStart = NULL,
  rowEnd = NULL,
  colStart = NULL,
  colEnd = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to retrieve a Confusion chart from.}

\item{\code{modelId}}{character. The model to retrieve a Confusion chart from.}

\item{\code{datasetId}}{character. The dataset to retrieve a Confusion chart from.}

\item{\code{orderBy}}{Enum < \link{className, -className, actualCount, -actualCount, predictedCount, -predictedCount, f1, -f1} > Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'}

\item{\code{orientation}}{Enum < \link{actual, -actual, predicted, -predicted} > Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').}

\item{\code{rowStart}}{integer. start index of row for slicing the confusion matrix.}

\item{\code{rowEnd}}{integer. end index of row for slicing the confusion matrix.}

\item{\code{colStart}}{integer. start index of column for slicing the confusion matrix.}

\item{\code{colEnd}}{integer. end index of column for slicing the confusion matrix.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Confusion Chart objects on external datasets for a project. Prediction dataset may have Confusion Chart for multiclass projects computed if it contained a target with actual values and insights were computed on this dataset. A confusion chart consists of the confusion matrix for all classes, classes frequencies and oneVsAll metrics for all classes. The confusion matrix can be requested in a particular sort order and oriented by rows or columns (zero-indexed). Available for multiclass projects only.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve Confusion Chart objects on external datasets.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{ConfusionChartRetrieveForDatasets}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve a Confusion chart from.
modelId <- 'modelId_example' # character | The model to retrieve a Confusion chart from.
datasetId <- 'datasetId_example' # character | The dataset to retrieve a Confusion chart from.
orderBy <- "className" # character | Ordering the chart data by following attributes.Prefix the attribute name with a dash to sort in descending order, e.g. orderBy='-predictedCount'
orientation <- "actual" # character | Determines whether the values in the rows of the confusion matrix should correspond to the same actual class ('actual') or predicted class ('predicted').
rowStart <- 56 # integer | start index of row for slicing the confusion matrix.
rowEnd <- 56 # integer | end index of row for slicing the confusion matrix.
colStart <- 56 # integer | start index of column for slicing the confusion matrix.
colEnd <- 56 # integer | end index of column for slicing the confusion matrix.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetConfusionChartsRetrieve(projectId, modelId, datasetId, orderBy=orderBy, orientation=orientation, rowStart=rowStart, rowEnd=rowEnd, colStart=colStart, colEnd=colEnd)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDatasetLiftChartsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDatasetLiftChartsList}{}}}
\subsection{Method \code{ProjectsModelsDatasetLiftChartsList()}}{
Retrieve List of Lift chart data on prediction datasets for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDatasetLiftChartsList(
  projectId,
  modelId,
  offset = 0,
  limit = 100,
  datasetId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{datasetId}}{character. If provided will return Lift chart for dataset with matching datasetId.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of Lift chart objects on prediction datasets for a project with filtering option by dataset. Prediction dataset may have Lift chart computed if it contained a column with actual values and predictions were computed on this dataset. This controller is not supported for multiclass classification projects. For multiclass, instead use /projects/<projectId>/models/<modelId>/datasetMulticlassLiftCharts/.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve List of Lift chart data on prediction datasets.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{LiftChartForDatasetsList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return Lift chart for dataset with matching datasetId.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetLiftChartsList(projectId, modelId, offset=offset, limit=limit, datasetId=datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDatasetMulticlassLiftChartsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDatasetMulticlassLiftChartsList}{}}}
\subsection{Method \code{ProjectsModelsDatasetMulticlassLiftChartsList()}}{
Retrieve List of Multiclass Lift chart data on prediction datasets for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDatasetMulticlassLiftChartsList(
  projectId,
  modelId,
  offset = 0,
  limit = 100,
  datasetId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{datasetId}}{character. If provided will return Lift chart for dataset with matching datasetId.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of Multiclass Lift chart objects on prediction datasets for a project with filtering option by dataset. Prediction dataset may have Multiclass Lift chart computed if it contained a column with actual values and predictions were computed on this dataset. Multiclass Lift charts are supported for multiclass classification projects only.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve List of Multiclass Lift chart data on prediction datasets.
\itemize{
}
\item \strong{\code{404}} No insights found.
\itemize{
}
}
}

\subsection{Returns}{
\link{MulticlassLiftChartForDatasetsList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return Lift chart for dataset with matching datasetId.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetMulticlassLiftChartsList(projectId, modelId, offset=offset, limit=limit, datasetId=datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDatasetResidualsChartsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDatasetResidualsChartsList}{}}}
\subsection{Method \code{ProjectsModelsDatasetResidualsChartsList()}}{
List of residuals charts objects on prediction datasets.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDatasetResidualsChartsList(
  projectId,
  modelId,
  offset = 0,
  limit = 100,
  datasetId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{datasetId}}{character. If provided will return ROC curve for dataset with matching `datasetId`.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of residuals charts objects on prediction datasets for a project with filtering option by dataset. Prediction dataset may have residuals chart computed if it contained a column with actual values and predictions were computed on this dataset. Residuals charts are supported for regression projects only.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ResidualsChartForDatasetsList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return ROC curve for dataset with matching `datasetId`.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetResidualsChartsList(projectId, modelId, offset=offset, limit=limit, datasetId=datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsDatasetRocCurvesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsDatasetRocCurvesList}{}}}
\subsection{Method \code{ProjectsModelsDatasetRocCurvesList()}}{
List of ROC curve objects on prediction datasets for a project with filtering option by dataset.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsDatasetRocCurvesList(
  projectId,
  modelId,
  offset = 0,
  limit = 100,
  datasetId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{datasetId}}{character. If provided will return ROC curve for dataset with matching `datasetId`.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of ROC curve objects on prediction datasets for a project with filtering option by dataset.  Prediction dataset may have ROC curve computed if it contained a column with actual values and predictions were computed on this dataset. Each ROC curve object includes an array of points showing the performance of the model at different thresholds for classification, and arrays of sample predictions for both the positive and negative classes.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Objects were returned successfully. No objects is a valid case.
\itemize{
}
}
}

\subsection{Returns}{
\link{RocCurveForDatasetsList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
datasetId <- 'datasetId_example' # character | If provided will return ROC curve for dataset with matching `datasetId`.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsDatasetRocCurvesList(projectId, modelId, offset=offset, limit=limit, datasetId=datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFairnessInsightsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFairnessInsightsCreate}{}}}
\subsection{Method \code{ProjectsModelsFairnessInsightsCreate()}}{
Start insight calculations.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFairnessInsightsCreate(
  projectId,
  modelId,
  fairnessInsightsStartCalculationPayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{fairnessInsightsStartCalculationPayload}}{\link{FairnessInsightsStartCalculationPayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Submits a job to start Per Class Bias insight calculations for the model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{FairnessInsightsStartCalculationResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
fairnessInsightsStartCalculationPayload <- FairnessInsightsStartCalculationPayload$new() # FairnessInsightsStartCalculationPayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFairnessInsightsCreate(projectId, modelId, fairnessInsightsStartCalculationPayload=fairnessInsightsStartCalculationPayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFairnessInsightsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFairnessInsightsList}{}}}
\subsection{Method \code{ProjectsModelsFairnessInsightsList()}}{
List calculated Per Class Bias insights.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFairnessInsightsList(
  projectId,
  modelId,
  offset = 0,
  limit = 100,
  fairnessMetricsSet = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{offset}}{integer. Number of items to skip. Defaults to 0 if not provided.}

\item{\code{limit}}{integer. Number of items to return, defaults to 100 if not provided.}

\item{\code{fairnessMetricsSet}}{Enum < \link{proportionalParity, equalParity, predictionBalance, trueFavorableAndUnfavorableRateParity, favorableAndUnfavorablePredictiveValueParity} > Metric to use for calculating fairness. Can be one of ``proportionalParity``, ``equalParity``, ``predictionBalance``, ``trueFavorableAndUnfavorableRateParity`` or ``FavorableAndUnfavorablePredictiveValueParity``. Used and required only if \emph{Bias & Fairness in AutoML} feature is enabled.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a list of Per Class Bias insights for the model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns Per Class Bias results.
\itemize{
}
}
}

\subsection{Returns}{
\link{FairnessInsightsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
offset <- 0 # integer | Number of items to skip. Defaults to 0 if not provided.
limit <- 100 # integer | Number of items to return, defaults to 100 if not provided.
fairnessMetricsSet <- 'fairnessMetricsSet_example' # character | Metric to use for calculating fairness. Can be one of ``proportionalParity``, ``equalParity``, ``predictionBalance``, ``trueFavorableAndUnfavorableRateParity`` or ``FavorableAndUnfavorablePredictiveValueParity``. Used and required only if *Bias & Fairness in AutoML* feature is enabled.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFairnessInsightsList(projectId, modelId, offset=offset, limit=limit, fairnessMetricsSet=fairnessMetricsSet)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureEffectsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureEffectsCreate}{}}}
\subsection{Method \code{ProjectsModelsFeatureEffectsCreate()}}{
Add a request to the queue to calculate Feature Effects.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureEffectsCreate(
  projectId,
  modelId,
  featureEffectCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{featureEffectCreate}}{\link{FeatureEffectCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add a request to the queue to calculate Feature Effects. If the job has been previously submitted, the request fails, returning the `jobId` of the previously submitted job. Use this `jobId` to check status of the previously submitted job.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The Feature Effects request has been successfully submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{403}} User does not have permission to view or submit jobs for the project.
\itemize{
}
\item \strong{\code{404}} Provided project or model does not exist.
\itemize{
}
\item \strong{\code{422}} Queue submission error.  .. minversion:: v2.21      If the rowCount exceeds the maximum or minimum value for this dataset. Minimum     is 10 rows. Maximum is 100000 rows or the training sample size of the model,     whichever is less.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
featureEffectCreate <- FeatureEffectCreate$new() # FeatureEffectCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureEffectsCreate(projectId, modelId, featureEffectCreate=featureEffectCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureEffectsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureEffectsList}{}}}
\subsection{Method \code{ProjectsModelsFeatureEffectsList()}}{
Retrieve Feature Effects for the model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureEffectsList(
  projectId,
  modelId,
  source = "training",
  includeIcePlots = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{training, validation, holdout} > Models data source.}

\item{\code{includeIcePlots}}{Enum < \link{false, False, true, True} > Indicates whether Individual Conditional Expectation (ICE) plots should be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Feature Effects for the model. Feature Effects provides partial dependence and predicted vs actual values for the top 500 features, ordered by feature impact score. The partial dependence shows marginal effect of a feature on the target variable after accounting for the average effects of all other predictive features. It indicates how, holding all other variables except the feature of interest as they were, the value of this feature affects your prediction. If a Feature Effects job was previously submitted, this endpoint will return a response structured as {\"message\": <message>, \"jobId\": <jobId>} where jobId is the ID of the job. Retrieve the job with :http:get:`/api/v2/projects/(projectId)/jobs/(jobId)/`


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project, model, source or computation results do not exist.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureEffectsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureEffectsList(projectId, modelId, source=source, includeIcePlots=includeIcePlots)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureEffectsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureEffectsMetadataList}{}}}
\subsection{Method \code{ProjectsModelsFeatureEffectsMetadataList()}}{
Retrieve Feature Effects metadata. Response contains status and available sources.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureEffectsMetadataList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Feature Effects metadata. Response contains status and available sources. One of the provided `source` parameters used for retrieving Feature Effects. * Source can be, at a minimum, `training` or `validation`. If holdout is configured for the project, `source` also includes `holdout`. * Source value of `training` is always available. (versions prior to v2.17 support `validation` only) * When a model is trained into `validation` or `holdout` without stacked predictions (i.e., no out-of-sample predictions in `validation` or `holdout`), `validation` and `holdout` sources are not available.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project or model does not exist.
\itemize{
}
\item \strong{\code{422}} The model is datetime partitioned.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelXrayMetadataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureEffectsMetadataList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureFitCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureFitCreate}{}}}
\subsection{Method \code{ProjectsModelsFeatureFitCreate()}}{
Add a request to the queue to calculate Feature Fit.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureFitCreate(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
NOTE: Starting from API v2.29 this endpoint will be deprecated. Add a request to the queue to calculate Feature Fit. If the job has been previously submitted, the request fails, returning the `jobId` of the previously submitted job. Use this `jobId` to check status of the previously submitted job.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The Feature Effects request has been successfully submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{403}} User does not have permission to view or submit jobs for the project.
\itemize{
}
\item \strong{\code{404}} Provided project or model does not exist.
\itemize{
}
\item \strong{\code{422}} Queue submission error.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureFitCreate(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureFitList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureFitList}{}}}
\subsection{Method \code{ProjectsModelsFeatureFitList()}}{
Retrieve Feature Fit for the model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureFitList(
  projectId,
  modelId,
  source = "training",
  includeIcePlots = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{training, validation, holdout} > Models data source.}

\item{\code{includeIcePlots}}{Enum < \link{false, False, true, True} > Indicates whether Individual Conditional Expectation (ICE) plots should be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
NOTE: Starting from API v2.29 this endpoint will be deprecated. Retrieve Feature Fit for the model. Feature Fit provides partial dependence and predicted vs actual values for the top 500 features, ordered by feature importance score. The partial dependence shows marginal effect of a feature on the target variable after accounting for the average effects of all other predictive features. It indicates how, holding all other variables except the feature of interest as they were, the value of this feature affects your prediction. If a Feature Fit job was previously submitted, this endpoint will return a response structured as {\"message\": <message>, \"jobId\": <jobId>} where jobId is the ID of the job. Retrieve the job with :http:get:`/api/v2/projects/(projectId)/jobs/(jobId)/`


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project, model, source or computation results do not exist.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureFitResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureFitList(projectId, modelId, source=source, includeIcePlots=includeIcePlots)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureFitMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureFitMetadataList}{}}}
\subsection{Method \code{ProjectsModelsFeatureFitMetadataList()}}{
Retrieve Feature Fit metadata. Response contains status and available sources.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureFitMetadataList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
NOTE: Starting from API v2.29 this endpoint will be deprecated. Retrieve Feature Fit metadata. Response contains status and available sources. One of the provided `source` parameters used for retrieving Feature Fit. * Source can be, at a minimum, `training` or `validation`. If holdout is configured for the project, `source` also includes `holdout`. * Source value of `training` is always available.(versions prior to v2.17 support `validation` only) * When a model is trained into `validation` or `holdout` without stacked predictions (i.e., no out-of-sample predictions in `validation` or `holdout`), `validation` and `holdout` sources are not available.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project or model does not exist.
\itemize{
}
\item \strong{\code{422}} The model is datetime partitioned.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelXrayMetadataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureFitMetadataList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureImpactCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureImpactCreate}{}}}
\subsection{Method \code{ProjectsModelsFeatureImpactCreate()}}{
Add a request to calculate feature impact to the queue.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureImpactCreate(
  projectId,
  modelId,
  featureImpactCreatePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{featureImpactCreatePayload}}{\link{FeatureImpactCreatePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add a request to calculate feature impact to the queue. If the job has been previously submitted, the request  will fail and return the `jobId` of previously submitted job. This `jobId` can be used to check status of previously submitted job.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The request was accepted and will be worked on.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{404}} If `modelId` does not exist in project leaderboard
\itemize{
}
\item \strong{\code{422}} If feature impact has already run will return error including `jobId` property which is the `jobId` of the previously started feature impact job.  .. minversion:: v2.21  If the `rowCount` exceeds the maximum or minimum value for this dataset. Minimum is 10 rows. Maximum is 100000 rows or the training sample size of the model, whichever is less.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
featureImpactCreatePayload <- FeatureImpactCreatePayload$new() # FeatureImpactCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureImpactCreate(projectId, modelId, featureImpactCreatePayload=featureImpactCreatePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureImpactList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureImpactList}{}}}
\subsection{Method \code{ProjectsModelsFeatureImpactList()}}{
Retrieve feature impact scores for features in a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureImpactList(
  projectId,
  modelId,
  backtest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{backtest}}{character. The backtest value is used for Feature Impact computation. It is possible to re-compute Feature Impact for different backtests in datetime partitioned models.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve feature impact scores for features in a model. Feature Impact is computed for each column by creating new data with that column randomly permuted (but the others left unchanged), and seeing how the error metric score for the predictions is affected. Elsewhere this technique is sometimes called 'Permutation Importance'. The `impactUnnormalized` is how much worse the error metric score is when making predictions on this modified data. The `impactNormalized` is normalized so that the largest value is 1. In both cases, larger values indicate more important features. If a feature is a redundant feature, i.e. once other features are considered it doesn't contribute much in addition, the `redundantWith` value is the name of feature that has the highest correlation with this feature.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} No feature impact data found for the given model.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureImpactResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
backtest <- 'backtest_example' # character | The backtest value is used for Feature Impact computation. It is possible to re-compute Feature Impact for different backtests in datetime partitioned models.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureImpactList(projectId, modelId, backtest=backtest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsFeatureListsClusterInsightsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsFeatureListsClusterInsightsList}{}}}
\subsection{Method \code{ProjectsModelsFeatureListsClusterInsightsList()}}{
Retrieve Cluster Insights for a single featurelist
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsFeatureListsClusterInsightsList(
  limit,
  projectId,
  modelId,
  datasetId,
  offset = 0,
  orderBy = NULL,
  searchFor = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{datasetId}}{character. The dataset ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{orderBy}}{Enum < \link{featureImpact, -featureImpact, featureName, -featureName} > Order results by the specified field value.}

\item{\code{searchFor}}{character. Search for a specific string in a feature name.This search is case insensitive. If not specified, all features will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve computed Cluster Insights for a clustering project model on a single featurelist.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Insights for a clustering project model on a single featurelist.
\itemize{
}
\item \strong{\code{404}} The project or the model was not found or insights have not been computed yet.
\itemize{
}
\item \strong{\code{422}} Feature Impact is required. Please, compute it first.
\itemize{
}
}
}

\subsection{Returns}{
\link{ClusterInsightsPaginatedResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 15 # integer | At most this many results are returned. The default may change without notice.
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
datasetId <- 'datasetId_example' # character | The dataset ID
offset <- 0 # integer | Number of results to skip.
orderBy <- 'orderBy_example' # character | Order results by the specified field value.
searchFor <- 'searchFor_example' # character | Search for a specific string in a feature name.This search is case insensitive. If not specified, all features will be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsFeatureListsClusterInsightsList(limit, projectId, modelId, datasetId, offset=offset, orderBy=orderBy, searchFor=searchFor)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsImageActivationMapsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsImageActivationMapsCreate}{}}}
\subsection{Method \code{ProjectsModelsImageActivationMapsCreate()}}{
Request the computation of image activation maps for the specified model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsImageActivationMapsCreate(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Request the computation of image activation maps for the specified model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Image activation map computation has been successfully requested
\itemize{
\item \strong{\code{Location}} a url that can be polled to check the status of the job.
}
\item \strong{\code{422}} Cannot compute image activation maps: if image activation maps were already computed for the model or there was another issue creating this job
\itemize{
}
}
}

\subsection{Returns}{
\link{ActivationMapsComputeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsImageActivationMapsCreate(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsImageActivationMapsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsImageActivationMapsList}{}}}
\subsection{Method \code{ProjectsModelsImageActivationMapsList()}}{
Retrieve Image Activation Maps for a feature of a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsImageActivationMapsList(
  featureName,
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{featureName}}{character. Name of the feature to query}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Image Activation Maps for a feature of a model. Image Activation maps are a technique to get the discriminative image regions used by a CNN to identify a specific class in the image. In other words, an image activation map lets us see which regions in the image were relevant to this class.  The higher the value in the activation map the greater the effect the region had on the prediction.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Activation Maps
\itemize{
}
\item \strong{\code{422}} Unable to process request.
\itemize{
}
}
}

\subsection{Returns}{
\link{ActivationMapsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the feature to query
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsImageActivationMapsList(featureName, projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsImageEmbeddingsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsImageEmbeddingsCreate}{}}}
\subsection{Method \code{ProjectsModelsImageEmbeddingsCreate()}}{
Request the computation of image embeddings for the specified model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsImageEmbeddingsCreate(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Request the computation of image embeddings for the specified model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Image embedding computation has been successfully requested
\itemize{
\item \strong{\code{Location}} a url that can be polled to check the status of the job.
}
\item \strong{\code{422}} Cannot compute image embeddings: if image embeddings were already computed for the model or there was another issue creating this job
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageEmbeddingsComputeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsImageEmbeddingsCreate(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsImageEmbeddingsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsImageEmbeddingsList}{}}}
\subsection{Method \code{ProjectsModelsImageEmbeddingsList()}}{
Retrieve ImageEmbeddings for a feature of a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsImageEmbeddingsList(
  featureName,
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{featureName}}{character. Name of the feature to query}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve ImageEmbeddings for a feature of a model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Embeddings
\itemize{
}
\item \strong{\code{422}} Unable to process request.
\itemize{
}
}
}

\subsection{Returns}{
\link{EmbeddingsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the feature to query
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsImageEmbeddingsList(featureName, projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsLabelwiseRocCurvesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsLabelwiseRocCurvesList}{}}}
\subsection{Method \code{ProjectsModelsLabelwiseRocCurvesList()}}{
Retrieve labelwise ROC curves for model and given source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsLabelwiseRocCurvesList(
  projectId,
  modelId,
  source,
  labels = NULL,
  searchQuery = NULL,
  sortBy = "label",
  sortOrder = "ascending",
  threshold = NULL,
  offset = 0,
  limit = 100,
  includeModelAverage = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. Project Id.}

\item{\code{modelId}}{character. Model Id.}

\item{\code{source}}{Enum < \link{validation, crossValidation, holdout} > Chart source.}

\item{\code{labels}}{character. Labels for which data is requested.}

\item{\code{searchQuery}}{character. Search query for label.}

\item{\code{sortBy}}{Enum < \link{accuracy, f1Score, falsePositiveRate, label, matthewsCorrelationCoefficient, negativePredictiveValue, positivePredictiveValue, trueNegativeRate, truePositiveRate} > Property to sort labels in the response.}

\item{\code{sortOrder}}{Enum < \link{ascending, descending} > Sort order.}

\item{\code{threshold}}{numeric. Threshold at which the metric should be sorted.}

\item{\code{offset}}{integer. Number of labels to skip.}

\item{\code{limit}}{integer. Number of labels to return.}

\item{\code{includeModelAverage}}{character. Whether model average metrics should be included in the response.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve labelwise ROC curves for model and given source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Labelwise ROC curves for model and given source.
\itemize{
}
}
}

\subsection{Returns}{
\link{LabelwiseROC}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project Id.
modelId <- 'modelId_example' # character | Model Id.
source <- 'source_example' # character | Chart source.
labels <- 'labels_example' # character | Labels for which data is requested.
searchQuery <- 'searchQuery_example' # character | Search query for label.
sortBy <- "label" # character | Property to sort labels in the response.
sortOrder <- "ascending" # character | Sort order.
threshold <- 3.4 # numeric | Threshold at which the metric should be sorted.
offset <- 0 # integer | Number of labels to skip.
limit <- 100 # integer | Number of labels to return.
includeModelAverage <- FALSE # character | Whether model average metrics should be included in the response.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsLabelwiseRocCurvesList(projectId, modelId, source, labels=labels, searchQuery=searchQuery, sortBy=sortBy, sortOrder=sortOrder, threshold=threshold, offset=offset, limit=limit, includeModelAverage=includeModelAverage)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsLiftChartList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsLiftChartList}{}}}
\subsection{Method \code{ProjectsModelsLiftChartList()}}{
Retrieve all available lift charts for model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsLiftChartList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve all available lift charts for model. The response will include a json list of all available lift charts, in the same format as the response from :http:get:`/api/v2/projects/(projectId)/models/(modelId)/liftChart/(source)/`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of all of the available lift charts for a model.
\itemize{
}
\item \strong{\code{403}} Invalid Permissions
\itemize{
}
\item \strong{\code{404}} Please use multiclass lift route for per-class lift data.
\itemize{
}
\item \strong{\code{422}} Lift chart is not available for unsupervised mode projects.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelLiftChartListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsLiftChartList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsLiftChartRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsLiftChartRetrieve}{}}}
\subsection{Method \code{ProjectsModelsLiftChartRetrieve()}}{
Retrieve the lift chart data from a single source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsLiftChartRetrieve(projectId, modelId, source, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{backtest_9, backtest_3, backtest_20, crossValidation, backtest_6, backtest_17, backtest_18, backtest_12, backtest_11, validation, backtest_10, backtest_16, backtest_15, backtest_8, backtest_19, backtest_5, backtest_13, backtest_2, backtest_4, backtest_14, holdout, backtest_7} > Source of the data}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the lift chart data from a single source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Lift chart data from a single source.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelLiftChartResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsLiftChartRetrieve(projectId, modelId, source)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsMulticlassFeatureEffectsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsMulticlassFeatureEffectsCreate}{}}}
\subsection{Method \code{ProjectsModelsMulticlassFeatureEffectsCreate()}}{
Compute feature effects for a multiclass model.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsMulticlassFeatureEffectsCreate(
  projectId,
  modelId,
  multiclassFeatureEffectCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{multiclassFeatureEffectCreate}}{\link{MulticlassFeatureEffectCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Compute feature effects for a multiclass model. If the job has been previously submitted, the request fails, returning the `jobId` of the previously submitted job. Use this `jobId` to check status of the previously submitted job. NOTE: feature effects are computed for top 100 classes.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The Feature Effects request has been successfully submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{403}} User does not have permission to view or submit jobs for the project.
\itemize{
}
\item \strong{\code{404}} Project, model, source or computation results do not exist.
\itemize{
}
\item \strong{\code{422}} Queue submission error. If the rowCount exceeds the maximum or minimum value for this dataset. Minimum is 10 rows. Maximum is 100000 rows or the training sample size of the model, whichever is less. If neither ``features`` nor ``topNFeatures`` is provided.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
multiclassFeatureEffectCreate <- MulticlassFeatureEffectCreate$new() # MulticlassFeatureEffectCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassFeatureEffectsCreate(projectId, modelId, multiclassFeatureEffectCreate=multiclassFeatureEffectCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsMulticlassFeatureEffectsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsMulticlassFeatureEffectsList}{}}}
\subsection{Method \code{ProjectsModelsMulticlassFeatureEffectsList()}}{
Retrieve feature effects for each class in a multiclass model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsMulticlassFeatureEffectsList(
  projectId,
  modelId,
  source = "training",
  includeIcePlots = NULL,
  offset = 0,
  limit = 100,
  class = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{training, validation, holdout} > Models data source.}

\item{\code{includeIcePlots}}{Enum < \link{false, False, true, True} > Indicates whether Individual Conditional Expectation (ICE) plots should be returned.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{class}}{character. Target class label.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve feature effects for each class in a multiclass model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have permission to view the project.
\itemize{
}
\item \strong{\code{404}} Project, model, source or computation results do not exist.
\itemize{
}
}
}

\subsection{Returns}{
\link{MulticlassFeatureEffectsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- "training" # character | Models data source.
includeIcePlots <- 'includeIcePlots_example' # character | Indicates whether Individual Conditional Expectation (ICE) plots should be returned.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
class <- 'class_example' # character | Target class label.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassFeatureEffectsList(projectId, modelId, source=source, includeIcePlots=includeIcePlots, offset=offset, limit=limit, class=class)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsMulticlassFeatureImpactList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsMulticlassFeatureImpactList}{}}}
\subsection{Method \code{ProjectsModelsMulticlassFeatureImpactList()}}{
Retrieve feature impact scores for each class in a multiclass model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsMulticlassFeatureImpactList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve feature impact scores for each class in a multiclass model. Feature Impact is computed for each column by creating new data with that column randomly permuted (but the others left unchanged), and seeing how the error metric score for the predictions is affected. Elsewhere this technique is sometimes called 'Permutation Importance'. The `impactUnnormalized` is how much worse the error metric score is when making predictions on this modified data. The `impactNormalized` is normalized so that the largest value is 1. In both cases, larger values indicate more important features.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} If no feature impact data found for a given model.
\itemize{
}
}
}

\subsection{Returns}{
\link{MulticlassFeatureImpactResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassFeatureImpactList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsMulticlassLiftChartList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsMulticlassLiftChartList}{}}}
\subsection{Method \code{ProjectsModelsMulticlassLiftChartList()}}{
Retrieve all available lift charts for multiclass model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsMulticlassLiftChartList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve all available lift charts for multiclass model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Multiclass lift chart data.
\itemize{
}
}
}

\subsection{Returns}{
\link{AllMulticlassModelLiftChartsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassLiftChartList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsMulticlassLiftChartRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsMulticlassLiftChartRetrieve}{}}}
\subsection{Method \code{ProjectsModelsMulticlassLiftChartRetrieve()}}{
Retrieve the multiclass lift chart data from a single source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsMulticlassLiftChartRetrieve(
  projectId,
  modelId,
  source,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{validation, crossValidation, holdout} > Source of the data.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the multiclass lift chart data from a single source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Multiclass lift chart data from a single source.
\itemize{
}
}
}

\subsection{Returns}{
\link{MulticlassModelLiftChartResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMulticlassLiftChartRetrieve(projectId, modelId, source)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsMultilabelLiftChartsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsMultilabelLiftChartsRetrieve}{}}}
\subsection{Method \code{ProjectsModelsMultilabelLiftChartsRetrieve()}}{
Retrieve labelwise lift charts for model and given source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsMultilabelLiftChartsRetrieve(
  projectId,
  modelId,
  source,
  labels = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. Project Id.}

\item{\code{modelId}}{character. Model Id.}

\item{\code{source}}{Enum < \link{validation, crossValidation, holdout} > Chart source.}

\item{\code{labels}}{character. Labels for which data is requested.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve labelwise lift charts for model and given source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Labelwise lift charts for model and given source.
\itemize{
}
}
}

\subsection{Returns}{
\link{LabelwiseLiftChart}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project Id.
modelId <- 'modelId_example' # character | Model Id.
source <- 'source_example' # character | Chart source.
labels <- 'labels_example' # character | Labels for which data is requested.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsMultilabelLiftChartsRetrieve(projectId, modelId, source, labels=labels)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsPredictionExplanationsInitializationCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsPredictionExplanationsInitializationCreate}{}}}
\subsection{Method \code{ProjectsModelsPredictionExplanationsInitializationCreate()}}{
Create a new prediction explanations initialization.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsPredictionExplanationsInitializationCreate(
  projectId,
  modelId,
  predictionExplanationsInitializationCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{predictionExplanationsInitializationCreate}}{\link{PredictionExplanationsInitializationCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new prediction explanations initialization. This is a necessary prerequisite for generating prediction explanations.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The request was accepted and will be worked on.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
predictionExplanationsInitializationCreate <- PredictionExplanationsInitializationCreate$new() # PredictionExplanationsInitializationCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationCreate(projectId, modelId, predictionExplanationsInitializationCreate=predictionExplanationsInitializationCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsPredictionExplanationsInitializationDeleteMany"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsPredictionExplanationsInitializationDeleteMany}{}}}
\subsection{Method \code{ProjectsModelsPredictionExplanationsInitializationDeleteMany()}}{
Delete an existing PredictionExplanationsInitialization.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsPredictionExplanationsInitializationDeleteMany(
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete an existing PredictionExplanationsInitialization.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The deletion was successful.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationDeleteMany(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsPredictionExplanationsInitializationList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsPredictionExplanationsInitializationList}{}}}
\subsection{Method \code{ProjectsModelsPredictionExplanationsInitializationList()}}{
Retrieve the current PredictionExplanationsInitialization.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsPredictionExplanationsInitializationList(
  projectId,
  modelId,
  excludeAdjustedPredictions = "true",
  predictionExplanationsInitializationRetrieve = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{excludeAdjustedPredictions}}{Enum < \link{false, False, true, True} > Whether to include adjusted prediction in the PredictionExplanationsSample response.}

\item{\code{predictionExplanationsInitializationRetrieve}}{\link{PredictionExplanationsInitializationRetrieve}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the current PredictionExplanationsInitialization. A PredictionExplanationsInitialization is a pre-requisite for successfully computing prediction explanations using a particular model, and can be used to preview the prediction explanations that would be generated for a complete dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
excludeAdjustedPredictions <- "true" # character | Whether to include adjusted prediction in the PredictionExplanationsSample response.
predictionExplanationsInitializationRetrieve <- PredictionExplanationsInitializationRetrieve$new() # PredictionExplanationsInitializationRetrieve |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationList(projectId, modelId, excludeAdjustedPredictions=excludeAdjustedPredictions, predictionExplanationsInitializationRetrieve=predictionExplanationsInitializationRetrieve)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsResidualsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsResidualsList}{}}}
\subsection{Method \code{ProjectsModelsResidualsList()}}{
Retrieve all residuals charts for a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsResidualsList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve all residuals charts for a model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelResidualsList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsResidualsList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsResidualsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsResidualsRetrieve}{}}}
\subsection{Method \code{ProjectsModelsResidualsRetrieve()}}{
Retrieve the residuals chart data from a single source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsResidualsRetrieve(projectId, modelId, source, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{validation, crossValidation, holdout} > Source of the data.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the residuals chart data from a single source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelResidualsList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsResidualsRetrieve(projectId, modelId, source)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsRocCurveList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsRocCurveList}{}}}
\subsection{Method \code{ProjectsModelsRocCurveList()}}{
Retrieve all available ROC curves for model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsRocCurveList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve all available ROC curves for model. The response will include a json list of all available ROC curves, in the same format as the response from :http:get:`/api/v2/projects/(projectId)/models/(modelId)/rocCurve/(source)/`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of all of the available ROC curves for a model.
\itemize{
}
\item \strong{\code{403}} Invalid Permissions
\itemize{
}
\item \strong{\code{404}} This resource does not exist.
\itemize{
}
\item \strong{\code{422}} Unsupervised mode projects do not have ROC curves
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelRocCurveListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsRocCurveList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsRocCurveRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsRocCurveRetrieve}{}}}
\subsection{Method \code{ProjectsModelsRocCurveRetrieve()}}{
Retrieve the ROC curve data from a single source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsRocCurveRetrieve(projectId, modelId, source, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{source}}{Enum < \link{backtest_9, backtest_3, backtest_20, crossValidation, backtest_6, backtest_17, backtest_18, backtest_12, backtest_11, validation, backtest_10, backtest_16, backtest_15, backtest_8, backtest_19, backtest_5, backtest_13, backtest_2, backtest_4, backtest_14, holdout, backtest_7} > Source of the data}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the ROC curve data from a single source. The response includes an array of pointsshowing the performance of the model at different thresholds for classification, and arrays of sample predictions for both the positive and negative classes.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} ROC curve data from a single source.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelRocCurveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
source <- 'source_example' # character | Source of the data

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsRocCurveRetrieve(projectId, modelId, source)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsShapImpactCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsShapImpactCreate}{}}}
\subsection{Method \code{ProjectsModelsShapImpactCreate()}}{
Create a Shap based Feature Impact.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsShapImpactCreate(
  projectId,
  modelId,
  featureImpactCreatePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{featureImpactCreatePayload}}{\link{FeatureImpactCreatePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a Shap based Feature Impact with a model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
featureImpactCreatePayload <- FeatureImpactCreatePayload$new() # FeatureImpactCreatePayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsShapImpactCreate(projectId, modelId, featureImpactCreatePayload=featureImpactCreatePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsShapImpactList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsShapImpactList}{}}}
\subsection{Method \code{ProjectsModelsShapImpactList()}}{
Retrieve Feature Impact for a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsShapImpactList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Feature Impact for a model. Shap impact is computed by calculating the shap values on a sample of training data and then taking the mean absolute value for each column. The larger value of impact indicate more important feature.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve Feature Impact for a model.
\itemize{
}
\item \strong{\code{404}} Feature Impact was not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{ShapImpactRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsShapImpactList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsWordCloudList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsWordCloudList}{}}}
\subsection{Method \code{ProjectsModelsWordCloudList()}}{
Retrieve word cloud data for a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsModelsWordCloudList(
  projectId,
  modelId,
  excludeStopWords = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{excludeStopWords}}{Enum < \link{false, False, true, True} > Set to true if you want stopwords excluded from the response.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve word cloud data for a model. Not all models will have word cloud data available, even when they use text features.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{WordCloudRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
excludeStopWords <- 'excludeStopWords_example' # character | Set to true if you want stopwords excluded from the response.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsModelsWordCloudList(projectId, modelId, excludeStopWords=excludeStopWords)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsMulticategoricalInvalidFormatFileList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsMulticategoricalInvalidFormatFileList}{}}}
\subsection{Method \code{ProjectsMulticategoricalInvalidFormatFileList()}}{
Get file with format errors of potential multicategorical features.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsMulticategoricalInvalidFormatFileList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The ID of the project this request is associated with.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get file with format errors of potential multicategorical features.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} File with format errors of potential multicategorical features.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The ID of the project this request is associated with.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsMulticategoricalInvalidFormatFileList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsMulticategoricalInvalidFormatList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsMulticategoricalInvalidFormatList}{}}}
\subsection{Method \code{ProjectsMulticategoricalInvalidFormatList()}}{
Retrieve multicategorical data quality log.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsMulticategoricalInvalidFormatList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The ID of the project this request is associated with.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve multicategorical data quality log.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data quality log for multicategorical features.
\itemize{
}
\item \strong{\code{422}} Not a data quality enabled project
\itemize{
}
}
}

\subsection{Returns}{
\link{MulticategoricalInvalidFormatResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The ID of the project this request is associated with.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsMulticategoricalInvalidFormatList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPayoffMatricesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPayoffMatricesCreate}{}}}
\subsection{Method \code{ProjectsPayoffMatricesCreate()}}{
Create a payoff matrix.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPayoffMatricesCreate(
  projectId,
  payoffMatricesCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{payoffMatricesCreate}}{\link{PayoffMatricesCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a payoff matrix associated with a project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
payoffMatricesCreate <- PayoffMatricesCreate$new() # PayoffMatricesCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPayoffMatricesCreate(projectId, payoffMatricesCreate=payoffMatricesCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPayoffMatricesDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPayoffMatricesDelete}{}}}
\subsection{Method \code{ProjectsPayoffMatricesDelete()}}{
Delete a payoff matrix in a project.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPayoffMatricesDelete(projectId, payoffMatrixId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{payoffMatrixId}}{character. ObjectId of the payoff matrix.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a payoff matrix in a project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Payoff matrix deleted successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
payoffMatrixId <- 'payoffMatrixId_example' # character | ObjectId of the payoff matrix.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPayoffMatricesDelete(projectId, payoffMatrixId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPayoffMatricesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPayoffMatricesList}{}}}
\subsection{Method \code{ProjectsPayoffMatricesList()}}{
List of all payoff matrices for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPayoffMatricesList(offset, limit, projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Number of payoff matrices to skip.}

\item{\code{limit}}{integer. Number of payoff matrices to return.}

\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of all payoff matrices for a project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of payoff matrices.
\itemize{
}
}
}

\subsection{Returns}{
\link{PayoffMatricesListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of payoff matrices to skip.
limit <- 100 # integer | Number of payoff matrices to return.
projectId <- 'projectId_example' # character | The project ID

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPayoffMatricesList(offset, limit, projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPayoffMatricesPut"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPayoffMatricesPut}{}}}
\subsection{Method \code{ProjectsPayoffMatricesPut()}}{
Update a payoff matrix.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPayoffMatricesPut(
  projectId,
  payoffMatrixId,
  payoffMatricesCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{payoffMatrixId}}{character. ObjectId of the payoff matrix.}

\item{\code{payoffMatricesCreate}}{\link{PayoffMatricesCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update all fields in a payoff matrix, including values and label.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Updated payoff matrix values and label.
\itemize{
}
}
}

\subsection{Returns}{
\link{PayoffMatricesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
payoffMatrixId <- 'payoffMatrixId_example' # character | ObjectId of the payoff matrix.
payoffMatricesCreate <- PayoffMatricesCreate$new() # PayoffMatricesCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPayoffMatricesPut(projectId, payoffMatrixId, payoffMatricesCreate=payoffMatricesCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsCreate}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsCreate()}}{
Create a new PredictionExplanations object (and its accompanying PredictionExplanationsRecord).
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPredictionExplanationsCreate(
  projectId,
  predictionExplanationsCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{predictionExplanationsCreate}}{\link{PredictionExplanationsCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new PredictionExplanations object (and its accompanying PredictionExplanationsRecord). In order to successfully create PredictionExplanations for a particular model and dataset, you must first - Compute feature impact for the model via :http:post:`/api/v2/projects/(projectId)/models/(modelId)/featureImpact/` - Compute a PredictionExplanationsInitialization for the model via :http:post:`/api/v2/projects/(projectId)/models/(modelId)/predictionExplanationsInitialization/` - Compute predictions for the model and dataset via :http:post:`/api/v2/projects/(projectId)/predictions/` `thresholdHigh` and `thresholdLow` are optional filters applied to speed up computation. When at least one is specified, only the selected outlier rows will have prediction explanations computed. Rows are considered to be outliers if their predicted value (in case of regression projects) or probability of being the positive class (in case of classification projects) isless than `thresholdLow` or greater than `thresholdHigh`. If neither is specified, prediction explanations will be computed for all rows.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The request was accepted and will be worked on.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsCreate <- PredictionExplanationsCreate$new() # PredictionExplanationsCreate |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsCreate(projectId, predictionExplanationsCreate=predictionExplanationsCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsList}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsList()}}{
Retrieve stored Prediction Explanations.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPredictionExplanationsList(
  limit,
  projectId,
  predictionExplanationsId,
  offset = 0,
  excludeAdjustedPredictions = "true",
  predictionExplanationsRetrieve = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change and a new maximum limit may be imposed without notice.}

\item{\code{projectId}}{character. The project ID}

\item{\code{predictionExplanationsId}}{character. The ID of the PredictionExplanationsRecord to retrieve.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{excludeAdjustedPredictions}}{Enum < \link{false, False, true, True} > Whether to include adjusted prediction in PredictionExplanationsRow response.}

\item{\code{predictionExplanationsRetrieve}}{\link{PredictionExplanationsRetrieve}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve stored Prediction Explanations. Each PredictionExplanationsRow retrieved corresponds to a row of the prediction dataset, although some rows may not have had prediction explanations computed depending on the thresholds selected.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 3000 # integer | At most this many results are returned. The default may change and a new maximum limit may be imposed without notice.
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.
offset <- 0 # integer | This many results will be skipped.
excludeAdjustedPredictions <- "true" # character | Whether to include adjusted prediction in PredictionExplanationsRow response.
predictionExplanationsRetrieve <- PredictionExplanationsRetrieve$new() # PredictionExplanationsRetrieve |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsList(limit, projectId, predictionExplanationsId, offset=offset, excludeAdjustedPredictions=excludeAdjustedPredictions, predictionExplanationsRetrieve=predictionExplanationsRetrieve)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsRecordsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsRecordsDelete}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsRecordsDelete()}}{
Delete saved Prediction Explanations.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPredictionExplanationsRecordsDelete(
  projectId,
  predictionExplanationsId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{predictionExplanationsId}}{character. The ID of the PredictionExplanationsRecord to retrieve.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete saved Prediction Explanations. Deletes both the actual prediction explanations and the corresponding PredictionExplanationsRecord.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The object was deleted successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsDelete(projectId, predictionExplanationsId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsRecordsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsRecordsList}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsRecordsList()}}{
List PredictionExplanationsRecord objects for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPredictionExplanationsRecordsList(
  projectId,
  offset = 0,
  limit = 100,
  modelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{modelId}}{character. If specified, only prediction explanations records computed for this model will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List PredictionExplanationsRecord objects for a project. These contain metadata about the computed prediction explanations and the location at which the PredictionExplanations can be retrieved.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The object was found and returned successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictionExplanationsRecordList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
modelId <- 'modelId_example' # character | If specified, only prediction explanations records computed for this model will be returned.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsList(projectId, offset=offset, limit=limit, modelId=modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsRecordsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsRecordsRetrieve}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsRecordsRetrieve()}}{
Retrieve a PredictionExplanationsRecord object.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsPredictionExplanationsRecordsRetrieve(
  projectId,
  predictionExplanationsId,
  predictionExplanationsRecord = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{predictionExplanationsId}}{character. The ID of the PredictionExplanationsRecord to retrieve.}

\item{\code{predictionExplanationsRecord}}{\link{PredictionExplanationsRecord}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a PredictionExplanationsRecord object. A PredictionExplanationsRecord contains metadata about the computed prediction explanations and the location at which the PredictionExplanations can be retrieved.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The object was found and returned successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.
predictionExplanationsRecord <- PredictionExplanationsRecord$new() # PredictionExplanationsRecord |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsRetrieve(projectId, predictionExplanationsId, predictionExplanationsRecord=predictionExplanationsRecord)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsShapMatricesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsShapMatricesCreate}{}}}
\subsection{Method \code{ProjectsShapMatricesCreate()}}{
Calculate a matrix with SHAP based prediction explanations scores.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsShapMatricesCreate(
  projectId,
  createShapMatrixPayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{createShapMatrixPayload}}{\link{CreateShapMatrixPayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Submit a request to calculate a matrix with SHAP based prediction explanations scores.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
createShapMatrixPayload <- CreateShapMatrixPayload$new() # CreateShapMatrixPayload |

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsShapMatricesCreate(projectId, createShapMatrixPayload=createShapMatrixPayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsShapMatricesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsShapMatricesList}{}}}
\subsection{Method \code{ProjectsShapMatricesList()}}{
List SHAP matrix records.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsShapMatricesList(projectId, offset = 0, limit = 100, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of available SHAP matrix records.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ShapMatrixListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsShapMatricesList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsShapMatricesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsShapMatricesRetrieve}{}}}
\subsection{Method \code{ProjectsShapMatricesRetrieve()}}{
Get matrix with SHAP prediction explanations scores.
Produces: "application/json", "text/csv"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$ProjectsShapMatricesRetrieve(projectId, shapMatrixId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{shapMatrixId}}{character. The SHAP matrix ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get matrix with SHAP prediction explanations scores.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ShapMatrixRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
shapMatrixId <- 'shapMatrixId_example' # character | The SHAP matrix ID.

api.instance <- InsightsApi$new()
result <- api.instance$ProjectsShapMatricesRetrieve(projectId, shapMatrixId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InsightsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
