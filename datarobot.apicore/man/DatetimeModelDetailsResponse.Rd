% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datetime_model_details_response.R
\docType{class}
\name{DatetimeModelDetailsResponse}
\alias{DatetimeModelDetailsResponse}
\title{DatetimeModelDetailsResponse}
\format{
An \code{R6Class} generator object
}
\description{
DatetimeModelDetailsResponse Class
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{backtests}}{list( \link{BacktestStatusResponse} ) information on each backtesting fold of the model}

\item{\code{blueprintId}}{character the blueprint used to construct the model}

\item{\code{dataSelectionMethod}}{character Identifies which setting defines the training size of the model when making predictions and scoring.}

\item{\code{effectiveFeatureDerivationWindowEnd}}{integer Only available for time series projects. How many timeUnits into the past relative to the forecast point the feature derivation window should end.}

\item{\code{effectiveFeatureDerivationWindowStart}}{integer Only available for time series projects. How many timeUnits into the past relative to the forecast point the user needs to provide history for at prediction time. This can differ from the `featureDerivationWindowStart` set on the project due to the differencing method and period selected.}

\item{\code{featurelistId}}{character the ID of the featurelist used by the model}

\item{\code{featurelistName}}{character the name of the featurelist used by the model}

\item{\code{forecastWindowEnd}}{integer Only available for time series projects. How many timeUnits into the future relative to the forecast point the forecast window should end.}

\item{\code{forecastWindowStart}}{integer Only available for time series projects. How many timeUnits into the future relative to the forecast point the forecast window should start.}

\item{\code{holdoutScore}}{numeric the holdout score of the model according to the project metric, if the score is available and the holdout is unlocked}

\item{\code{holdoutStatus}}{character the status of the holdout fold}

\item{\code{id}}{character the ID of the model}

\item{\code{isFrozen}}{character indicating whether the model is frozen, i.e. uses tuning parameters from a parent model}

\item{\code{isStarred}}{character whether the model has been starred}

\item{\code{linkFunction}}{character the link function the final modeler uses in the blueprint. If no link function exists, returns null}

\item{\code{metrics}}{object Object where each metric has validation, backtesting, backtestingScores and holdout scores reported, or null if they have not been computed. The `validation` score will be the score of the first backtest, which will be computed during initial model training.  The `backtesting` and  `backtestingScores` scores are computed when requested via :http:post:`/api/v2/projects/(projectId)/datetimeModels/(modelId)/backtests/`. The `backtesting` score is the average score across all backtests. The `backtestingScores` is an array of scores for each backtest, with the scores reported as null if the backtest score is unavailable. The `holdout` score is the score against the holdout data, using the training data defined in `trainingInfo`.}

\item{\code{modelCategory}}{character indicates what kind of model it is - will be `prime` for DataRobot Prime models, `blend` for blender models, `scaleout` for scaleout models, and `model` for all other models}

\item{\code{modelFamily}}{character the family model belongs to, e.g. SVM, GMB, etc.}

\item{\code{modelNumber}}{integer number of the model on leaderboard.}

\item{\code{modelType}}{character identifies the model, e.g. `Nystroem Kernel SVM Regressor`}

\item{\code{monotonicDecreasingFeaturelistId}}{character the ID of the featurelist that defines the set of features with a monotonically decreasing relationship to the target. If null, no such constraints are enforced.}

\item{\code{monotonicIncreasingFeaturelistId}}{character the ID of the featurelist that defines the set of features with a monotonically increasing relationship to the target. If null, no such constraints are enforced.}

\item{\code{parentModelId}}{character if this model is frozen, this is the ID of the parent model. Otherwise Null.}

\item{\code{predictionThreshold}}{numeric threshold used for binary classification in predictions.}

\item{\code{predictionThresholdReadOnly}}{character indicates whether modification of a predictions threshold is forbidden. Since v2.22 threshold modification is allowed.}

\item{\code{processes}}{list( character ) list of processes used by the model}

\item{\code{projectId}}{character the ID of the project to which the model belongs}

\item{\code{samplePct}}{character always null for datetime models}

\item{\code{samplingMethod}}{character \link{optional} indicates sampling method used to select training data. For row-based project this is the way how requested number of rows are selected.For other projects (duration-based, start/end, project settings) - how specified percent of rows (timeWindowSamplePct) is selected from specified time window.}

\item{\code{supportsComposableMl}}{character indicates whether this model is supported in Composable ML.}

\item{\code{supportsMonotonicConstraints}}{character whether this model supports enforcing monotonic constraints}

\item{\code{timeWindowSamplePct}}{integer An integer between 1 and 99, indicating the percentage of sampling within the time window. The points kept are determined by samplingMethod option. Will be null if no sampling was specified.}

\item{\code{trainingDuration}}{character the duration spanned by the dates in the partition column for the data used to train the model}

\item{\code{trainingEndDate}}{character the end date of the dates in the partition column for the data used to train the model}

\item{\code{trainingInfo}}{\link{TrainingInfoResponse}}

\item{\code{trainingRowCount}}{integer the number of rows used to train the model}

\item{\code{trainingStartDate}}{character the start date of the dates in the partition column for the data used to train the model}

\item{\code{windowsBasisUnit}}{character Only available for time series projects. Indicates which unit is the basis for the feature derivation window and the forecast window.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DatetimeModelDetailsResponse$new()}}
\item \href{#method-validate}{\code{DatetimeModelDetailsResponse$validate()}}
\item \href{#method-toJSON}{\code{DatetimeModelDetailsResponse$toJSON()}}
\item \href{#method-fromJSON}{\code{DatetimeModelDetailsResponse$fromJSON()}}
\item \href{#method-clone}{\code{DatetimeModelDetailsResponse$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
A function used to initialize an instance of this class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeModelDetailsResponse$new(
  backtests = NULL,
  blueprintId = NULL,
  dataSelectionMethod = NULL,
  effectiveFeatureDerivationWindowEnd = NULL,
  effectiveFeatureDerivationWindowStart = NULL,
  featurelistId = NULL,
  featurelistName = NULL,
  forecastWindowEnd = NULL,
  forecastWindowStart = NULL,
  holdoutScore = NULL,
  holdoutStatus = NULL,
  id = NULL,
  isFrozen = NULL,
  isStarred = NULL,
  linkFunction = NULL,
  metrics = NULL,
  modelCategory = NULL,
  modelFamily = NULL,
  modelNumber = NULL,
  modelType = NULL,
  monotonicDecreasingFeaturelistId = NULL,
  monotonicIncreasingFeaturelistId = NULL,
  parentModelId = NULL,
  predictionThreshold = NULL,
  predictionThresholdReadOnly = NULL,
  processes = NULL,
  projectId = NULL,
  samplePct = NULL,
  supportsComposableMl = NULL,
  supportsMonotonicConstraints = NULL,
  timeWindowSamplePct = NULL,
  trainingDuration = NULL,
  trainingEndDate = NULL,
  trainingInfo = NULL,
  trainingRowCount = NULL,
  trainingStartDate = NULL,
  windowsBasisUnit = NULL,
  samplingMethod = NULL,
  validateParams = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{backtests}}{information on each backtesting fold of the model}

\item{\code{blueprintId}}{the blueprint used to construct the model}

\item{\code{dataSelectionMethod}}{Identifies which setting defines the training size of the model when making predictions and scoring.}

\item{\code{effectiveFeatureDerivationWindowEnd}}{Only available for time series projects. How many timeUnits into the past relative to the forecast point the feature derivation window should end.}

\item{\code{effectiveFeatureDerivationWindowStart}}{Only available for time series projects. How many timeUnits into the past relative to the forecast point the user needs to provide history for at prediction time. This can differ from the `featureDerivationWindowStart` set on the project due to the differencing method and period selected.}

\item{\code{featurelistId}}{the ID of the featurelist used by the model}

\item{\code{featurelistName}}{the name of the featurelist used by the model}

\item{\code{forecastWindowEnd}}{Only available for time series projects. How many timeUnits into the future relative to the forecast point the forecast window should end.}

\item{\code{forecastWindowStart}}{Only available for time series projects. How many timeUnits into the future relative to the forecast point the forecast window should start.}

\item{\code{holdoutScore}}{the holdout score of the model according to the project metric, if the score is available and the holdout is unlocked}

\item{\code{holdoutStatus}}{the status of the holdout fold}

\item{\code{id}}{the ID of the model}

\item{\code{isFrozen}}{indicating whether the model is frozen, i.e. uses tuning parameters from a parent model}

\item{\code{isStarred}}{whether the model has been starred}

\item{\code{linkFunction}}{the link function the final modeler uses in the blueprint. If no link function exists, returns null}

\item{\code{metrics}}{Object where each metric has validation, backtesting, backtestingScores and holdout scores reported, or null if they have not been computed. The `validation` score will be the score of the first backtest, which will be computed during initial model training.  The `backtesting` and  `backtestingScores` scores are computed when requested via :http:post:`/api/v2/projects/(projectId)/datetimeModels/(modelId)/backtests/`. The `backtesting` score is the average score across all backtests. The `backtestingScores` is an array of scores for each backtest, with the scores reported as null if the backtest score is unavailable. The `holdout` score is the score against the holdout data, using the training data defined in `trainingInfo`.}

\item{\code{modelCategory}}{indicates what kind of model it is - will be `prime` for DataRobot Prime models, `blend` for blender models, `scaleout` for scaleout models, and `model` for all other models}

\item{\code{modelFamily}}{the family model belongs to, e.g. SVM, GMB, etc.}

\item{\code{modelNumber}}{number of the model on leaderboard.}

\item{\code{modelType}}{identifies the model, e.g. `Nystroem Kernel SVM Regressor`}

\item{\code{monotonicDecreasingFeaturelistId}}{the ID of the featurelist that defines the set of features with a monotonically decreasing relationship to the target. If null, no such constraints are enforced.}

\item{\code{monotonicIncreasingFeaturelistId}}{the ID of the featurelist that defines the set of features with a monotonically increasing relationship to the target. If null, no such constraints are enforced.}

\item{\code{parentModelId}}{if this model is frozen, this is the ID of the parent model. Otherwise Null.}

\item{\code{predictionThreshold}}{threshold used for binary classification in predictions.}

\item{\code{predictionThresholdReadOnly}}{indicates whether modification of a predictions threshold is forbidden. Since v2.22 threshold modification is allowed.}

\item{\code{processes}}{list of processes used by the model}

\item{\code{projectId}}{the ID of the project to which the model belongs}

\item{\code{samplePct}}{always null for datetime models}

\item{\code{supportsComposableMl}}{indicates whether this model is supported in Composable ML.}

\item{\code{supportsMonotonicConstraints}}{whether this model supports enforcing monotonic constraints}

\item{\code{timeWindowSamplePct}}{An integer between 1 and 99, indicating the percentage of sampling within the time window. The points kept are determined by samplingMethod option. Will be null if no sampling was specified.}

\item{\code{trainingDuration}}{the duration spanned by the dates in the partition column for the data used to train the model}

\item{\code{trainingEndDate}}{the end date of the dates in the partition column for the data used to train the model}

\item{\code{trainingRowCount}}{the number of rows used to train the model}

\item{\code{trainingStartDate}}{the start date of the dates in the partition column for the data used to train the model}

\item{\code{windowsBasisUnit}}{Only available for time series projects. Indicates which unit is the basis for the feature derivation window and the forecast window.}

\item{\code{samplingMethod}}{indicates sampling method used to select training data. For row-based project this is the way how requested number of rows are selected.For other projects (duration-based, start/end, project settings) - how specified percent of rows (timeWindowSamplePct) is selected from specified time window.}

\item{\code{validateParams}}{An optional param for auto validating this object's parameters before initialization. Default FALSE.}

\item{\code{...}}{Any additional keyword arguments to be passed into this object for initialization.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
A helper function that provides public access to the private validateProps function. This allows users the ability
to programmatically validate objects before sending them to DataRobot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeModelDetailsResponse$validate()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
A helper function that serializes this object into a JSON encoded string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeModelDetailsResponse$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
A helper function that deserializes a JSON string into an instance of this class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeModelDetailsResponse$fromJSON(
  DatetimeModelDetailsResponseJson,
  validateParams = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{DatetimeModelDetailsResponseJson}}{A JSON encoded string representation of a class instance.}

\item{\code{validateParams}}{An optional param for auto validating this object's parameters after deserialization. Default FALSE.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeModelDetailsResponse$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
