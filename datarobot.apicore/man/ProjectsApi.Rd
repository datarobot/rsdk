% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projects_api.R
\docType{class}
\name{ProjectsApi}
\alias{ProjectsApi}
\title{Projects operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Projects
}
\examples{

## ------------------------------------------------
## Method `ProjectsApi$AccessControlList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
projectId <- 'projectId_example' # character | The project ID
username <- 'username_example' # character | Optional, only return the access control information for a user with this username.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID.

api.instance <- ProjectsApi$new()
result <- api.instance$AccessControlList(offset, limit, projectId, username=username, userId=userId)
}

## ------------------------------------------------
## Method `ProjectsApi$AccessControlPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
sharingUpdateOrRemove <- SharingUpdateOrRemove$new() # SharingUpdateOrRemove | 

api.instance <- ProjectsApi$new()
result <- api.instance$AccessControlPatchMany(projectId, sharingUpdateOrRemove=sharingUpdateOrRemove)
}

## ------------------------------------------------
## Method `ProjectsApi$AutopilotCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
autopilot <- Autopilot$new() # Autopilot | 

api.instance <- ProjectsApi$new()
result <- api.instance$AutopilotCreate(projectId, autopilot=autopilot)
}

## ------------------------------------------------
## Method `ProjectsApi$AutopilotsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
autopilotStart <- AutopilotStart$new() # AutopilotStart | 

api.instance <- ProjectsApi$new()
result <- api.instance$AutopilotsCreate(projectId, autopilotStart=autopilotStart)
}

## ------------------------------------------------
## Method `ProjectsApi$BatchTypeTransformFeaturesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to create the feature in.
batchFeatureTransform <- BatchFeatureTransform$new() # BatchFeatureTransform | 

api.instance <- ProjectsApi$new()
result <- api.instance$BatchTypeTransformFeaturesCreate(projectId, batchFeatureTransform=batchFeatureTransform)
}

## ------------------------------------------------
## Method `ProjectsApi$BatchTypeTransformFeaturesResultRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project containing transformed features.
jobId <- 56 # integer | ID of the batch variable type transformation job.
batchFeatureTransform <- BatchFeatureTransform$new() # BatchFeatureTransform | 

api.instance <- ProjectsApi$new()
result <- api.instance$BatchTypeTransformFeaturesResultRetrieve(projectId, jobId, batchFeatureTransform=batchFeatureTransform)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarCountryCodesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarCountryCodesList(offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarEventsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve specific series for. If specified, retrieves only series specific to the event and common events.
startDate <- 'startDate_example' # character | The start of the date range to return, inclusive. If not specified, start date for the first calendar event will be used.
endDate <- 'endDate_example' # character | The end of the date range to return, exclusive. If not specified, end date capturing the last calendar event will be used.
offset <- 0 # integer | Optional (default: `0`), this many results will be skipped.
limit <- 1000 # integer | Optional (default: `1000`), at most this many results will be returned.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarEventsList(projectId, seriesId=seriesId, startDate=startDate, endDate=endDate, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsAccessControlList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.
username <- 'username_example' # character | Optional, only return the access control information for a user with this username. Should not be specified if `userId` is specified.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID. Should not be specified if `username` is specified.
offset <- 0 # integer | Optional (default: `0`), this many results will be skipped.
limit <- 0 # integer | Optional (default: `0`), at most this many results will be returned. If `0`, all results will be returned.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsAccessControlList(calendarId, username=username, userId=userId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsAccessControlPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.
calendarAccessControlUpdate <- CalendarAccessControlUpdate$new() # CalendarAccessControlUpdate | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsAccessControlPatchMany(calendarId, calendarAccessControlUpdate=calendarAccessControlUpdate)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsDelete(calendarId)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsFileUploadCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
calendarFileUpload <- CalendarFileUpload$new() # CalendarFileUpload | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsFileUploadCreate(calendarFileUpload=calendarFileUpload)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsFromCountryCodeCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
preloadedCalendar <- PreloadedCalendar$new() # PreloadedCalendar | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsFromCountryCodeCreate(preloadedCalendar=preloadedCalendar)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsFromDatasetCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
calendarFromDataset <- CalendarFromDataset$new() # CalendarFromDataset | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsFromDatasetCreate(calendarFromDataset=calendarFromDataset)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Optional (default: `0`), this many results will be skipped.
limit <- 0 # integer | Optional (default: `0`), at most this many results will be returned. If `0`, all results will be returned.
projectId <- 'projectId_example' # character | Optional, if provided will filter returned calendars to those being used in the specified project.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsList(offset, limit, projectId=projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.
calendarNameUpdate <- CalendarNameUpdate$new() # CalendarNameUpdate | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsPatch(calendarId, calendarNameUpdate=calendarNameUpdate)
}

## ------------------------------------------------
## Method `ProjectsApi$CalendarsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsRetrieve(calendarId)
}

## ------------------------------------------------
## Method `ProjectsApi$CleanupJobsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectNuke <- ProjectNuke$new() # ProjectNuke | 

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsCreate(projectNuke=projectNuke)
}

## ------------------------------------------------
## Method `ProjectsApi$CleanupJobsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsDelete(statusId)
}

## ------------------------------------------------
## Method `ProjectsApi$CleanupJobsDownloadList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsDownloadList(statusId)
}

## ------------------------------------------------
## Method `ProjectsApi$CleanupJobsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsList()
}

## ------------------------------------------------
## Method `ProjectsApi$CleanupJobsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsRetrieve(statusId)
}

## ------------------------------------------------
## Method `ProjectsApi$CleanupJobsSummaryList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsSummaryList(statusId)
}

## ------------------------------------------------
## Method `ProjectsApi$ClonesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectClone <- ProjectClone$new() # ProjectClone | 

api.instance <- ProjectsApi$new()
result <- api.instance$ClonesCreate(projectClone=projectClone)
}

## ------------------------------------------------
## Method `ProjectsApi$ConfigureAndStartAutopilot`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
aim <- Aim$new() # Aim | 

api.instance <- ProjectsApi$new()
result <- api.instance$ConfigureAndStartAutopilot(projectId, aim=aim)
}

## ------------------------------------------------
## Method `ProjectsApi$Create`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectCreate <- ProjectCreate$new() # ProjectCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$Create(projectCreate=projectCreate)
}

## ------------------------------------------------
## Method `ProjectsApi$CrossSeriesPropertiesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
crossSeriesGroupByColumnValidatePayload <- CrossSeriesGroupByColumnValidatePayload$new() # CrossSeriesGroupByColumnValidatePayload | 

api.instance <- ProjectsApi$new()
result <- api.instance$CrossSeriesPropertiesCreate(projectId, crossSeriesGroupByColumnValidatePayload=crossSeriesGroupByColumnValidatePayload)
}

## ------------------------------------------------
## Method `ProjectsApi$Delete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$Delete(projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$DeletedProjectsCountList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
searchFor <- 'searchFor_example' # character | Project or dataset name to filter by
creator <- 'creator_example' # character | Creator ID to filter projects by
organization <- 'organization_example' # character | ID of organization that projects should belong to. Given project belongs to the organization the user who created the project is part of that organization.If there are no users in organization, then no projects will match the query.
deletedBefore <- 'deletedBefore_example' # character | ISO-8601 formatted date projects were deleted before
deletedAfter <- 'deletedAfter_example' # character | ISO-8601 formatted date projects were deleted after
projectId <- 'projectId_example' # character | Project ID to search
limit <- 56 # integer | Count deleted projects until specified value reached.

api.instance <- ProjectsApi$new()
result <- api.instance$DeletedProjectsCountList(searchFor=searchFor, creator=creator, organization=organization, deletedBefore=deletedBefore, deletedAfter=deletedAfter, projectId=projectId, limit=limit)
}

## ------------------------------------------------
## Method `ProjectsApi$DeletedProjectsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
searchFor <- 'searchFor_example' # character | Project or dataset name to filter by
creator <- 'creator_example' # character | Creator ID to filter projects by
organization <- 'organization_example' # character | ID of organization that projects should belong to. Given project belongs to the organization the user who created the project is part of that organization.If there are no users in organization, then no projects will match the query.
deletedBefore <- 'deletedBefore_example' # character | ISO-8601 formatted date projects were deleted before
deletedAfter <- 'deletedAfter_example' # character | ISO-8601 formatted date projects were deleted after
projectId <- 'projectId_example' # character | Project ID to search
limit <- 20 # integer | At most this many results are returned.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "deletedOn" # character | Order deleted projects by

api.instance <- ProjectsApi$new()
result <- api.instance$DeletedProjectsList(searchFor=searchFor, creator=creator, organization=organization, deletedBefore=deletedBefore, deletedAfter=deletedAfter, projectId=projectId, limit=limit, offset=offset, orderBy=orderBy)
}

## ------------------------------------------------
## Method `ProjectsApi$DeletedProjectsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
projectRecover <- ProjectRecover$new() # ProjectRecover | 

api.instance <- ProjectsApi$new()
result <- api.instance$DeletedProjectsPatch(projectId, projectRecover=projectRecover)
}

## ------------------------------------------------
## Method `ProjectsApi$DiscardedFeaturesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
search <- 'search_example' # character | Case insensitive search against discarded feature names.

api.instance <- ProjectsApi$new()
result <- api.instance$DiscardedFeaturesList(projectId, search=search)
}

## ------------------------------------------------
## Method `ProjectsApi$ExternalTimeSeriesBaselineDataValidationJobsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
externalTsBaselinePayload <- ExternalTSBaselinePayload$new() # ExternalTSBaselinePayload | 

api.instance <- ProjectsApi$new()
result <- api.instance$ExternalTimeSeriesBaselineDataValidationJobsCreate(projectId, externalTsBaselinePayload=externalTsBaselinePayload)
}

## ------------------------------------------------
## Method `ProjectsApi$ExternalTimeSeriesBaselineDataValidationJobsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve the validation job information from.
baselineValidationJobId <- 'baselineValidationJobId_example' # character | The id for the validation job

api.instance <- ProjectsApi$new()
result <- api.instance$ExternalTimeSeriesBaselineDataValidationJobsRetrieve(projectId, baselineValidationJobId)
}

## ------------------------------------------------
## Method `ProjectsApi$FeatureDiscoveryDatasetDownloadList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
datasetId <- 'datasetId_example' # character | The ID of the dataset to use for the prediction.

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryDatasetDownloadList(projectId, datasetId=datasetId)
}

## ------------------------------------------------
## Method `ProjectsApi$FeatureDiscoveryLogsDownloadList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryLogsDownloadList(projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$FeatureDiscoveryLogsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryLogsList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ProjectsApi$FeatureDiscoveryRecipeSQLsDownloadList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | Model ID to export recipe for
statusOnly <- "false" # character | Return status only for availability check

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryRecipeSQLsDownloadList(projectId, modelId=modelId, statusOnly=statusOnly)
}

## ------------------------------------------------
## Method `ProjectsApi$FeatureDiscoveryRecipeSqlExportsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
featureDiscoveryRecipeSqlsExport <- FeatureDiscoveryRecipeSQLsExport$new() # FeatureDiscoveryRecipeSQLsExport | 

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryRecipeSqlExportsCreate(projectId, featureDiscoveryRecipeSqlsExport=featureDiscoveryRecipeSqlsExport)
}

## ------------------------------------------------
## Method `ProjectsApi$FeatureHistogramsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
binLimit <- 60 # integer | maximum number of bins in the returned plot
projectId <- 'projectId_example' # character | The ID of the project
featureName <- 'featureName_example' # character | the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting) 
key <- 'key_example' # character | name of the top 50 key for which plot to be retrieved. (Only required for the Summarized categorical feature)

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureHistogramsRetrieve(binLimit, projectId, featureName, key=key)
}

## ------------------------------------------------
## Method `ProjectsApi$FeatureLineagesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve a lineage from.
featureLineageId <- 'featureLineageId_example' # character | id of a feature lineage object to return. You can access the id with  *ModelingFeatureRetrieveController*.

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureLineagesRetrieve(projectId, featureLineageId)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturelistsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
createFeaturelist <- CreateFeaturelist$new() # CreateFeaturelist | 

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsCreate(projectId, createFeaturelist=createFeaturelist)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturelistsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.
dryRun <- "false" # character | Preview the deletion results without actually deleting the featurelist.
deleteDependencies <- "false" # character | Automatically delete all dependencies of a featurelist. If false (default), will only delete the featurelist if it has no dependencies. The value of deleteDependencies will not be used if dryRun is true.If a featurelist has dependencies, deleteDependencies must be true for the request to succeed.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsDelete(projectId, featurelistId, dryRun=dryRun, deleteDependencies=deleteDependencies)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturelistsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsList(projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturelistsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.
updateFeaturelist <- UpdateFeaturelist$new() # UpdateFeaturelist | 

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsPatch(projectId, featurelistId, updateFeaturelist=updateFeaturelist)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturelistsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsRetrieve(projectId, featurelistId)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
forSegmentedAnalysis <- "false" # character | When True, features returned will be filtered to those usable for segmented analysis.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturesList(projectId, forSegmentedAnalysis=forSegmentedAnalysis)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturesMetricsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | The name of the feature to check
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturesMetricsList(featureName, projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturesMultiseriesPropertiesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID to retrieve multiseries properties from.
featureName <- 'featureName_example' # character | The feature to be used to the datetime partition column.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturesMultiseriesPropertiesList(projectId, featureName)
}

## ------------------------------------------------
## Method `ProjectsApi$FeaturesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The ID of the project
featureName <- 'featureName_example' # character | the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting) 

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturesRetrieve(projectId, featureName)
}

## ------------------------------------------------
## Method `ProjectsApi$HdfsProjectsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
hdfsProjectCreate <- HdfsProjectCreate$new() # HdfsProjectCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$HdfsProjectsCreate(hdfsProjectCreate=hdfsProjectCreate)
}

## ------------------------------------------------
## Method `ProjectsApi$JobsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
jobId <- 'jobId_example' # character | The job ID

api.instance <- ProjectsApi$new()
result <- api.instance$JobsDelete(projectId, jobId)
}

## ------------------------------------------------
## Method `ProjectsApi$JobsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
status <- 'status_example' # character | If provided, only jobs with the same status will be included in the results; otherwise, queued and inprogress jobs (but not errored jobs) will be returned.

api.instance <- ProjectsApi$new()
result <- api.instance$JobsList(projectId, status=status)
}

## ------------------------------------------------
## Method `ProjectsApi$JobsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
jobId <- 'jobId_example' # character | The job ID

api.instance <- ProjectsApi$new()
result <- api.instance$JobsRetrieve(projectId, jobId)
}

## ------------------------------------------------
## Method `ProjectsApi$List`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectName <- 'projectName_example' # character | if provided will filter returned projects for projects with matching names
projectId <- list(c('projectId_example')) # OneOfstringarray | if provided will filter returned projects with matching project IDs
orderBy <- 'orderBy_example' # character | if provided will order the results by this field
featureDiscovery <- 'featureDiscovery_example' # character | Return only feature discovery projects

api.instance <- ProjectsApi$new()
result <- api.instance$List(projectName=projectName, projectId=projectId, orderBy=orderBy, featureDiscovery=featureDiscovery)
}

## ------------------------------------------------
## Method `ProjectsApi$ModelingFeaturelistsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
createFeaturelist <- CreateFeaturelist$new() # CreateFeaturelist | 

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsCreate(projectId, createFeaturelist=createFeaturelist)
}

## ------------------------------------------------
## Method `ProjectsApi$ModelingFeaturelistsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.
dryRun <- "false" # character | Preview the deletion results without actually deleting the featurelist.
deleteDependencies <- "false" # character | Automatically delete all dependencies of a featurelist. If false (default), will only delete the featurelist if it has no dependencies. The value of deleteDependencies will not be used if dryRun is true.If a featurelist has dependencies, deleteDependencies must be true for the request to succeed.

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsDelete(projectId, featurelistId, dryRun=dryRun, deleteDependencies=deleteDependencies)
}

## ------------------------------------------------
## Method `ProjectsApi$ModelingFeaturelistsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
projectId <- 'projectId_example' # character | The project ID

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsList(offset, limit, projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$ModelingFeaturelistsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.
updateFeaturelist <- UpdateFeaturelist$new() # UpdateFeaturelist | 

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsPatch(projectId, featurelistId, updateFeaturelist=updateFeaturelist)
}

## ------------------------------------------------
## Method `ProjectsApi$ModelingFeaturelistsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsRetrieve(projectId, featurelistId)
}

## ------------------------------------------------
## Method `ProjectsApi$ModelingFeaturesFromDiscardedFeaturesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelingFeaturesCreateFromDiscarded <- ModelingFeaturesCreateFromDiscarded$new() # ModelingFeaturesCreateFromDiscarded | 

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturesFromDiscardedFeaturesCreate(projectId, modelingFeaturesCreateFromDiscarded=modelingFeaturesCreateFromDiscarded)
}

## ------------------------------------------------
## Method `ProjectsApi$ModelingFeaturesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
projectId <- 'projectId_example' # character | The project ID

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturesList(offset, limit, projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$ModelingFeaturesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The ID of the project
featureName <- 'featureName_example' # character | the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting) 

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturesRetrieve(projectId, featureName)
}

## ------------------------------------------------
## Method `ProjectsApi$MultiseriesIdsCrossSeriesPropertiesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve cross-series group-by columns for.
multiseriesId <- 'multiseriesId_example' # character | The name of the column to be used as the multiseries ID column.
crossSeriesGroupByColumns <- list(c('crossSeriesGroupByColumns_example')) # OneOfstringarray | The names of the columns to retrieve the validation status for. If not specified, all eligible columns will be returned.

api.instance <- ProjectsApi$new()
result <- api.instance$MultiseriesIdsCrossSeriesPropertiesList(projectId, multiseriesId, crossSeriesGroupByColumns=crossSeriesGroupByColumns)
}

## ------------------------------------------------
## Method `ProjectsApi$MultiseriesNamesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- ProjectsApi$new()
result <- api.instance$MultiseriesNamesList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ProjectsApi$MultiseriesPropertiesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
multiseriesPayload <- MultiseriesPayload$new() # MultiseriesPayload | 

api.instance <- ProjectsApi$new()
result <- api.instance$MultiseriesPropertiesCreate(projectId, multiseriesPayload=multiseriesPayload)
}

## ------------------------------------------------
## Method `ProjectsApi$Patch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
projectUpdate <- ProjectUpdate$new() # ProjectUpdate | 

api.instance <- ProjectsApi$new()
result <- api.instance$Patch(projectId, projectUpdate=projectUpdate)
}

## ------------------------------------------------
## Method `ProjectsApi$RelationshipsConfigurationList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
configId <- 'configId_example' # character | Id of Secondary Dataset Configuration

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationList(projectId, configId=configId)
}

## ------------------------------------------------
## Method `ProjectsApi$RelationshipsConfigurationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
relationshipsConfigCreate <- RelationshipsConfigCreate$new() # RelationshipsConfigCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationsCreate(relationshipsConfigCreate=relationshipsConfigCreate)
}

## ------------------------------------------------
## Method `ProjectsApi$RelationshipsConfigurationsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
relationshipsConfigurationId <- 'relationshipsConfigurationId_example' # character | Id of the relationships configuration to delete

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationsDelete(relationshipsConfigurationId)
}

## ------------------------------------------------
## Method `ProjectsApi$RelationshipsConfigurationsPut`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
relationshipsConfigurationId <- 'relationshipsConfigurationId_example' # character | Id of the relationships configuration to delete
relationshipsConfigCreate <- RelationshipsConfigCreate$new() # RelationshipsConfigCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationsPut(relationshipsConfigurationId, relationshipsConfigCreate=relationshipsConfigCreate)
}

## ------------------------------------------------
## Method `ProjectsApi$RelationshipsConfigurationsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
relationshipsConfigurationId <- 'relationshipsConfigurationId_example' # character | Id of the relationships configuration to delete

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationsRetrieve(relationshipsConfigurationId)
}

## ------------------------------------------------
## Method `ProjectsApi$Retrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$Retrieve(projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$SecondaryDatasetsConfigurationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
secondaryDatasetCreate <- SecondaryDatasetCreate$new() # SecondaryDatasetCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$SecondaryDatasetsConfigurationsCreate(projectId, secondaryDatasetCreate=secondaryDatasetCreate)
}

## ------------------------------------------------
## Method `ProjectsApi$SecondaryDatasetsConfigurationsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
secondaryDatasetConfigId <- 'secondaryDatasetConfigId_example' # character | Secondary dataset configuration ID

api.instance <- ProjectsApi$new()
result <- api.instance$SecondaryDatasetsConfigurationsDelete(projectId, secondaryDatasetConfigId)
}

## ------------------------------------------------
## Method `ProjectsApi$SecondaryDatasetsConfigurationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
featurelistId <- 'featurelistId_example' # character | feature list ID of the model
modelId <- 'modelId_example' # character | ID of the model
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
includeDeleted <- "false" # character | Include deleted records.

api.instance <- ProjectsApi$new()
result <- api.instance$SecondaryDatasetsConfigurationsList(projectId, featurelistId=featurelistId, modelId=modelId, offset=offset, limit=limit, includeDeleted=includeDeleted)
}

## ------------------------------------------------
## Method `ProjectsApi$SecondaryDatasetsConfigurationsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
secondaryDatasetConfigId <- 'secondaryDatasetConfigId_example' # character | Secondary dataset configuration ID

api.instance <- ProjectsApi$new()
result <- api.instance$SecondaryDatasetsConfigurationsRetrieve(projectId, secondaryDatasetConfigId)
}

## ------------------------------------------------
## Method `ProjectsApi$SegmentationTaskJobResultsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentationTaskId <- 'segmentationTaskId_example' # character | The ID of the segmentation task to check the status of.

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTaskJobResultsRetrieve(projectId, segmentationTaskId)
}

## ------------------------------------------------
## Method `ProjectsApi$SegmentationTasksCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentationTaskCreate <- SegmentationTaskCreate$new() # SegmentationTaskCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTasksCreate(projectId, segmentationTaskCreate=segmentationTaskCreate)
}

## ------------------------------------------------
## Method `ProjectsApi$SegmentationTasksList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 10 # integer | At most this many results are returned.

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTasksList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ProjectsApi$SegmentationTasksMappingsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentationTaskId <- 'segmentationTaskId_example' # character | The ID of the segmentation task.
offset <- 0 # integer | This many results will be skipped.
limit <- 10 # integer | At most this many results are returned.

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTasksMappingsList(projectId, segmentationTaskId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ProjectsApi$SegmentationTasksRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentationTaskId <- 'segmentationTaskId_example' # character | The ID of the segmentation task.

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTasksRetrieve(projectId, segmentationTaskId)
}

## ------------------------------------------------
## Method `ProjectsApi$SegmentsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentId <- 'segmentId_example' # character | The name of the segment
projectSegmentUpdate <- ProjectSegmentUpdate$new() # ProjectSegmentUpdate | 

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentsPatch(projectId, segmentId, projectSegmentUpdate=projectSegmentUpdate)
}

## ------------------------------------------------
## Method `ProjectsApi$StatusList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$StatusList(projectId)
}

## ------------------------------------------------
## Method `ProjectsApi$TypeTransformFeaturesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to create the feature in.
featureTransform <- FeatureTransform$new() # FeatureTransform | 

api.instance <- ProjectsApi$new()
result <- api.instance$TypeTransformFeaturesCreate(projectId, featureTransform=featureTransform)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ProjectsApi-new}{\code{ProjectsApi$new()}}
\item \href{#method-ProjectsApi-AccessControlList}{\code{ProjectsApi$AccessControlList()}}
\item \href{#method-ProjectsApi-AccessControlPatchMany}{\code{ProjectsApi$AccessControlPatchMany()}}
\item \href{#method-ProjectsApi-AutopilotCreate}{\code{ProjectsApi$AutopilotCreate()}}
\item \href{#method-ProjectsApi-AutopilotsCreate}{\code{ProjectsApi$AutopilotsCreate()}}
\item \href{#method-ProjectsApi-BatchTypeTransformFeaturesCreate}{\code{ProjectsApi$BatchTypeTransformFeaturesCreate()}}
\item \href{#method-ProjectsApi-BatchTypeTransformFeaturesResultRetrieve}{\code{ProjectsApi$BatchTypeTransformFeaturesResultRetrieve()}}
\item \href{#method-ProjectsApi-CalendarCountryCodesList}{\code{ProjectsApi$CalendarCountryCodesList()}}
\item \href{#method-ProjectsApi-CalendarEventsList}{\code{ProjectsApi$CalendarEventsList()}}
\item \href{#method-ProjectsApi-CalendarsAccessControlList}{\code{ProjectsApi$CalendarsAccessControlList()}}
\item \href{#method-ProjectsApi-CalendarsAccessControlPatchMany}{\code{ProjectsApi$CalendarsAccessControlPatchMany()}}
\item \href{#method-ProjectsApi-CalendarsDelete}{\code{ProjectsApi$CalendarsDelete()}}
\item \href{#method-ProjectsApi-CalendarsFileUploadCreate}{\code{ProjectsApi$CalendarsFileUploadCreate()}}
\item \href{#method-ProjectsApi-CalendarsFromCountryCodeCreate}{\code{ProjectsApi$CalendarsFromCountryCodeCreate()}}
\item \href{#method-ProjectsApi-CalendarsFromDatasetCreate}{\code{ProjectsApi$CalendarsFromDatasetCreate()}}
\item \href{#method-ProjectsApi-CalendarsList}{\code{ProjectsApi$CalendarsList()}}
\item \href{#method-ProjectsApi-CalendarsPatch}{\code{ProjectsApi$CalendarsPatch()}}
\item \href{#method-ProjectsApi-CalendarsRetrieve}{\code{ProjectsApi$CalendarsRetrieve()}}
\item \href{#method-ProjectsApi-CleanupJobsCreate}{\code{ProjectsApi$CleanupJobsCreate()}}
\item \href{#method-ProjectsApi-CleanupJobsDelete}{\code{ProjectsApi$CleanupJobsDelete()}}
\item \href{#method-ProjectsApi-CleanupJobsDownloadList}{\code{ProjectsApi$CleanupJobsDownloadList()}}
\item \href{#method-ProjectsApi-CleanupJobsList}{\code{ProjectsApi$CleanupJobsList()}}
\item \href{#method-ProjectsApi-CleanupJobsRetrieve}{\code{ProjectsApi$CleanupJobsRetrieve()}}
\item \href{#method-ProjectsApi-CleanupJobsSummaryList}{\code{ProjectsApi$CleanupJobsSummaryList()}}
\item \href{#method-ProjectsApi-ClonesCreate}{\code{ProjectsApi$ClonesCreate()}}
\item \href{#method-ProjectsApi-ConfigureAndStartAutopilot}{\code{ProjectsApi$ConfigureAndStartAutopilot()}}
\item \href{#method-ProjectsApi-Create}{\code{ProjectsApi$Create()}}
\item \href{#method-ProjectsApi-CrossSeriesPropertiesCreate}{\code{ProjectsApi$CrossSeriesPropertiesCreate()}}
\item \href{#method-ProjectsApi-Delete}{\code{ProjectsApi$Delete()}}
\item \href{#method-ProjectsApi-DeletedProjectsCountList}{\code{ProjectsApi$DeletedProjectsCountList()}}
\item \href{#method-ProjectsApi-DeletedProjectsList}{\code{ProjectsApi$DeletedProjectsList()}}
\item \href{#method-ProjectsApi-DeletedProjectsPatch}{\code{ProjectsApi$DeletedProjectsPatch()}}
\item \href{#method-ProjectsApi-DiscardedFeaturesList}{\code{ProjectsApi$DiscardedFeaturesList()}}
\item \href{#method-ProjectsApi-ExternalTimeSeriesBaselineDataValidationJobsCreate}{\code{ProjectsApi$ExternalTimeSeriesBaselineDataValidationJobsCreate()}}
\item \href{#method-ProjectsApi-ExternalTimeSeriesBaselineDataValidationJobsRetrieve}{\code{ProjectsApi$ExternalTimeSeriesBaselineDataValidationJobsRetrieve()}}
\item \href{#method-ProjectsApi-FeatureDiscoveryDatasetDownloadList}{\code{ProjectsApi$FeatureDiscoveryDatasetDownloadList()}}
\item \href{#method-ProjectsApi-FeatureDiscoveryLogsDownloadList}{\code{ProjectsApi$FeatureDiscoveryLogsDownloadList()}}
\item \href{#method-ProjectsApi-FeatureDiscoveryLogsList}{\code{ProjectsApi$FeatureDiscoveryLogsList()}}
\item \href{#method-ProjectsApi-FeatureDiscoveryRecipeSQLsDownloadList}{\code{ProjectsApi$FeatureDiscoveryRecipeSQLsDownloadList()}}
\item \href{#method-ProjectsApi-FeatureDiscoveryRecipeSqlExportsCreate}{\code{ProjectsApi$FeatureDiscoveryRecipeSqlExportsCreate()}}
\item \href{#method-ProjectsApi-FeatureHistogramsRetrieve}{\code{ProjectsApi$FeatureHistogramsRetrieve()}}
\item \href{#method-ProjectsApi-FeatureLineagesRetrieve}{\code{ProjectsApi$FeatureLineagesRetrieve()}}
\item \href{#method-ProjectsApi-FeaturelistsCreate}{\code{ProjectsApi$FeaturelistsCreate()}}
\item \href{#method-ProjectsApi-FeaturelistsDelete}{\code{ProjectsApi$FeaturelistsDelete()}}
\item \href{#method-ProjectsApi-FeaturelistsList}{\code{ProjectsApi$FeaturelistsList()}}
\item \href{#method-ProjectsApi-FeaturelistsPatch}{\code{ProjectsApi$FeaturelistsPatch()}}
\item \href{#method-ProjectsApi-FeaturelistsRetrieve}{\code{ProjectsApi$FeaturelistsRetrieve()}}
\item \href{#method-ProjectsApi-FeaturesList}{\code{ProjectsApi$FeaturesList()}}
\item \href{#method-ProjectsApi-FeaturesMetricsList}{\code{ProjectsApi$FeaturesMetricsList()}}
\item \href{#method-ProjectsApi-FeaturesMultiseriesPropertiesList}{\code{ProjectsApi$FeaturesMultiseriesPropertiesList()}}
\item \href{#method-ProjectsApi-FeaturesRetrieve}{\code{ProjectsApi$FeaturesRetrieve()}}
\item \href{#method-ProjectsApi-HdfsProjectsCreate}{\code{ProjectsApi$HdfsProjectsCreate()}}
\item \href{#method-ProjectsApi-JobsDelete}{\code{ProjectsApi$JobsDelete()}}
\item \href{#method-ProjectsApi-JobsList}{\code{ProjectsApi$JobsList()}}
\item \href{#method-ProjectsApi-JobsRetrieve}{\code{ProjectsApi$JobsRetrieve()}}
\item \href{#method-ProjectsApi-List}{\code{ProjectsApi$List()}}
\item \href{#method-ProjectsApi-ModelingFeaturelistsCreate}{\code{ProjectsApi$ModelingFeaturelistsCreate()}}
\item \href{#method-ProjectsApi-ModelingFeaturelistsDelete}{\code{ProjectsApi$ModelingFeaturelistsDelete()}}
\item \href{#method-ProjectsApi-ModelingFeaturelistsList}{\code{ProjectsApi$ModelingFeaturelistsList()}}
\item \href{#method-ProjectsApi-ModelingFeaturelistsPatch}{\code{ProjectsApi$ModelingFeaturelistsPatch()}}
\item \href{#method-ProjectsApi-ModelingFeaturelistsRetrieve}{\code{ProjectsApi$ModelingFeaturelistsRetrieve()}}
\item \href{#method-ProjectsApi-ModelingFeaturesFromDiscardedFeaturesCreate}{\code{ProjectsApi$ModelingFeaturesFromDiscardedFeaturesCreate()}}
\item \href{#method-ProjectsApi-ModelingFeaturesList}{\code{ProjectsApi$ModelingFeaturesList()}}
\item \href{#method-ProjectsApi-ModelingFeaturesRetrieve}{\code{ProjectsApi$ModelingFeaturesRetrieve()}}
\item \href{#method-ProjectsApi-MultiseriesIdsCrossSeriesPropertiesList}{\code{ProjectsApi$MultiseriesIdsCrossSeriesPropertiesList()}}
\item \href{#method-ProjectsApi-MultiseriesNamesList}{\code{ProjectsApi$MultiseriesNamesList()}}
\item \href{#method-ProjectsApi-MultiseriesPropertiesCreate}{\code{ProjectsApi$MultiseriesPropertiesCreate()}}
\item \href{#method-ProjectsApi-Patch}{\code{ProjectsApi$Patch()}}
\item \href{#method-ProjectsApi-RelationshipsConfigurationList}{\code{ProjectsApi$RelationshipsConfigurationList()}}
\item \href{#method-ProjectsApi-RelationshipsConfigurationsCreate}{\code{ProjectsApi$RelationshipsConfigurationsCreate()}}
\item \href{#method-ProjectsApi-RelationshipsConfigurationsDelete}{\code{ProjectsApi$RelationshipsConfigurationsDelete()}}
\item \href{#method-ProjectsApi-RelationshipsConfigurationsPut}{\code{ProjectsApi$RelationshipsConfigurationsPut()}}
\item \href{#method-ProjectsApi-RelationshipsConfigurationsRetrieve}{\code{ProjectsApi$RelationshipsConfigurationsRetrieve()}}
\item \href{#method-ProjectsApi-Retrieve}{\code{ProjectsApi$Retrieve()}}
\item \href{#method-ProjectsApi-SecondaryDatasetsConfigurationsCreate}{\code{ProjectsApi$SecondaryDatasetsConfigurationsCreate()}}
\item \href{#method-ProjectsApi-SecondaryDatasetsConfigurationsDelete}{\code{ProjectsApi$SecondaryDatasetsConfigurationsDelete()}}
\item \href{#method-ProjectsApi-SecondaryDatasetsConfigurationsList}{\code{ProjectsApi$SecondaryDatasetsConfigurationsList()}}
\item \href{#method-ProjectsApi-SecondaryDatasetsConfigurationsRetrieve}{\code{ProjectsApi$SecondaryDatasetsConfigurationsRetrieve()}}
\item \href{#method-ProjectsApi-SegmentationTaskJobResultsRetrieve}{\code{ProjectsApi$SegmentationTaskJobResultsRetrieve()}}
\item \href{#method-ProjectsApi-SegmentationTasksCreate}{\code{ProjectsApi$SegmentationTasksCreate()}}
\item \href{#method-ProjectsApi-SegmentationTasksList}{\code{ProjectsApi$SegmentationTasksList()}}
\item \href{#method-ProjectsApi-SegmentationTasksMappingsList}{\code{ProjectsApi$SegmentationTasksMappingsList()}}
\item \href{#method-ProjectsApi-SegmentationTasksRetrieve}{\code{ProjectsApi$SegmentationTasksRetrieve()}}
\item \href{#method-ProjectsApi-SegmentsPatch}{\code{ProjectsApi$SegmentsPatch()}}
\item \href{#method-ProjectsApi-StatusList}{\code{ProjectsApi$StatusList()}}
\item \href{#method-ProjectsApi-TypeTransformFeaturesCreate}{\code{ProjectsApi$TypeTransformFeaturesCreate()}}
\item \href{#method-ProjectsApi-clone}{\code{ProjectsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-AccessControlList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-AccessControlList}{}}}
\subsection{Method \code{AccessControlList()}}{
Get project's access control list
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$AccessControlList(
  offset,
  limit,
  projectId,
  username = NULL,
  userId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{projectId}}{character. The project ID}

\item{\code{username}}{character. Optional, only return the access control information for a user with this username.}

\item{\code{userId}}{character. Optional, only return the access control information for a user with this user ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users who have access to this project and their roles on the project.


This method invokes \verb{GET /projects/\{projectId\}/accessControl/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The project's access control list.
\itemize{
}
\item \strong{\code{400}} Both username and userId were specified
\itemize{
}
\item \strong{\code{404}} Either the project does not exist or the user does not have permissions to view the project.
\itemize{
}
}
}

\subsection{Returns}{
\link{SharingListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
projectId <- 'projectId_example' # character | The project ID
username <- 'username_example' # character | Optional, only return the access control information for a user with this username.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID.

api.instance <- ProjectsApi$new()
result <- api.instance$AccessControlList(offset, limit, projectId, username=username, userId=userId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-AccessControlPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-AccessControlPatchMany}{}}}
\subsection{Method \code{AccessControlPatchMany()}}{
Update project's access controls
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$AccessControlPatchMany(
  projectId,
  sharingUpdateOrRemove = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{sharingUpdateOrRemove}}{\link{SharingUpdateOrRemove}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Set roles for users on this project.


This method invokes \verb{PATCH /projects/\{projectId\}/accessControl/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Roles updated successfully.
\itemize{
}
\item \strong{\code{409}} The request would leave the project without an owner.
\itemize{
}
\item \strong{\code{422}} One of the users in the request does not exist, or the request is otherwise invalid
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
sharingUpdateOrRemove <- SharingUpdateOrRemove$new() # SharingUpdateOrRemove | 

api.instance <- ProjectsApi$new()
result <- api.instance$AccessControlPatchMany(projectId, sharingUpdateOrRemove=sharingUpdateOrRemove)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-AutopilotCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-AutopilotCreate}{}}}
\subsection{Method \code{AutopilotCreate()}}{
Pause or unpause Autopilot
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$AutopilotCreate(projectId, autopilot = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{autopilot}}{\link{Autopilot}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Pause or unpause the autopilot for a project.


This method invokes \verb{POST /projects/\{projectId\}/autopilot/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Request received
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
autopilot <- Autopilot$new() # Autopilot | 

api.instance <- ProjectsApi$new()
result <- api.instance$AutopilotCreate(projectId, autopilot=autopilot)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-AutopilotsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-AutopilotsCreate}{}}}
\subsection{Method \code{AutopilotsCreate()}}{
Start autopilot
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$AutopilotsCreate(projectId, autopilotStart = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{autopilotStart}}{\link{AutopilotStart}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Start autopilot on provided featurelist.


This method invokes \verb{POST /projects/\{projectId\}/autopilots/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Successfully started
\itemize{
}
\item \strong{\code{422}} Autopilot on this featurelist has already completed or is already in progress. This status code is also returned if target was not selected for specified project.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
autopilotStart <- AutopilotStart$new() # AutopilotStart | 

api.instance <- ProjectsApi$new()
result <- api.instance$AutopilotsCreate(projectId, autopilotStart=autopilotStart)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-BatchTypeTransformFeaturesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-BatchTypeTransformFeaturesCreate}{}}}
\subsection{Method \code{BatchTypeTransformFeaturesCreate()}}{
Create multiple new features by changing the type of existing features.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$BatchTypeTransformFeaturesCreate(
  projectId,
  batchFeatureTransform = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to create the feature in.}

\item{\code{batchFeatureTransform}}{\link{BatchFeatureTransform}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create multiple new features by changing the type of existing features.


This method invokes \verb{POST /projects/\{projectId\}/batchTypeTransformFeatures/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{422}} Unable to process the request
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to create the feature in.
batchFeatureTransform <- BatchFeatureTransform$new() # BatchFeatureTransform | 

api.instance <- ProjectsApi$new()
result <- api.instance$BatchTypeTransformFeaturesCreate(projectId, batchFeatureTransform=batchFeatureTransform)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-BatchTypeTransformFeaturesResultRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-BatchTypeTransformFeaturesResultRetrieve}{}}}
\subsection{Method \code{BatchTypeTransformFeaturesResultRetrieve()}}{
Retrieve the result of a batch variable type transformation.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$BatchTypeTransformFeaturesResultRetrieve(
  projectId,
  jobId,
  batchFeatureTransform = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project containing transformed features.}

\item{\code{jobId}}{integer. ID of the batch variable type transformation job.}

\item{\code{batchFeatureTransform}}{\link{BatchFeatureTransform}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the result of a batch variable type transformation.


This method invokes \verb{GET /projects/\{projectId\}/batchTypeTransformFeaturesResult/\{jobId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Names of successfully created features.
\itemize{
}
\item \strong{\code{404}} Could not find specified transformation report
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchFeatureTransformRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project containing transformed features.
jobId <- 56 # integer | ID of the batch variable type transformation job.
batchFeatureTransform <- BatchFeatureTransform$new() # BatchFeatureTransform | 

api.instance <- ProjectsApi$new()
result <- api.instance$BatchTypeTransformFeaturesResultRetrieve(projectId, jobId, batchFeatureTransform=batchFeatureTransform)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarCountryCodesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarCountryCodesList}{}}}
\subsection{Method \code{CalendarCountryCodesList()}}{
Retrieve the list of allowed country codes to request preloaded calendars generation for.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarCountryCodesList(offset = 0, limit = 100, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the list of allowed country codes to request preloaded calendars generation for.


This method invokes \verb{GET /calendarCountryCodes/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Request for the list of allowed country codes that have the generated preloaded calendars.
\itemize{
}
}
}

\subsection{Returns}{
\link{PreloadedCalendarListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarCountryCodesList(offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarEventsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarEventsList}{}}}
\subsection{Method \code{CalendarEventsList()}}{
List available calendar events for the project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarEventsList(
  projectId,
  seriesId = NULL,
  startDate = NULL,
  endDate = NULL,
  offset = 0,
  limit = 1000,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{seriesId}}{character. The name of the series to retrieve specific series for. If specified, retrieves only series specific to the event and common events.}

\item{\code{startDate}}{character. The start of the date range to return, inclusive. If not specified, start date for the first calendar event will be used.}

\item{\code{endDate}}{character. The end of the date range to return, exclusive. If not specified, end date capturing the last calendar event will be used.}

\item{\code{offset}}{integer. Optional (default: `0`), this many results will be skipped.}

\item{\code{limit}}{integer. Optional (default: `1000`), at most this many results will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List available calendar events for the project.


This method invokes \verb{GET /projects/\{projectId\}/calendarEvents/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of calendar events.
\itemize{
}
}
}

\subsection{Returns}{
\link{CalendarEventsResponseQuery}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
seriesId <- 'seriesId_example' # character | The name of the series to retrieve specific series for. If specified, retrieves only series specific to the event and common events.
startDate <- 'startDate_example' # character | The start of the date range to return, inclusive. If not specified, start date for the first calendar event will be used.
endDate <- 'endDate_example' # character | The end of the date range to return, exclusive. If not specified, end date capturing the last calendar event will be used.
offset <- 0 # integer | Optional (default: `0`), this many results will be skipped.
limit <- 1000 # integer | Optional (default: `1000`), at most this many results will be returned.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarEventsList(projectId, seriesId=seriesId, startDate=startDate, endDate=endDate, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsAccessControlList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsAccessControlList}{}}}
\subsection{Method \code{CalendarsAccessControlList()}}{
Get a list of users who have access to this calendar and their roles on the calendar.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsAccessControlList(
  calendarId,
  username = NULL,
  userId = NULL,
  offset = 0,
  limit = 0,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calendarId}}{character. The ID of this calendar.}

\item{\code{username}}{character. Optional, only return the access control information for a user with this username. Should not be specified if `userId` is specified.}

\item{\code{userId}}{character. Optional, only return the access control information for a user with this user ID. Should not be specified if `username` is specified.}

\item{\code{offset}}{integer. Optional (default: `0`), this many results will be skipped.}

\item{\code{limit}}{integer. Optional (default: `0`), at most this many results will be returned. If `0`, all results will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users who have access to this calendar and their roles on the calendar.


This method invokes \verb{GET /calendars/\{calendarId\}/accessControl/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Request for the list of users who have access to this calendar and their roles on the calendar was successful.
\itemize{
}
\item \strong{\code{400}} Both `username` and `userId` were specified.
\itemize{
}
\item \strong{\code{404}} Entity not found. Either the calendar does not exist or the user does not have permissions to view the calendar.
\itemize{
}
}
}

\subsection{Returns}{
\link{CalendarAccessControlListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.
username <- 'username_example' # character | Optional, only return the access control information for a user with this username. Should not be specified if `userId` is specified.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID. Should not be specified if `username` is specified.
offset <- 0 # integer | Optional (default: `0`), this many results will be skipped.
limit <- 0 # integer | Optional (default: `0`), at most this many results will be returned. If `0`, all results will be returned.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsAccessControlList(calendarId, username=username, userId=userId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsAccessControlPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsAccessControlPatchMany}{}}}
\subsection{Method \code{CalendarsAccessControlPatchMany()}}{
Update the access control for this calendar.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsAccessControlPatchMany(
  calendarId,
  calendarAccessControlUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calendarId}}{character. The ID of this calendar.}

\item{\code{calendarAccessControlUpdate}}{\link{CalendarAccessControlUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the access control for this calendar. See the entity sharing documentation \\<sharing\\> for more information.


This method invokes \verb{PATCH /calendars/\{calendarId\}/accessControl/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Request to update the accesss control for this calendar was sussessful.
\itemize{
}
\item \strong{\code{404}} Invalid `calendarId` provided, or user has no access whatsoever on the specified calendar.
\itemize{
}
\item \strong{\code{422}} Invalid `username` provided to modify access for the specified calendar.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.
calendarAccessControlUpdate <- CalendarAccessControlUpdate$new() # CalendarAccessControlUpdate | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsAccessControlPatchMany(calendarId, calendarAccessControlUpdate=calendarAccessControlUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsDelete}{}}}
\subsection{Method \code{CalendarsDelete()}}{
Delete a calendar.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsDelete(calendarId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calendarId}}{character. The ID of this calendar.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a calendar. This can only be done if all projects and deployments using the calendar have been deleted.


This method invokes \verb{DELETE /calendars/\{calendarId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Calendar successfully deleted.
\itemize{
}
\item \strong{\code{404}} Invalid `calendarId` provided, or user does not have permissions to delete calendar.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsDelete(calendarId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsFileUploadCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsFileUploadCreate}{}}}
\subsection{Method \code{CalendarsFileUploadCreate()}}{
Create a calendar from a file.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsFileUploadCreate(calendarFileUpload = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calendarFileUpload}}{\link{CalendarFileUpload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a calendar from a file in a csv or xlsx format. The calendar file specifies the dates or events in a dataset such that DataRobot automatically derives and creates special features based on the calendar events (e.g., time until the next event, labeling the most recent event).


This method invokes \verb{POST /calendars/fileUpload/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Request for calendar generation was submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
calendarFileUpload <- CalendarFileUpload$new() # CalendarFileUpload | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsFileUploadCreate(calendarFileUpload=calendarFileUpload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsFromCountryCodeCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsFromCountryCodeCreate}{}}}
\subsection{Method \code{CalendarsFromCountryCodeCreate()}}{
Initialize generation of preloaded calendars.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsFromCountryCodeCreate(preloadedCalendar = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{preloadedCalendar}}{\link{PreloadedCalendar}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Initialize generation of preloaded calendars. Preloaded calendars are available only for time series projects. Preloaded calendars do not support multiseries calendars.


This method invokes \verb{POST /calendars/fromCountryCode/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Request for calendar generation was submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
preloadedCalendar <- PreloadedCalendar$new() # PreloadedCalendar | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsFromCountryCodeCreate(preloadedCalendar=preloadedCalendar)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsFromDatasetCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsFromDatasetCreate}{}}}
\subsection{Method \code{CalendarsFromDatasetCreate()}}{
Create a calendar from the dataset
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsFromDatasetCreate(calendarFromDataset = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calendarFromDataset}}{\link{CalendarFromDataset}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a calendar from the dataset.


This method invokes \verb{POST /calendars/fromDataset/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Successfully created a calendar from the dataset.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CreatedCalendarDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
calendarFromDataset <- CalendarFromDataset$new() # CalendarFromDataset | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsFromDatasetCreate(calendarFromDataset=calendarFromDataset)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsList}{}}}
\subsection{Method \code{CalendarsList()}}{
List all available calendars for a user.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsList(offset, limit, projectId = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Optional (default: `0`), this many results will be skipped.}

\item{\code{limit}}{integer. Optional (default: `0`), at most this many results will be returned. If `0`, all results will be returned.}

\item{\code{projectId}}{character. Optional, if provided will filter returned calendars to those being used in the specified project.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all the calendars which the user has access to.


This method invokes \verb{GET /calendars/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of Calendar objects.
\itemize{
}
}
}

\subsection{Returns}{
\link{CalendarListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Optional (default: `0`), this many results will be skipped.
limit <- 0 # integer | Optional (default: `0`), at most this many results will be returned. If `0`, all results will be returned.
projectId <- 'projectId_example' # character | Optional, if provided will filter returned calendars to those being used in the specified project.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsList(offset, limit, projectId=projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsPatch}{}}}
\subsection{Method \code{CalendarsPatch()}}{
Update a calendar's name
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsPatch(calendarId, calendarNameUpdate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calendarId}}{character. The ID of this calendar.}

\item{\code{calendarNameUpdate}}{\link{CalendarNameUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a calendar's name


This method invokes \verb{PATCH /calendars/\{calendarId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Calendar name successfully updated.
\itemize{
}
\item \strong{\code{404}} Invalid `calendarId` provided, or user does not have permissions to update calendar.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.
calendarNameUpdate <- CalendarNameUpdate$new() # CalendarNameUpdate | 

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsPatch(calendarId, calendarNameUpdate=calendarNameUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CalendarsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CalendarsRetrieve}{}}}
\subsection{Method \code{CalendarsRetrieve()}}{
Retrieve information about a calendar.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CalendarsRetrieve(calendarId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calendarId}}{character. The ID of this calendar.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all the information about a calendar such as the total number of event dates, the earliest calendar event date, the IDs of projects currently using this calendar and the others.


This method invokes \verb{GET /calendars/\{calendarId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Request for a Calendar object was successful.
\itemize{
}
}
}

\subsection{Returns}{
\link{CalendarRecord}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
calendarId <- 'calendarId_example' # character | The ID of this calendar.

api.instance <- ProjectsApi$new()
result <- api.instance$CalendarsRetrieve(calendarId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CleanupJobsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CleanupJobsCreate}{}}}
\subsection{Method \code{CleanupJobsCreate()}}{
Schedule Project Permadelete Job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CleanupJobsCreate(projectNuke = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectNuke}}{\link{ProjectNuke}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add list of projects to permadelete and returns async status


This method invokes \verb{POST /projectCleanupJobs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Location URL to check permadelete status per project
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectNuke <- ProjectNuke$new() # ProjectNuke | 

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsCreate(projectNuke=projectNuke)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CleanupJobsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CleanupJobsDelete}{}}}
\subsection{Method \code{CleanupJobsDelete()}}{
Cancel Scheduled Project Permadelete Job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CleanupJobsDelete(statusId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statusId}}{character. The ID of the status object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Stop permadelete job, if possible


This method invokes \verb{DELETE /projectCleanupJobs/\{statusId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsDelete(statusId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CleanupJobsDownloadList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CleanupJobsDownloadList}{}}}
\subsection{Method \code{CleanupJobsDownloadList()}}{
Download a projects permadeletion report.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CleanupJobsDownloadList(statusId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statusId}}{character. The ID of the status object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a file containing a per-project report of permanent deletion.


This method invokes \verb{GET /projectCleanupJobs/\{statusId\}/download/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} JSON-formatted project permadeletion report.
\itemize{
\item \strong{\code{ContentMinusDisposition}} Contains an auto generated filename for this download ('attachment;filename=\"project_permadeletion_<statusId>.json\"').
}
}
}

\subsection{Returns}{
\link{ProjectNukeJobStatus}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsDownloadList(statusId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CleanupJobsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CleanupJobsList}{}}}
\subsection{Method \code{CleanupJobsList()}}{
Retrieve Project Permadelete job status
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CleanupJobsList(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get async status of the project permadelete job


This method invokes \verb{GET /projectCleanupJobs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Permadelete Job Status with details per project
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectNukeJobListStatus}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsList()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CleanupJobsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CleanupJobsRetrieve}{}}}
\subsection{Method \code{CleanupJobsRetrieve()}}{
Retrieve Project Permadelete job status
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CleanupJobsRetrieve(statusId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statusId}}{character. The ID of the status object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get async status of the project permadelete job


This method invokes \verb{GET /projectCleanupJobs/\{statusId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Permadelete Job Status with details per project
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectNukeJobStatus}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsRetrieve(statusId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CleanupJobsSummaryList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CleanupJobsSummaryList}{}}}
\subsection{Method \code{CleanupJobsSummaryList()}}{
Get a projects cleanup jobs summary.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CleanupJobsSummaryList(statusId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statusId}}{character. The ID of the status object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get number of projects whose deletion finished in particular state


This method invokes \verb{GET /projectCleanupJobs/\{statusId\}/summary/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Project permanent deletion job status to occurrence count
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectNukeJobStatusSummary}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- ProjectsApi$new()
result <- api.instance$CleanupJobsSummaryList(statusId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ClonesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ClonesCreate}{}}}
\subsection{Method \code{ClonesCreate()}}{
Clone a project
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ClonesCreate(projectClone = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectClone}}{\link{ProjectClone}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
> Create a clone of an existing project. > > The resultant project will begin the initial exploratory data analysis > and will be ready to set the target of the new project shortly.


This method invokes \verb{POST /projectClones/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Project cloning has successfully started.  See the Location header.
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectClone <- ProjectClone$new() # ProjectClone | 

api.instance <- ProjectsApi$new()
result <- api.instance$ClonesCreate(projectClone=projectClone)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ConfigureAndStartAutopilot"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ConfigureAndStartAutopilot}{}}}
\subsection{Method \code{ConfigureAndStartAutopilot()}}{
Start modeling
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ConfigureAndStartAutopilot(projectId, aim = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{aim}}{\link{Aim}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Start the data modeling process.


This method invokes \verb{PATCH /projects/\{projectId\}/aim/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Autopilot has successfully started.  See the Location header.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
aim <- Aim$new() # Aim | 

api.instance <- ProjectsApi$new()
result <- api.instance$ConfigureAndStartAutopilot(projectId, aim=aim)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-Create"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-Create}{}}}
\subsection{Method \code{Create()}}{
Create project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$Create(projectCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectCreate}}{\link{ProjectCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new project.


This method invokes \verb{POST /projects/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started.  See the Location header.
\itemize{
}
\item \strong{\code{403}} User does not have permission to use specified dataset item for project.
\itemize{
}
\item \strong{\code{404}} The dataset item with the given ID or version ID is not found.
\itemize{
}
\item \strong{\code{422}} Ingest not yet completed.
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectCreate <- ProjectCreate$new() # ProjectCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$Create(projectCreate=projectCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-CrossSeriesPropertiesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-CrossSeriesPropertiesCreate}{}}}
\subsection{Method \code{CrossSeriesPropertiesCreate()}}{
Validate columns for potential use as the group-by column for cross-series functionality.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$CrossSeriesPropertiesCreate(
  projectId,
  crossSeriesGroupByColumnValidatePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{crossSeriesGroupByColumnValidatePayload}}{\link{CrossSeriesGroupByColumnValidatePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Validate columns for potential use as the group-by column for cross-series functionality.  The group-by column is an optional setting that indicates how to further splitseries into related groups. For example, if each series represents sales of an individual product, the group-by column could be the product category, e.g., \"clothing\" or \"sports equipment\".


This method invokes \verb{POST /projects/\{projectId\}/crossSeriesProperties/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Cross-series group-by column validation job was successfully submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CrossSeriesGroupByColumnValidateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
crossSeriesGroupByColumnValidatePayload <- CrossSeriesGroupByColumnValidatePayload$new() # CrossSeriesGroupByColumnValidatePayload | 

api.instance <- ProjectsApi$new()
result <- api.instance$CrossSeriesPropertiesCreate(projectId, crossSeriesGroupByColumnValidatePayload=crossSeriesGroupByColumnValidatePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-Delete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-Delete}{}}}
\subsection{Method \code{Delete()}}{
Delete a project
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$Delete(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a project


This method invokes \verb{DELETE /projects/\{projectId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The project has been successfully deleted.
\itemize{
}
\item \strong{\code{409}} The project is in use and cannot be deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$Delete(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-DeletedProjectsCountList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-DeletedProjectsCountList}{}}}
\subsection{Method \code{DeletedProjectsCountList()}}{
Count soft-deleted projects.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$DeletedProjectsCountList(
  searchFor = NULL,
  creator = NULL,
  organization = NULL,
  deletedBefore = NULL,
  deletedAfter = NULL,
  projectId = NULL,
  limit = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{searchFor}}{character. Project or dataset name to filter by}

\item{\code{creator}}{character. Creator ID to filter projects by}

\item{\code{organization}}{character. ID of organization that projects should belong to. Given project belongs to the organization the user who created the project is part of that organization.If there are no users in organization, then no projects will match the query.}

\item{\code{deletedBefore}}{character. ISO-8601 formatted date projects were deleted before}

\item{\code{deletedAfter}}{character. ISO-8601 formatted date projects were deleted after}

\item{\code{projectId}}{character. Project ID to search}

\item{\code{limit}}{integer. Count deleted projects until specified value reached.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get current number of deleted projects matching search criteria. Value is limited by DELETED_PROJECTS_BATCH_LIMIT system setting. That means that the actual amount of deleted projects can be greater than the limit, but counting will stop when reaching it.


This method invokes \verb{GET /deletedProjectsCount/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Soft-deleted projects amount, current counting limit value and boolean flag to notify if an actual amount of soft-deleted projects in the system exceeds the limit value.
\itemize{
}
}
}

\subsection{Returns}{
\link{DeletedProjectCountResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
searchFor <- 'searchFor_example' # character | Project or dataset name to filter by
creator <- 'creator_example' # character | Creator ID to filter projects by
organization <- 'organization_example' # character | ID of organization that projects should belong to. Given project belongs to the organization the user who created the project is part of that organization.If there are no users in organization, then no projects will match the query.
deletedBefore <- 'deletedBefore_example' # character | ISO-8601 formatted date projects were deleted before
deletedAfter <- 'deletedAfter_example' # character | ISO-8601 formatted date projects were deleted after
projectId <- 'projectId_example' # character | Project ID to search
limit <- 56 # integer | Count deleted projects until specified value reached.

api.instance <- ProjectsApi$new()
result <- api.instance$DeletedProjectsCountList(searchFor=searchFor, creator=creator, organization=organization, deletedBefore=deletedBefore, deletedAfter=deletedAfter, projectId=projectId, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-DeletedProjectsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-DeletedProjectsList}{}}}
\subsection{Method \code{DeletedProjectsList()}}{
Retrieve a list of soft-deleted projects
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$DeletedProjectsList(
  searchFor = NULL,
  creator = NULL,
  organization = NULL,
  deletedBefore = NULL,
  deletedAfter = NULL,
  projectId = NULL,
  limit = 20,
  offset = 0,
  orderBy = "deletedOn",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{searchFor}}{character. Project or dataset name to filter by}

\item{\code{creator}}{character. Creator ID to filter projects by}

\item{\code{organization}}{character. ID of organization that projects should belong to. Given project belongs to the organization the user who created the project is part of that organization.If there are no users in organization, then no projects will match the query.}

\item{\code{deletedBefore}}{character. ISO-8601 formatted date projects were deleted before}

\item{\code{deletedAfter}}{character. ISO-8601 formatted date projects were deleted after}

\item{\code{projectId}}{character. Project ID to search}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{orderBy}}{Enum < \link{projectId, projectName, datasetName, deletedOn, deletedBy, creator, -projectId, -projectName, -datasetName, -deletedOn, -deletedBy, -creator} > Order deleted projects by}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a list of soft-deleted projects matching search criteria


This method invokes \verb{GET /deletedProjects/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of soft-deleted projects
\itemize{
}
}
}

\subsection{Returns}{
\link{DeletedProjectListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
searchFor <- 'searchFor_example' # character | Project or dataset name to filter by
creator <- 'creator_example' # character | Creator ID to filter projects by
organization <- 'organization_example' # character | ID of organization that projects should belong to. Given project belongs to the organization the user who created the project is part of that organization.If there are no users in organization, then no projects will match the query.
deletedBefore <- 'deletedBefore_example' # character | ISO-8601 formatted date projects were deleted before
deletedAfter <- 'deletedAfter_example' # character | ISO-8601 formatted date projects were deleted after
projectId <- 'projectId_example' # character | Project ID to search
limit <- 20 # integer | At most this many results are returned.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "deletedOn" # character | Order deleted projects by

api.instance <- ProjectsApi$new()
result <- api.instance$DeletedProjectsList(searchFor=searchFor, creator=creator, organization=organization, deletedBefore=deletedBefore, deletedAfter=deletedAfter, projectId=projectId, limit=limit, offset=offset, orderBy=orderBy)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-DeletedProjectsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-DeletedProjectsPatch}{}}}
\subsection{Method \code{DeletedProjectsPatch()}}{
Recover soft-deleted project
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$DeletedProjectsPatch(projectId, projectRecover = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{projectRecover}}{\link{ProjectRecover}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Recover (undelete) soft-deleted project


This method invokes \verb{PATCH /deletedProjects/\{projectId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Recovery operation result description
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectRecoverResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
projectRecover <- ProjectRecover$new() # ProjectRecover | 

api.instance <- ProjectsApi$new()
result <- api.instance$DeletedProjectsPatch(projectId, projectRecover=projectRecover)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-DiscardedFeaturesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-DiscardedFeaturesList}{}}}
\subsection{Method \code{DiscardedFeaturesList()}}{
Get discarded features.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$DiscardedFeaturesList(projectId, search = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{search}}{character. Case insensitive search against discarded feature names.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get features which were discarded during feature reduction process.


This method invokes \verb{GET /projects/\{projectId\}/discardedFeatures/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Discarded features.
\itemize{
}
\item \strong{\code{422}} Unable to process the request
\itemize{
}
}
}

\subsection{Returns}{
\link{DiscardedFeaturesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
search <- 'search_example' # character | Case insensitive search against discarded feature names.

api.instance <- ProjectsApi$new()
result <- api.instance$DiscardedFeaturesList(projectId, search=search)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ExternalTimeSeriesBaselineDataValidationJobsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ExternalTimeSeriesBaselineDataValidationJobsCreate}{}}}
\subsection{Method \code{ExternalTimeSeriesBaselineDataValidationJobsCreate()}}{
Validate baseline data
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ExternalTimeSeriesBaselineDataValidationJobsCreate(
  projectId,
  externalTsBaselinePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{externalTsBaselinePayload}}{\link{ExternalTSBaselinePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This route validates if a provided catalog version id can be used as baseline for calculating metrics. This functionality is available only for time series projects.For a baseline dataset to be valid, the number of unique date amd multiseries_id columnrows must match the unique number of date and multiseries_id column rows in the uploadedtraining dataset. This functionality is limited to one forecast distance. Additionally, the catalog must be a snapshot.


This method invokes \verb{POST /projects/\{projectId\}/externalTimeSeriesBaselineDataValidationJobs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Validate baseline data that is provided in the form of a catalog version id. We willconfirm that the dataset contains the proper date, target column, and multiseries ID column. If the provided dataset meets the criteria, the job will be successful.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{422}} Unable to process external time sereis baseline validation job.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
externalTsBaselinePayload <- ExternalTSBaselinePayload$new() # ExternalTSBaselinePayload | 

api.instance <- ProjectsApi$new()
result <- api.instance$ExternalTimeSeriesBaselineDataValidationJobsCreate(projectId, externalTsBaselinePayload=externalTsBaselinePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ExternalTimeSeriesBaselineDataValidationJobsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ExternalTimeSeriesBaselineDataValidationJobsRetrieve}{}}}
\subsection{Method \code{ExternalTimeSeriesBaselineDataValidationJobsRetrieve()}}{
Retrieve Baseline Validation Job
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ExternalTimeSeriesBaselineDataValidationJobsRetrieve(
  projectId,
  baselineValidationJobId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to retrieve the validation job information from.}

\item{\code{baselineValidationJobId}}{character. The id for the validation job}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve information to confirm if the validation job triggered via /api/v2/projects/(projectId)/externalTimeSeriesBaselineDataValidationJobs/ is valid.


This method invokes \verb{GET /projects/\{projectId\}/externalTimeSeriesBaselineDataValidationJobs/\{baselineValidationJobId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} External time series validation job not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{ExternalTSBaselineResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve the validation job information from.
baselineValidationJobId <- 'baselineValidationJobId_example' # character | The id for the validation job

api.instance <- ProjectsApi$new()
result <- api.instance$ExternalTimeSeriesBaselineDataValidationJobsRetrieve(projectId, baselineValidationJobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeatureDiscoveryDatasetDownloadList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeatureDiscoveryDatasetDownloadList}{}}}
\subsection{Method \code{FeatureDiscoveryDatasetDownloadList()}}{
Download the project dataset with features added by feature discovery
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeatureDiscoveryDatasetDownloadList(
  projectId,
  datasetId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{datasetId}}{character. The ID of the dataset to use for the prediction.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Download the project dataset with features added by feature discovery


This method invokes \verb{GET /projects/\{projectId\}/featureDiscoveryDatasetDownload/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Project dataset file.
\itemize{
}
\item \strong{\code{404}} Data is not found.
\itemize{
}
\item \strong{\code{422}} Unable to process the request.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
datasetId <- 'datasetId_example' # character | The ID of the dataset to use for the prediction.

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryDatasetDownloadList(projectId, datasetId=datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeatureDiscoveryLogsDownloadList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeatureDiscoveryLogsDownloadList}{}}}
\subsection{Method \code{FeatureDiscoveryLogsDownloadList()}}{
Retrieve a text file containing the feature discovery log
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeatureDiscoveryLogsDownloadList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a text file containing the feature discovery log. This route is only supported for feature discovery projects that have finished partitioning.


This method invokes \verb{GET /projects/\{projectId\}/featureDiscoveryLogs/download/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Feature discovery log file.
\itemize{
}
\item \strong{\code{422}} Unable to process the request.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryLogsDownloadList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeatureDiscoveryLogsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeatureDiscoveryLogsList}{}}}
\subsection{Method \code{FeatureDiscoveryLogsList()}}{
Retrieve the feature discovery log content and log length
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeatureDiscoveryLogsList(projectId, offset = 0, limit = 100, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the feature discovery log content and log length for a feature discovery project. This route is only supported for feature discovery projects that have finished partitioning


This method invokes \verb{GET /projects/\{projectId\}/featureDiscoveryLogs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Feature discovery log data.
\itemize{
}
\item \strong{\code{422}} Unable to process the request.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureDiscoveryLogListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryLogsList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeatureDiscoveryRecipeSQLsDownloadList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeatureDiscoveryRecipeSQLsDownloadList}{}}}
\subsection{Method \code{FeatureDiscoveryRecipeSQLsDownloadList()}}{
Download feature discovery SQL recipe
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeatureDiscoveryRecipeSQLsDownloadList(
  projectId,
  modelId = NULL,
  statusOnly = "false",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. Model ID to export recipe for}

\item{\code{statusOnly}}{Enum < \link{false, False, true, True} > Return status only for availability check}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Download feature discovery SQL recipe for a project


This method invokes \verb{GET /projects/\{projectId\}/featureDiscoveryRecipeSQLs/download/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Project feature discovery SQL recipe file.
\itemize{
}
\item \strong{\code{400}} Unable to process the request
\itemize{
}
\item \strong{\code{404}} Data not found
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | Model ID to export recipe for
statusOnly <- "false" # character | Return status only for availability check

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryRecipeSQLsDownloadList(projectId, modelId=modelId, statusOnly=statusOnly)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeatureDiscoveryRecipeSqlExportsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeatureDiscoveryRecipeSqlExportsCreate}{}}}
\subsection{Method \code{FeatureDiscoveryRecipeSqlExportsCreate()}}{
Generate feature discovery SQL recipe
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeatureDiscoveryRecipeSqlExportsCreate(
  projectId,
  featureDiscoveryRecipeSqlsExport = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{featureDiscoveryRecipeSqlsExport}}{\link{FeatureDiscoveryRecipeSQLsExport}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Generate feature discovery SQL recipe for a project


This method invokes \verb{POST /projects/\{projectId\}/featureDiscoveryRecipeSqlExports/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{404}} Data not found
\itemize{
}
\item \strong{\code{422}} Unable to process the request
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
featureDiscoveryRecipeSqlsExport <- FeatureDiscoveryRecipeSQLsExport$new() # FeatureDiscoveryRecipeSQLsExport | 

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureDiscoveryRecipeSqlExportsCreate(projectId, featureDiscoveryRecipeSqlsExport=featureDiscoveryRecipeSqlsExport)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeatureHistogramsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeatureHistogramsRetrieve}{}}}
\subsection{Method \code{FeatureHistogramsRetrieve()}}{
Get feature histogram
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeatureHistogramsRetrieve(
  binLimit,
  projectId,
  featureName,
  key = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{binLimit}}{integer. maximum number of bins in the returned plot}

\item{\code{projectId}}{character. The ID of the project}

\item{\code{featureName}}{character. the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting)}

\item{\code{key}}{character. name of the top 50 key for which plot to be retrieved. (Only required for the Summarized categorical feature)}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get histogram chart data for a specific feature. Information that can be used to build histogram charts. Plot data returned is based on raw data that is calculated during initial project creation and updated after the project's target variable has been selected. The number of bins in the histogram is no greater than the requested limit.


This method invokes \verb{GET /projects/\{projectId\}/featureHistograms/\{featureName\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The feature histogram chart data
\itemize{
}
\item \strong{\code{404}} A Histogram is unavailable for this feature because the data contains unsupportedfeature types (e.g., image, audio, location).
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureHistogramResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
binLimit <- 60 # integer | maximum number of bins in the returned plot
projectId <- 'projectId_example' # character | The ID of the project
featureName <- 'featureName_example' # character | the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting) 
key <- 'key_example' # character | name of the top 50 key for which plot to be retrieved. (Only required for the Summarized categorical feature)

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureHistogramsRetrieve(binLimit, projectId, featureName, key=key)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeatureLineagesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeatureLineagesRetrieve}{}}}
\subsection{Method \code{FeatureLineagesRetrieve()}}{
Retrieve Feature Discovery Lineage
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeatureLineagesRetrieve(projectId, featureLineageId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to retrieve a lineage from.}

\item{\code{featureLineageId}}{character. id of a feature lineage object to return. You can access the id with  \emph{ModelingFeatureRetrieveController}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve single Feature Discovery feature lineage.


This method invokes \verb{GET /projects/\{projectId\}/featureLineages/\{featureLineageId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureLineageResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve a lineage from.
featureLineageId <- 'featureLineageId_example' # character | id of a feature lineage object to return. You can access the id with  *ModelingFeatureRetrieveController*.

api.instance <- ProjectsApi$new()
result <- api.instance$FeatureLineagesRetrieve(projectId, featureLineageId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturelistsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturelistsCreate}{}}}
\subsection{Method \code{FeaturelistsCreate()}}{
Create a new featurelist.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturelistsCreate(projectId, createFeaturelist = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{createFeaturelist}}{\link{CreateFeaturelist}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new featurelist from list of feature names.


This method invokes \verb{POST /projects/\{projectId\}/featurelists/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The newly created featurelist in the same format as :http:get:`/api/v2/projects/(projectId)/featurelists/(featurelistId)/`.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeaturelistResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
createFeaturelist <- CreateFeaturelist$new() # CreateFeaturelist | 

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsCreate(projectId, createFeaturelist=createFeaturelist)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturelistsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturelistsDelete}{}}}
\subsection{Method \code{FeaturelistsDelete()}}{
Delete a specified featurelist.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturelistsDelete(
  projectId,
  featurelistId,
  dryRun = "false",
  deleteDependencies = "false",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{featurelistId}}{character. The featurelist ID.}

\item{\code{dryRun}}{Enum < \link{false, False, true, True} > Preview the deletion results without actually deleting the featurelist.}

\item{\code{deleteDependencies}}{Enum < \link{false, False, true, True} > Automatically delete all dependencies of a featurelist. If false (default), will only delete the featurelist if it has no dependencies. The value of deleteDependencies will not be used if dryRun is true.If a featurelist has dependencies, deleteDependencies must be true for the request to succeed.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a specified featurelist. All models using a featurelist, whether as the training featurelist or as a monotonic constraint featurelist, will also be deleted when the deletion is executed and any queued or running jobs using it will be cancelled. Similarly, predictions made on these models will also be deleted. All the entities that are to be deleted with a featurelist are described as \"dependencies\" of it. When deleting a featurelist with dependencies, users must pass an additional query parameter deleteDependencies to confirm they want to delete the featurelist and all its dependencies. Without that option, only featurelists with no dependencies may be successfully deleted. Featurelists configured into the project as a default featurelist or as a default monotonic constraint featurelist cannot be deleted. Featurelists used in a model deployment cannot be deleted until the model deployment is deleted.


This method invokes \verb{DELETE /projects/\{projectId\}/featurelists/\{featurelistId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{FeaturelistDestroyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.
dryRun <- "false" # character | Preview the deletion results without actually deleting the featurelist.
deleteDependencies <- "false" # character | Automatically delete all dependencies of a featurelist. If false (default), will only delete the featurelist if it has no dependencies. The value of deleteDependencies will not be used if dryRun is true.If a featurelist has dependencies, deleteDependencies must be true for the request to succeed.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsDelete(projectId, featurelistId, dryRun=dryRun, deleteDependencies=deleteDependencies)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturelistsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturelistsList}{}}}
\subsection{Method \code{FeaturelistsList()}}{
List featurelists
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturelistsList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all featurelists for a project.


This method invokes \verb{GET /projects/\{projectId\}/featurelists/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The list of featurelists
\itemize{
}
}
}

\subsection{Returns}{
\link{FeaturelistListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturelistsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturelistsPatch}{}}}
\subsection{Method \code{FeaturelistsPatch()}}{
Update an existing featurelist
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturelistsPatch(
  projectId,
  featurelistId,
  updateFeaturelist = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{featurelistId}}{character. The featurelist ID.}

\item{\code{updateFeaturelist}}{\link{UpdateFeaturelist}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update an existing featurelist by ID.


This method invokes \verb{PATCH /projects/\{projectId\}/featurelists/\{featurelistId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The featurelist was successfully updated.
\itemize{
}
\item \strong{\code{422}} Update failed due to an invalid payload. This may be because the name is identical to an existing featurelist name.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.
updateFeaturelist <- UpdateFeaturelist$new() # UpdateFeaturelist | 

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsPatch(projectId, featurelistId, updateFeaturelist=updateFeaturelist)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturelistsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturelistsRetrieve}{}}}
\subsection{Method \code{FeaturelistsRetrieve()}}{
Retrieve a feature list
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturelistsRetrieve(projectId, featurelistId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{featurelistId}}{character. The featurelist ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a single known feature list.


This method invokes \verb{GET /projects/\{projectId\}/featurelists/\{featurelistId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieve a single known feature list.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeaturelistResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturelistsRetrieve(projectId, featurelistId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturesList}{}}}
\subsection{Method \code{FeaturesList()}}{
List project features
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturesList(projectId, forSegmentedAnalysis = "false", ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{forSegmentedAnalysis}}{Enum < \link{false, False, true, True} > When True, features returned will be filtered to those usable for segmented analysis.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the features from a project with descriptive information.


This method invokes \verb{GET /projects/\{projectId\}/features/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The list of features
\itemize{
}
}
}

\subsection{Returns}{
list( \link{ProjectFeatureResponse} )
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
forSegmentedAnalysis <- "false" # character | When True, features returned will be filtered to those usable for segmented analysis.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturesList(projectId, forSegmentedAnalysis=forSegmentedAnalysis)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturesMetricsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturesMetricsList}{}}}
\subsection{Method \code{FeaturesMetricsList()}}{
List feature metrics
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturesMetricsList(featureName, projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{featureName}}{character. The name of the feature to check}

\item{\code{projectId}}{character. The project ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the appropriate metrics if a feature were chosen as the target. The metrics listed will include both weighted and unweighted metrics - which are appropriate will depend on whether a weights column is used.


This method invokes \verb{GET /projects/\{projectId\}/features/metrics/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The feature's metrics
\itemize{
}
}
}

\subsection{Returns}{
\link{FeatureMetricsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | The name of the feature to check
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturesMetricsList(featureName, projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturesMultiseriesPropertiesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturesMultiseriesPropertiesList}{}}}
\subsection{Method \code{FeaturesMultiseriesPropertiesList()}}{
Retrieve potential multiseries ID columns to use with a particular datetime partition column.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturesMultiseriesPropertiesList(projectId, featureName, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID to retrieve multiseries properties from.}

\item{\code{featureName}}{character. The feature to be used to the datetime partition column.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Time series projects require that each timestamp have at most one row corresponding to it. However, multiple series of data can be handled within a single project by designating a multiseries ID column that assigns each row to a particular series. See the `multiseries <multiseries>` docs on time series projects for more information.  Note that detection will have to be triggered via :<http:post>:/api/v2/projects/(projectId)/multiseriesProperties/ in order for multiseries id columns to appear here. The route will return successfully with an empty array of detected columns if detection hasn't run yet, or hasn't found any valid columns.


This method invokes \verb{GET /projects/\{projectId\}/features/\{featureName\}/multiseriesProperties/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Request to retrieve the potential multiseries ID columns was successful.
\itemize{
}
}
}

\subsection{Returns}{
\link{MultiseriesRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID to retrieve multiseries properties from.
featureName <- 'featureName_example' # character | The feature to be used to the datetime partition column.

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturesMultiseriesPropertiesList(projectId, featureName)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-FeaturesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-FeaturesRetrieve}{}}}
\subsection{Method \code{FeaturesRetrieve()}}{
Get project feature
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$FeaturesRetrieve(projectId, featureName, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The ID of the project}

\item{\code{featureName}}{character. the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting)}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the specified feature with descriptive information. Descriptive information for features also includes summary statistics as of v2.8. These are returned via the fields max, min, mean, median, and stdDev. These fields are formatted according to the original feature type of the feature. For example, the format will be numeric if your feature is numeric, in feet and inches if your feature is length type, in currency if your feature is currency type, in time format if your feature is time type, or in ISO date format if your feature is a date type. Numbers will be rounded so that they have at most two non-zero decimal digits. For projects created prior to v2.8, these descriptive statistics will not be available. Also, some features, like categorical and text features, may not have summary statistics.


This method invokes \verb{GET /projects/\{projectId\}/features/\{featureName\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The feature information
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The ID of the project
featureName <- 'featureName_example' # character | the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting) 

api.instance <- ProjectsApi$new()
result <- api.instance$FeaturesRetrieve(projectId, featureName)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-HdfsProjectsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-HdfsProjectsCreate}{}}}
\subsection{Method \code{HdfsProjectsCreate()}}{
Create a project from an HDFS file source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$HdfsProjectsCreate(hdfsProjectCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{hdfsProjectCreate}}{\link{HdfsProjectCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a project from an HDFS file via WebHDFS API. Represent the file using URL, optionally, port, and optionally, user/password credentials. For example, {\"url\": \"hdfs://\\<ip\\>/path/to/file.csv\", \"port\": \"50070\"}.


This method invokes \verb{POST /hdfsProjects/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{ProjectCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
hdfsProjectCreate <- HdfsProjectCreate$new() # HdfsProjectCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$HdfsProjectsCreate(hdfsProjectCreate=hdfsProjectCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-JobsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-JobsDelete}{}}}
\subsection{Method \code{JobsDelete()}}{
Cancel Job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$JobsDelete(projectId, jobId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{jobId}}{character. The job ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Cancel a pending job.


This method invokes \verb{DELETE /projects/\{projectId\}/jobs/\{jobId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The job has been canceled.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
jobId <- 'jobId_example' # character | The job ID

api.instance <- ProjectsApi$new()
result <- api.instance$JobsDelete(projectId, jobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-JobsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-JobsList}{}}}
\subsection{Method \code{JobsList()}}{
List project jobs
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$JobsList(projectId, status = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{status}}{Enum < \link{queue, inprogress, error} > If provided, only jobs with the same status will be included in the results; otherwise, queued and inprogress jobs (but not errored jobs) will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the project's jobs.


This method invokes \verb{GET /projects/\{projectId\}/jobs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The project's jobs
\itemize{
}
}
}

\subsection{Returns}{
\link{JobListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
status <- 'status_example' # character | If provided, only jobs with the same status will be included in the results; otherwise, queued and inprogress jobs (but not errored jobs) will be returned.

api.instance <- ProjectsApi$new()
result <- api.instance$JobsList(projectId, status=status)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-JobsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-JobsRetrieve}{}}}
\subsection{Method \code{JobsRetrieve()}}{
Get job
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$JobsRetrieve(projectId, jobId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{jobId}}{character. The job ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve details for a job that has been started but has not yet completed.


This method invokes \verb{GET /projects/\{projectId\}/jobs/\{jobId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The job details
\itemize{
}
\item \strong{\code{303}} The requested job has already finished. See the Location header for the job details.
\itemize{
}
}
}

\subsection{Returns}{
\link{JobDetailsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
jobId <- 'jobId_example' # character | The job ID

api.instance <- ProjectsApi$new()
result <- api.instance$JobsRetrieve(projectId, jobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-List"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-List}{}}}
\subsection{Method \code{List()}}{
List projects
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$List(
  projectName = NULL,
  projectId = NULL,
  orderBy = NULL,
  featureDiscovery = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectName}}{character. if provided will filter returned projects for projects with matching names}

\item{\code{projectId}}{\link{OneOfstringarray}. if provided will filter returned projects with matching project IDs}

\item{\code{orderBy}}{Enum < \link{projectName, -projectName} > if provided will order the results by this field}

\item{\code{featureDiscovery}}{Enum < \link{false, False, true, True} > Return only feature discovery projects}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all available projects.


This method invokes \verb{GET /projects/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The list of projects
\itemize{
}
}
}

\subsection{Returns}{
list( \link{ProjectDetailsResponse} )
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectName <- 'projectName_example' # character | if provided will filter returned projects for projects with matching names
projectId <- list(c('projectId_example')) # OneOfstringarray | if provided will filter returned projects with matching project IDs
orderBy <- 'orderBy_example' # character | if provided will order the results by this field
featureDiscovery <- 'featureDiscovery_example' # character | Return only feature discovery projects

api.instance <- ProjectsApi$new()
result <- api.instance$List(projectName=projectName, projectId=projectId, orderBy=orderBy, featureDiscovery=featureDiscovery)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ModelingFeaturelistsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ModelingFeaturelistsCreate}{}}}
\subsection{Method \code{ModelingFeaturelistsCreate()}}{
Create a new modeling featurelist.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ModelingFeaturelistsCreate(
  projectId,
  createFeaturelist = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{createFeaturelist}}{\link{CreateFeaturelist}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create new modeling featurelist from list of feature names. Only time series projects differentiate between modeling and input featurelists. On other projects, this route will behave the same as :<http:post>:/api/v2/projects/(projectId)/featurelists/. On time series projects, this can be used after the target has been set in order to create a new featurelist on the modeling features, although the previously mentioned route for creating featurelists will be disabled. On time series projects, only modeling features may be passed to this route to create a featurelist.


This method invokes \verb{POST /projects/\{projectId\}/modelingFeaturelists/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The newly created featurelist in the same format as :http:get:`/api/v2/projects/(projectId)/modelingFeaturelists/(featurelistId)/`.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeaturelistResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
createFeaturelist <- CreateFeaturelist$new() # CreateFeaturelist | 

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsCreate(projectId, createFeaturelist=createFeaturelist)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ModelingFeaturelistsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ModelingFeaturelistsDelete}{}}}
\subsection{Method \code{ModelingFeaturelistsDelete()}}{
Delete a specified modeling featurelist.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ModelingFeaturelistsDelete(
  projectId,
  featurelistId,
  dryRun = "false",
  deleteDependencies = "false",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{featurelistId}}{character. The featurelist ID.}

\item{\code{dryRun}}{Enum < \link{false, False, true, True} > Preview the deletion results without actually deleting the featurelist.}

\item{\code{deleteDependencies}}{Enum < \link{false, False, true, True} > Automatically delete all dependencies of a featurelist. If false (default), will only delete the featurelist if it has no dependencies. The value of deleteDependencies will not be used if dryRun is true.If a featurelist has dependencies, deleteDependencies must be true for the request to succeed.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a specified modeling featurelist. All models using a featurelist, whether as the training featurelist or as a monotonic constraint featurelist, will also be deleted when the deletion is executed and any queued or running jobs using it will be cancelled. Similarly, predictions made on these models will also be deleted. All the entities that are to be deleted with a featurelist are described as \"dependencies\" of it. When deleting a featurelist with dependencies, users must pass an additional query parameter deleteDependencies to confirm they want to delete the featurelist and all its dependencies. Without that option, only featurelists with no dependencies may be successfully deleted. Featurelists configured into the project as a default featurelist or as a default monotonic constraint featurelist cannot be deleted. Featurelists used in a model deployment cannot be deleted until the model deployment is deleted. Modeling featurelists are featurelists of modeling features, and are the appropriate featurelists to use when creating models or restarting the autopilot. In a time series project, these will be distinct from those returned from :<http:get>:/api/v2/projects/(projectId)/featurelists/ while in other projects these will be identical.


This method invokes \verb{DELETE /projects/\{projectId\}/modelingFeaturelists/\{featurelistId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{FeaturelistDestroyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.
dryRun <- "false" # character | Preview the deletion results without actually deleting the featurelist.
deleteDependencies <- "false" # character | Automatically delete all dependencies of a featurelist. If false (default), will only delete the featurelist if it has no dependencies. The value of deleteDependencies will not be used if dryRun is true.If a featurelist has dependencies, deleteDependencies must be true for the request to succeed.

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsDelete(projectId, featurelistId, dryRun=dryRun, deleteDependencies=deleteDependencies)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ModelingFeaturelistsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ModelingFeaturelistsList}{}}}
\subsection{Method \code{ModelingFeaturelistsList()}}{
List all modeling featurelists from a project
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ModelingFeaturelistsList(offset, limit, projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned. If 0, all results.}

\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all modeling featurelists from the project requested by ID. This route will only become available after the target and partitioning options have been set for a project. Modeling featurelists are featurelists of modeling features, and are the correct featurelists to use when creating models or restarting the autopilot. In a time series project, these will differ from those returned from :<http:get>:/api/v2/projects/(projectId)/featurelists/ while in other projects these will be identical. See the `documentation <input_vs_modeling>` for more information on the distinction between input and modeling data in time series projects.


This method invokes \verb{GET /projects/\{projectId\}/modelingFeaturelists/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of requested project modeling featurelists.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeaturelistListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
projectId <- 'projectId_example' # character | The project ID

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsList(offset, limit, projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ModelingFeaturelistsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ModelingFeaturelistsPatch}{}}}
\subsection{Method \code{ModelingFeaturelistsPatch()}}{
Update an existing modeling featurelist
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ModelingFeaturelistsPatch(
  projectId,
  featurelistId,
  updateFeaturelist = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{featurelistId}}{character. The featurelist ID.}

\item{\code{updateFeaturelist}}{\link{UpdateFeaturelist}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update an existing modeling featurelist by ID. In non-time series projects, \"modeling featurelists\" and \"featurelists\" routes behave the same, except \"modeling featurelists\" are only accessible after the project is ready for modeling. In time series projects, \"featurelists\" contain the input features before feature derivation that are used to derive the time series features, while \"modeling featurelists\" contain the derived time series features used for modeling.


This method invokes \verb{PATCH /projects/\{projectId\}/modelingFeaturelists/\{featurelistId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The modeling featurelist was successfully updated.
\itemize{
}
\item \strong{\code{422}} Update failed due to an invalid payload. This may be because the name is identical to an existing featurelist name.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.
updateFeaturelist <- UpdateFeaturelist$new() # UpdateFeaturelist | 

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsPatch(projectId, featurelistId, updateFeaturelist=updateFeaturelist)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ModelingFeaturelistsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ModelingFeaturelistsRetrieve}{}}}
\subsection{Method \code{ModelingFeaturelistsRetrieve()}}{
Retrieve a single modeling featurelist by ID
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ModelingFeaturelistsRetrieve(projectId, featurelistId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{featurelistId}}{character. The featurelist ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a single modeling featurelist by ID. When reporting the number of models that \"use\" a featurelist, a model is considered to use a featurelist if it is used as to train the model or as a monotonic constraint featurelist, or if the model is a blender with component models that use the featurelist. This route will only become available after the target and partitioning options have been set for a project. Modeling featurelists are featurelists of modeling features, and are the appropriate featurelists to use when creating models or restarting the autopilot. In a time series project, these will be distinct from those returned from :<http:get>:/api/v2/projects/(projectId)/featurelists/ while in other projects these will be identical.


This method invokes \verb{GET /projects/\{projectId\}/modelingFeaturelists/\{featurelistId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Modeling featurelist with specified ID.
\itemize{
}
}
}

\subsection{Returns}{
\link{FeaturelistResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
featurelistId <- 'featurelistId_example' # character | The featurelist ID.

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturelistsRetrieve(projectId, featurelistId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ModelingFeaturesFromDiscardedFeaturesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ModelingFeaturesFromDiscardedFeaturesCreate}{}}}
\subsection{Method \code{ModelingFeaturesFromDiscardedFeaturesCreate()}}{
Restore discarded time series features.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ModelingFeaturesFromDiscardedFeaturesCreate(
  projectId,
  modelingFeaturesCreateFromDiscarded = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelingFeaturesCreateFromDiscarded}}{\link{ModelingFeaturesCreateFromDiscarded}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Restore discarded time series features.


This method invokes \verb{POST /projects/\{projectId\}/modelingFeatures/fromDiscardedFeatures/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{404}} No discarded time series features information available.
\itemize{
}
\item \strong{\code{422}} Unable to process the request.
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelingFeaturesCreateFromDiscardedResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelingFeaturesCreateFromDiscarded <- ModelingFeaturesCreateFromDiscarded$new() # ModelingFeaturesCreateFromDiscarded | 

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturesFromDiscardedFeaturesCreate(projectId, modelingFeaturesCreateFromDiscarded=modelingFeaturesCreateFromDiscarded)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ModelingFeaturesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ModelingFeaturesList}{}}}
\subsection{Method \code{ModelingFeaturesList()}}{
List project modeling features.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ModelingFeaturesList(offset, limit, projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned. If 0, all results.}

\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the features from a project that are used for modeling with descriptive information.


This method invokes \verb{GET /projects/\{projectId\}/modelingFeatures/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Descriptive information for features.
\itemize{
}
\item \strong{\code{422}} Unable to process the request
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelingFeatureListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
projectId <- 'projectId_example' # character | The project ID

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturesList(offset, limit, projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-ModelingFeaturesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-ModelingFeaturesRetrieve}{}}}
\subsection{Method \code{ModelingFeaturesRetrieve()}}{
Retrieve project modeling feature.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$ModelingFeaturesRetrieve(projectId, featureName, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The ID of the project}

\item{\code{featureName}}{character. the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting)}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the specified modeling feature with descriptive information.


This method invokes \verb{GET /projects/\{projectId\}/modelingFeatures/\{featureName\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Descriptive information for feature.
\itemize{
}
\item \strong{\code{404}} Feature does not exist.
\itemize{
}
\item \strong{\code{422}} Unable to process the request
\itemize{
}
}
}

\subsection{Returns}{
\link{ModelingFeatureResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The ID of the project
featureName <- 'featureName_example' # character | the name of the feature Note: DataRobot renames some features, so the feature name may not be the one from your original data. You can use :http:get:`/api/v2/projects/(projectId)/features/` to list the features and check the name. Note to users with non-ascii features names: The feature name should be utf-8-encoded (before URL-quoting) 

api.instance <- ProjectsApi$new()
result <- api.instance$ModelingFeaturesRetrieve(projectId, featureName)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-MultiseriesIdsCrossSeriesPropertiesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-MultiseriesIdsCrossSeriesPropertiesList}{}}}
\subsection{Method \code{MultiseriesIdsCrossSeriesPropertiesList()}}{
Retrieve eligible cross-series group-by columns.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$MultiseriesIdsCrossSeriesPropertiesList(
  projectId,
  multiseriesId,
  crossSeriesGroupByColumns = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to retrieve cross-series group-by columns for.}

\item{\code{multiseriesId}}{character. The name of the column to be used as the multiseries ID column.}

\item{\code{crossSeriesGroupByColumns}}{\link{OneOfstringarray}. The names of the columns to retrieve the validation status for. If not specified, all eligible columns will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve eligible cross-series group-by columns.  Note that validation will have to have been triggered via :<http:post>:/api/v2/projects/(projectId)/crossSeriesProperties/ in order for results to appear here.


This method invokes \verb{GET /projects/\{projectId\}/multiseriesIds/\{multiseriesId\}/crossSeriesProperties/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Request was successful.
\itemize{
}
}
}

\subsection{Returns}{
\link{CrossSeriesGroupByColumnRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to retrieve cross-series group-by columns for.
multiseriesId <- 'multiseriesId_example' # character | The name of the column to be used as the multiseries ID column.
crossSeriesGroupByColumns <- list(c('crossSeriesGroupByColumns_example')) # OneOfstringarray | The names of the columns to retrieve the validation status for. If not specified, all eligible columns will be returned.

api.instance <- ProjectsApi$new()
result <- api.instance$MultiseriesIdsCrossSeriesPropertiesList(projectId, multiseriesId, crossSeriesGroupByColumns=crossSeriesGroupByColumns)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-MultiseriesNamesList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-MultiseriesNamesList}{}}}
\subsection{Method \code{MultiseriesNamesList()}}{
List the names of a multiseries project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$MultiseriesNamesList(projectId, offset = 0, limit = 100, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the individual series names of a multiseries project


This method invokes \verb{GET /projects/\{projectId\}/multiseriesNames/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{MultiseriesNamesControllerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- ProjectsApi$new()
result <- api.instance$MultiseriesNamesList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-MultiseriesPropertiesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-MultiseriesPropertiesCreate}{}}}
\subsection{Method \code{MultiseriesPropertiesCreate()}}{
Detect multiseries properties
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$MultiseriesPropertiesCreate(
  projectId,
  multiseriesPayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{multiseriesPayload}}{\link{MultiseriesPayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Analyze relationships between potential partition and multiseries ID columns. Time series projects require that each timestamp have at most one row corresponding to it. However, multiple series of data can be handled within a single project by designating a multiseries ID column that assigns each row to a particular series. See the `multiseries <multiseries>` docs on time series projects for more information. A detection job analyzing the relationship between the multiseries ID column and the datetime partition column must be ran before it can be used. If the desired multiseries ID column(s) are known, it can be specified to limit the analysis to only those columns.


This method invokes \verb{POST /projects/\{projectId\}/multiseriesProperties/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Request to analyze relationships between potential partition and multiseries ID columns was submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
multiseriesPayload <- MultiseriesPayload$new() # MultiseriesPayload | 

api.instance <- ProjectsApi$new()
result <- api.instance$MultiseriesPropertiesCreate(projectId, multiseriesPayload=multiseriesPayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-Patch"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-Patch}{}}}
\subsection{Method \code{Patch()}}{
Update project
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$Patch(projectId, projectUpdate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{projectUpdate}}{\link{ProjectUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Change project name, worker count, or unlock the holdout.   If any of the optional json arguments are not provided, that aspect of the project will not be altered.


This method invokes \verb{PATCH /projects/\{projectId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The project was successfully updated
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
projectUpdate <- ProjectUpdate$new() # ProjectUpdate | 

api.instance <- ProjectsApi$new()
result <- api.instance$Patch(projectId, projectUpdate=projectUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-RelationshipsConfigurationList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-RelationshipsConfigurationList}{}}}
\subsection{Method \code{RelationshipsConfigurationList()}}{
Retrieve relationships configuration for a project
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$RelationshipsConfigurationList(projectId, configId = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{configId}}{character. Id of Secondary Dataset Configuration}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve relationships configuration for a project


This method invokes \verb{GET /projects/\{projectId\}/relationshipsConfiguration/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Project relationships configuration.
\itemize{
}
\item \strong{\code{404}} Data was not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RelationshipsConfigResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
configId <- 'configId_example' # character | Id of Secondary Dataset Configuration

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationList(projectId, configId=configId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-RelationshipsConfigurationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-RelationshipsConfigurationsCreate}{}}}
\subsection{Method \code{RelationshipsConfigurationsCreate()}}{
Create a relationships configuration
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$RelationshipsConfigurationsCreate(
  relationshipsConfigCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{relationshipsConfigCreate}}{\link{RelationshipsConfigCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a relationships configuration


This method invokes \verb{POST /relationshipsConfigurations/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}}
\itemize{
}
\item \strong{\code{422}} User input fails validation
\itemize{
}
}
}

\subsection{Returns}{
\link{RelationshipsConfigResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
relationshipsConfigCreate <- RelationshipsConfigCreate$new() # RelationshipsConfigCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationsCreate(relationshipsConfigCreate=relationshipsConfigCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-RelationshipsConfigurationsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-RelationshipsConfigurationsDelete}{}}}
\subsection{Method \code{RelationshipsConfigurationsDelete()}}{
Delete a relationships configuration
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$RelationshipsConfigurationsDelete(
  relationshipsConfigurationId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{relationshipsConfigurationId}}{character. Id of the relationships configuration to delete}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a relationships configuration


This method invokes \verb{DELETE /relationshipsConfigurations/\{relationshipsConfigurationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
\item \strong{\code{404}} Relationships configuration not found
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
relationshipsConfigurationId <- 'relationshipsConfigurationId_example' # character | Id of the relationships configuration to delete

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationsDelete(relationshipsConfigurationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-RelationshipsConfigurationsPut"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-RelationshipsConfigurationsPut}{}}}
\subsection{Method \code{RelationshipsConfigurationsPut()}}{
Replace a relationships configuration
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$RelationshipsConfigurationsPut(
  relationshipsConfigurationId,
  relationshipsConfigCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{relationshipsConfigurationId}}{character. Id of the relationships configuration to delete}

\item{\code{relationshipsConfigCreate}}{\link{RelationshipsConfigCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Replace a relationships configuration


This method invokes \verb{PUT /relationshipsConfigurations/\{relationshipsConfigurationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{422}} User input fails validation
\itemize{
}
}
}

\subsection{Returns}{
\link{RelationshipsConfigResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
relationshipsConfigurationId <- 'relationshipsConfigurationId_example' # character | Id of the relationships configuration to delete
relationshipsConfigCreate <- RelationshipsConfigCreate$new() # RelationshipsConfigCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationsPut(relationshipsConfigurationId, relationshipsConfigCreate=relationshipsConfigCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-RelationshipsConfigurationsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-RelationshipsConfigurationsRetrieve}{}}}
\subsection{Method \code{RelationshipsConfigurationsRetrieve()}}{
Retrieve a relationships configuration
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$RelationshipsConfigurationsRetrieve(
  relationshipsConfigurationId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{relationshipsConfigurationId}}{character. Id of the relationships configuration to delete}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a relationships configuration


This method invokes \verb{GET /relationshipsConfigurations/\{relationshipsConfigurationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} Relationships configuration cannot be found
\itemize{
}
}
}

\subsection{Returns}{
\link{RelationshipsConfigResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
relationshipsConfigurationId <- 'relationshipsConfigurationId_example' # character | Id of the relationships configuration to delete

api.instance <- ProjectsApi$new()
result <- api.instance$RelationshipsConfigurationsRetrieve(relationshipsConfigurationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-Retrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-Retrieve}{}}}
\subsection{Method \code{Retrieve()}}{
Get project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$Retrieve(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Look up a particular project


This method invokes \verb{GET /projects/\{projectId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The project.
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$Retrieve(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SecondaryDatasetsConfigurationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SecondaryDatasetsConfigurationsCreate}{}}}
\subsection{Method \code{SecondaryDatasetsConfigurationsCreate()}}{
Create secondary dataset configurations for a project.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SecondaryDatasetsConfigurationsCreate(
  projectId,
  secondaryDatasetCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{secondaryDatasetCreate}}{\link{SecondaryDatasetCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create secondary dataset configurations for a project.


This method invokes \verb{POST /projects/\{projectId\}/secondaryDatasetsConfigurations/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Secondary dataset configuration created with allowable type mismatches
\itemize{
}
\item \strong{\code{201}} Secondary dataset configuration created with no errors.
\itemize{
}
\item \strong{\code{204}} Validation of secondary dataset configuration is successful
\itemize{
}
\item \strong{\code{422}} Validation of secondary dataset configuration failed.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
secondaryDatasetCreate <- SecondaryDatasetCreate$new() # SecondaryDatasetCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$SecondaryDatasetsConfigurationsCreate(projectId, secondaryDatasetCreate=secondaryDatasetCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SecondaryDatasetsConfigurationsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SecondaryDatasetsConfigurationsDelete}{}}}
\subsection{Method \code{SecondaryDatasetsConfigurationsDelete()}}{
Soft deletes a secondary dataset configuration.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SecondaryDatasetsConfigurationsDelete(
  projectId,
  secondaryDatasetConfigId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{secondaryDatasetConfigId}}{character. Secondary dataset configuration ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Soft deletes a secondary dataset configuration.


This method invokes \verb{DELETE /projects/\{projectId\}/secondaryDatasetsConfigurations/\{secondaryDatasetConfigId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Secondary dataset configuration successfully soft deleted.
\itemize{
}
\item \strong{\code{404}} Data is not found.
\itemize{
}
\item \strong{\code{409}} Dataset has already been deleted
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
secondaryDatasetConfigId <- 'secondaryDatasetConfigId_example' # character | Secondary dataset configuration ID

api.instance <- ProjectsApi$new()
result <- api.instance$SecondaryDatasetsConfigurationsDelete(projectId, secondaryDatasetConfigId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SecondaryDatasetsConfigurationsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SecondaryDatasetsConfigurationsList}{}}}
\subsection{Method \code{SecondaryDatasetsConfigurationsList()}}{
List all secondary dataset configurations for a project
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SecondaryDatasetsConfigurationsList(
  projectId,
  featurelistId = NULL,
  modelId = NULL,
  offset = 0,
  limit = 100,
  includeDeleted = "false",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{featurelistId}}{character. feature list ID of the model}

\item{\code{modelId}}{character. ID of the model}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{includeDeleted}}{Enum < \link{false, False, true, True} > Include deleted records.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all secondary dataset configurations for a project, optionally filtered by feature list id.


This method invokes \verb{GET /projects/\{projectId\}/secondaryDatasetsConfigurations/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of secondary dataset configurations.
\itemize{
}
\item \strong{\code{404}} Data is not found.
\itemize{
}
\item \strong{\code{422}} Unable to process the request
\itemize{
}
}
}

\subsection{Returns}{
\link{SecondaryDatasetConfigListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
featurelistId <- 'featurelistId_example' # character | feature list ID of the model
modelId <- 'modelId_example' # character | ID of the model
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
includeDeleted <- "false" # character | Include deleted records.

api.instance <- ProjectsApi$new()
result <- api.instance$SecondaryDatasetsConfigurationsList(projectId, featurelistId=featurelistId, modelId=modelId, offset=offset, limit=limit, includeDeleted=includeDeleted)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SecondaryDatasetsConfigurationsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SecondaryDatasetsConfigurationsRetrieve}{}}}
\subsection{Method \code{SecondaryDatasetsConfigurationsRetrieve()}}{
Retrieve secondary dataset configuration by ID.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SecondaryDatasetsConfigurationsRetrieve(
  projectId,
  secondaryDatasetConfigId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{secondaryDatasetConfigId}}{character. Secondary dataset configuration ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve secondary dataset configuration by ID.


This method invokes \verb{GET /projects/\{projectId\}/secondaryDatasetsConfigurations/\{secondaryDatasetConfigId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Secondary dataset configuration.
\itemize{
}
\item \strong{\code{404}} Data is not found.
\itemize{
}
\item \strong{\code{422}} Unable to process the request
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectSecondaryDatasetConfigResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
secondaryDatasetConfigId <- 'secondaryDatasetConfigId_example' # character | Secondary dataset configuration ID

api.instance <- ProjectsApi$new()
result <- api.instance$SecondaryDatasetsConfigurationsRetrieve(projectId, secondaryDatasetConfigId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SegmentationTaskJobResultsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SegmentationTaskJobResultsRetrieve}{}}}
\subsection{Method \code{SegmentationTaskJobResultsRetrieve()}}{
Retrieve segmentation task statuses.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SegmentationTaskJobResultsRetrieve(
  projectId,
  segmentationTaskId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{segmentationTaskId}}{character. The ID of the segmentation task to check the status of.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the statuses of segmentation task jobs associated with the ID.


This method invokes \verb{GET /projects/\{projectId\}/segmentationTaskJobResults/\{segmentationTaskId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{SegmentationResultsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentationTaskId <- 'segmentationTaskId_example' # character | The ID of the segmentation task to check the status of.

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTaskJobResultsRetrieve(projectId, segmentationTaskId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SegmentationTasksCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SegmentationTasksCreate}{}}}
\subsection{Method \code{SegmentationTasksCreate()}}{
Create segmentation tasks.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SegmentationTasksCreate(
  projectId,
  segmentationTaskCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{segmentationTaskCreate}}{\link{SegmentationTaskCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create segmentation tasks for the dataset used in the project.


This method invokes \verb{POST /projects/\{projectId\}/segmentationTasks/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job submitted. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentationTaskCreate <- SegmentationTaskCreate$new() # SegmentationTaskCreate | 

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTasksCreate(projectId, segmentationTaskCreate=segmentationTaskCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SegmentationTasksList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SegmentationTasksList}{}}}
\subsection{Method \code{SegmentationTasksList()}}{
List segmentation tasks.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SegmentationTasksList(projectId, offset = 0, limit = 10, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all segmentation tasks created for the project.


This method invokes \verb{GET /projects/\{projectId\}/segmentationTasks/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{SegmentationTaskListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 10 # integer | At most this many results are returned.

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTasksList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SegmentationTasksMappingsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SegmentationTasksMappingsList}{}}}
\subsection{Method \code{SegmentationTasksMappingsList()}}{
Retrieve seriesId to segmentId mappings.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SegmentationTasksMappingsList(
  projectId,
  segmentationTaskId,
  offset = 0,
  limit = 10,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{segmentationTaskId}}{character. The ID of the segmentation task.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the seriesId to segmentId mappings for a Segmentation Task.


This method invokes \verb{GET /projects/\{projectId\}/segmentationTasks/\{segmentationTaskId\}/mappings/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{SegmentationTaskSegmentMappingsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentationTaskId <- 'segmentationTaskId_example' # character | The ID of the segmentation task.
offset <- 0 # integer | This many results will be skipped.
limit <- 10 # integer | At most this many results are returned.

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTasksMappingsList(projectId, segmentationTaskId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SegmentationTasksRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SegmentationTasksRetrieve}{}}}
\subsection{Method \code{SegmentationTasksRetrieve()}}{
Retrieve segmentation task.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SegmentationTasksRetrieve(projectId, segmentationTaskId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{segmentationTaskId}}{character. The ID of the segmentation task.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve information about a segmentation task.


This method invokes \verb{GET /projects/\{projectId\}/segmentationTasks/\{segmentationTaskId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{SegmentationTaskResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentationTaskId <- 'segmentationTaskId_example' # character | The ID of the segmentation task.

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentationTasksRetrieve(projectId, segmentationTaskId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-SegmentsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-SegmentsPatch}{}}}
\subsection{Method \code{SegmentsPatch()}}{
Update child segment project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$SegmentsPatch(
  projectId,
  segmentId,
  projectSegmentUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{segmentId}}{character. The name of the segment}

\item{\code{projectSegmentUpdate}}{\link{ProjectSegmentUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The only supported operation right now is segment restart, which removes existing child segment project and starts another child project instead for the given segment. Should be only used for child segments which are stuck during project startup or upload.


This method invokes \verb{PATCH /projects/\{projectId\}/segments/\{segmentId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The segment is updated.
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectSegmentUpdateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
segmentId <- 'segmentId_example' # character | The name of the segment
projectSegmentUpdate <- ProjectSegmentUpdate$new() # ProjectSegmentUpdate | 

api.instance <- ProjectsApi$new()
result <- api.instance$SegmentsPatch(projectId, segmentId, projectSegmentUpdate=projectSegmentUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-StatusList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-StatusList}{}}}
\subsection{Method \code{StatusList()}}{
Check project status
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$StatusList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Check the status of a project


This method invokes \verb{GET /projects/\{projectId\}/status/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The project status
\itemize{
}
}
}

\subsection{Returns}{
\link{ProjectStatusResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- ProjectsApi$new()
result <- api.instance$StatusList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-TypeTransformFeaturesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-TypeTransformFeaturesCreate}{}}}
\subsection{Method \code{TypeTransformFeaturesCreate()}}{
Create a new feature by changing the type of an existing one.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$TypeTransformFeaturesCreate(
  projectId,
  featureTransform = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to create the feature in.}

\item{\code{featureTransform}}{\link{FeatureTransform}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new feature by changing the type of an existing one.


This method invokes \verb{POST /projects/\{projectId\}/typeTransformFeatures/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{422}} Unable to process the request
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to create the feature in.
featureTransform <- FeatureTransform$new() # FeatureTransform | 

api.instance <- ProjectsApi$new()
result <- api.instance$TypeTransformFeaturesCreate(projectId, featureTransform=featureTransform)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ProjectsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
