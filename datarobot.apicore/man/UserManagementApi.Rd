% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_management_api.R
\docType{class}
\name{UserManagementApi}
\alias{UserManagementApi}
\title{UserManagement operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.UserManagement
}
\examples{

## ------------------------------------------------
## Method `UserManagementApi$GroupsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userGroupCreate <- UserGroupCreate$new() # UserGroupCreate | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsCreate(userGroupCreate=userGroupCreate)
}

## ------------------------------------------------
## Method `UserManagementApi$GroupsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsDelete(groupId)
}

## ------------------------------------------------
## Method `UserManagementApi$GroupsDeleteMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userGroupBulkDelete <- UserGroupBulkDelete$new() # UserGroupBulkDelete | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsDeleteMany(userGroupBulkDelete=userGroupBulkDelete)
}

## ------------------------------------------------
## Method `UserManagementApi$GroupsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.
userGroupUpdate <- UserGroupUpdate$new() # UserGroupUpdate | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsPatch(groupId, userGroupUpdate=userGroupUpdate)
}

## ------------------------------------------------
## Method `UserManagementApi$GroupsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsRetrieve(groupId)
}

## ------------------------------------------------
## Method `UserManagementApi$GroupsUsersCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.
modifyUsersInGroup <- ModifyUsersInGroup$new() # ModifyUsersInGroup | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsUsersCreate(groupId, modifyUsersInGroup=modifyUsersInGroup)
}

## ------------------------------------------------
## Method `UserManagementApi$GroupsUsersDeleteMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.
modifyUsersInGroup <- ModifyUsersInGroup$new() # ModifyUsersInGroup | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsUsersDeleteMany(groupId, modifyUsersInGroup=modifyUsersInGroup)
}

## ------------------------------------------------
## Method `UserManagementApi$GroupsUsersList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 50 # integer | At most this many results are returned.
groupId <- 'groupId_example' # character | The identifier of the user group.
namePart <- "" # character | User groups must contain the substring.
orderBy <- 'orderBy_example' # character | The order that the results should be retrieved in. Prefix the attribute name with a dash to sort in descending order, e.g. `orderBy=-username`.
isActive <- 'isActive_example' # character | If specified, filters results by account activation status.
isAdmin <- 'isAdmin_example' # character | If specified, filters results to admin users (system and org) or non-admin users.

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsUsersList(offset, limit, groupId, namePart=namePart, orderBy=orderBy, isActive=isActive, isAdmin=isAdmin)
}

## ------------------------------------------------
## Method `UserManagementApi$OrganizationsJobsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
organizationId <- 'organizationId_example' # character | Organization ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsJobsList(offset, limit, organizationId)
}

## ------------------------------------------------
## Method `UserManagementApi$OrganizationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned.
offset <- 0 # integer | The number of records to skip over. Default 0.
namePart <- "" # character | Only return the organizations whose names contain the given substring.

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsList(limit, offset=offset, namePart=namePart)
}

## ------------------------------------------------
## Method `UserManagementApi$OrganizationsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | Organization ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsRetrieve(organizationId)
}

## ------------------------------------------------
## Method `UserManagementApi$OrganizationsUsersCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | Organization ID
organizationUser <- OrganizationUser$new() # OrganizationUser | 

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersCreate(organizationId, organizationUser=organizationUser)
}

## ------------------------------------------------
## Method `UserManagementApi$OrganizationsUsersDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | The organization the user is in
userId <- 'userId_example' # character | The user ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersDelete(organizationId, userId)
}

## ------------------------------------------------
## Method `UserManagementApi$OrganizationsUsersList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
organizationId <- 'organizationId_example' # character | Organization ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersList(offset, limit, organizationId)
}

## ------------------------------------------------
## Method `UserManagementApi$OrganizationsUsersPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | The organization the user is in
userId <- 'userId_example' # character | The user ID
organizationUserPatch <- OrganizationUserPatch$new() # OrganizationUserPatch | 

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersPatch(organizationId, userId, organizationUserPatch=organizationUserPatch)
}

## ------------------------------------------------
## Method `UserManagementApi$OrganizationsUsersRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | The organization the user is in
userId <- 'userId_example' # character | The user ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersRetrieve(organizationId, userId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupJobsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
usersPermadelete <- UsersPermadelete$new() # UsersPermadelete | 

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupJobsCreate(usersPermadelete=usersPermadelete)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupJobsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupJobsDelete(statusId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupJobsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupJobsRetrieve(statusId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupPreviewJobsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
usersPermadelete <- UsersPermadelete$new() # UsersPermadelete | 

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewJobsCreate(usersPermadelete=usersPermadelete)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupPreviewJobsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewJobsDelete(statusId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupPreviewJobsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewJobsRetrieve(statusId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupPreviewsContentList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewsContentList(reportId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupPreviewsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewsDelete(reportId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupPreviewsDeleteParamsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewsDeleteParamsList(reportId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupPreviewsStatisticsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewsStatisticsList(reportId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupSummariesContentList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupSummariesContentList(reportId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupSummariesDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupSummariesDelete(reportId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupSummariesDeleteParamsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupSummariesDeleteParamsList(reportId)
}

## ------------------------------------------------
## Method `UserManagementApi$UserCleanupSummariesStatisticsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupSummariesStatisticsList(reportId)
}

## ------------------------------------------------
## Method `UserManagementApi$UsersCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userCreate <- UserCreate$new() # UserCreate | 

api.instance <- UserManagementApi$new()
result <- api.instance$UsersCreate(userCreate=userCreate)
}

## ------------------------------------------------
## Method `UserManagementApi$UsersLimitsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userId <- 'userId_example' # character | The id of the user to retrieve usage limits for

api.instance <- UserManagementApi$new()
result <- api.instance$UsersLimitsList(userId)
}

## ------------------------------------------------
## Method `UserManagementApi$UsersLimitsPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userId <- 'userId_example' # character | The id of the user to update usage limits for
userLimitsPatchBody <- UserLimitsPatchBody$new() # UserLimitsPatchBody | 

api.instance <- UserManagementApi$new()
result <- api.instance$UsersLimitsPatchMany(userId, userLimitsPatchBody=userLimitsPatchBody)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-UserManagementApi-new}{\code{UserManagementApi$new()}}
\item \href{#method-UserManagementApi-GroupsCreate}{\code{UserManagementApi$GroupsCreate()}}
\item \href{#method-UserManagementApi-GroupsDelete}{\code{UserManagementApi$GroupsDelete()}}
\item \href{#method-UserManagementApi-GroupsDeleteMany}{\code{UserManagementApi$GroupsDeleteMany()}}
\item \href{#method-UserManagementApi-GroupsPatch}{\code{UserManagementApi$GroupsPatch()}}
\item \href{#method-UserManagementApi-GroupsRetrieve}{\code{UserManagementApi$GroupsRetrieve()}}
\item \href{#method-UserManagementApi-GroupsUsersCreate}{\code{UserManagementApi$GroupsUsersCreate()}}
\item \href{#method-UserManagementApi-GroupsUsersDeleteMany}{\code{UserManagementApi$GroupsUsersDeleteMany()}}
\item \href{#method-UserManagementApi-GroupsUsersList}{\code{UserManagementApi$GroupsUsersList()}}
\item \href{#method-UserManagementApi-OrganizationsJobsList}{\code{UserManagementApi$OrganizationsJobsList()}}
\item \href{#method-UserManagementApi-OrganizationsList}{\code{UserManagementApi$OrganizationsList()}}
\item \href{#method-UserManagementApi-OrganizationsRetrieve}{\code{UserManagementApi$OrganizationsRetrieve()}}
\item \href{#method-UserManagementApi-OrganizationsUsersCreate}{\code{UserManagementApi$OrganizationsUsersCreate()}}
\item \href{#method-UserManagementApi-OrganizationsUsersDelete}{\code{UserManagementApi$OrganizationsUsersDelete()}}
\item \href{#method-UserManagementApi-OrganizationsUsersList}{\code{UserManagementApi$OrganizationsUsersList()}}
\item \href{#method-UserManagementApi-OrganizationsUsersPatch}{\code{UserManagementApi$OrganizationsUsersPatch()}}
\item \href{#method-UserManagementApi-OrganizationsUsersRetrieve}{\code{UserManagementApi$OrganizationsUsersRetrieve()}}
\item \href{#method-UserManagementApi-UserCleanupJobsCreate}{\code{UserManagementApi$UserCleanupJobsCreate()}}
\item \href{#method-UserManagementApi-UserCleanupJobsDelete}{\code{UserManagementApi$UserCleanupJobsDelete()}}
\item \href{#method-UserManagementApi-UserCleanupJobsRetrieve}{\code{UserManagementApi$UserCleanupJobsRetrieve()}}
\item \href{#method-UserManagementApi-UserCleanupPreviewJobsCreate}{\code{UserManagementApi$UserCleanupPreviewJobsCreate()}}
\item \href{#method-UserManagementApi-UserCleanupPreviewJobsDelete}{\code{UserManagementApi$UserCleanupPreviewJobsDelete()}}
\item \href{#method-UserManagementApi-UserCleanupPreviewJobsRetrieve}{\code{UserManagementApi$UserCleanupPreviewJobsRetrieve()}}
\item \href{#method-UserManagementApi-UserCleanupPreviewsContentList}{\code{UserManagementApi$UserCleanupPreviewsContentList()}}
\item \href{#method-UserManagementApi-UserCleanupPreviewsDelete}{\code{UserManagementApi$UserCleanupPreviewsDelete()}}
\item \href{#method-UserManagementApi-UserCleanupPreviewsDeleteParamsList}{\code{UserManagementApi$UserCleanupPreviewsDeleteParamsList()}}
\item \href{#method-UserManagementApi-UserCleanupPreviewsStatisticsList}{\code{UserManagementApi$UserCleanupPreviewsStatisticsList()}}
\item \href{#method-UserManagementApi-UserCleanupSummariesContentList}{\code{UserManagementApi$UserCleanupSummariesContentList()}}
\item \href{#method-UserManagementApi-UserCleanupSummariesDelete}{\code{UserManagementApi$UserCleanupSummariesDelete()}}
\item \href{#method-UserManagementApi-UserCleanupSummariesDeleteParamsList}{\code{UserManagementApi$UserCleanupSummariesDeleteParamsList()}}
\item \href{#method-UserManagementApi-UserCleanupSummariesStatisticsList}{\code{UserManagementApi$UserCleanupSummariesStatisticsList()}}
\item \href{#method-UserManagementApi-UsersCreate}{\code{UserManagementApi$UsersCreate()}}
\item \href{#method-UserManagementApi-UsersLimitsList}{\code{UserManagementApi$UsersLimitsList()}}
\item \href{#method-UserManagementApi-UsersLimitsPatchMany}{\code{UserManagementApi$UsersLimitsPatchMany()}}
\item \href{#method-UserManagementApi-clone}{\code{UserManagementApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-GroupsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-GroupsCreate}{}}}
\subsection{Method \code{GroupsCreate()}}{
Create user group
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$GroupsCreate(userGroupCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userGroupCreate}}{\link{UserGroupCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new user group.


This method invokes \verb{POST /groups/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}}
\itemize{
}
\item \strong{\code{422}} Unable to process the request.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserGroupResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userGroupCreate <- UserGroupCreate$new() # UserGroupCreate | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsCreate(userGroupCreate=userGroupCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-GroupsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-GroupsDelete}{}}}
\subsection{Method \code{GroupsDelete()}}{
Delete user group
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$GroupsDelete(groupId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{groupId}}{character. The identifier of the user group.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the user group.


This method invokes \verb{DELETE /groups/\{groupId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
\item \strong{\code{422}} Multiple user groups found by the identifier.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsDelete(groupId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-GroupsDeleteMany"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-GroupsDeleteMany}{}}}
\subsection{Method \code{GroupsDeleteMany()}}{
Delete multiple user groups
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$GroupsDeleteMany(userGroupBulkDelete = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userGroupBulkDelete}}{\link{UserGroupBulkDelete}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the user groups.


This method invokes \verb{DELETE /groups/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
\item \strong{\code{422}} Multiple user groups found by the identifier.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userGroupBulkDelete <- UserGroupBulkDelete$new() # UserGroupBulkDelete | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsDeleteMany(userGroupBulkDelete=userGroupBulkDelete)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-GroupsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-GroupsPatch}{}}}
\subsection{Method \code{GroupsPatch()}}{
Update user group
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$GroupsPatch(groupId, userGroupUpdate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{groupId}}{character. The identifier of the user group.}

\item{\code{userGroupUpdate}}{\link{UserGroupUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the user group.


This method invokes \verb{PATCH /groups/\{groupId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{422}} Unable to process the request.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserGroupResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.
userGroupUpdate <- UserGroupUpdate$new() # UserGroupUpdate | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsPatch(groupId, userGroupUpdate=userGroupUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-GroupsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-GroupsRetrieve}{}}}
\subsection{Method \code{GroupsRetrieve()}}{
Retrieve user group
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$GroupsRetrieve(groupId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{groupId}}{character. The identifier of the user group.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the user group.


This method invokes \verb{GET /groups/\{groupId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{422}} Multiple user groups found by the identifier.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserGroupResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsRetrieve(groupId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-GroupsUsersCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-GroupsUsersCreate}{}}}
\subsection{Method \code{GroupsUsersCreate()}}{
Add users to group
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$GroupsUsersCreate(groupId, modifyUsersInGroup = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{groupId}}{character. The identifier of the user group.}

\item{\code{modifyUsersInGroup}}{\link{ModifyUsersInGroup}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add users to the group.


This method invokes \verb{POST /groups/\{groupId\}/users/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{422}} Unable to process the request, or if the user does not belong to the group's organization, or if one is already in the maximum number of groups, or if the user is not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{AddUsersToGroupResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.
modifyUsersInGroup <- ModifyUsersInGroup$new() # ModifyUsersInGroup | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsUsersCreate(groupId, modifyUsersInGroup=modifyUsersInGroup)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-GroupsUsersDeleteMany"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-GroupsUsersDeleteMany}{}}}
\subsection{Method \code{GroupsUsersDeleteMany()}}{
Remove users from group
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$GroupsUsersDeleteMany(
  groupId,
  modifyUsersInGroup = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{groupId}}{character. The identifier of the user group.}

\item{\code{modifyUsersInGroup}}{\link{ModifyUsersInGroup}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Remove users from the group.


This method invokes \verb{DELETE /groups/\{groupId\}/users/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
\item \strong{\code{422}} The user was not found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
groupId <- 'groupId_example' # character | The identifier of the user group.
modifyUsersInGroup <- ModifyUsersInGroup$new() # ModifyUsersInGroup | 

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsUsersDeleteMany(groupId, modifyUsersInGroup=modifyUsersInGroup)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-GroupsUsersList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-GroupsUsersList}{}}}
\subsection{Method \code{GroupsUsersList()}}{
List users in group
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$GroupsUsersList(
  offset,
  limit,
  groupId,
  namePart = "",
  orderBy = NULL,
  isActive = NULL,
  isAdmin = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{groupId}}{character. The identifier of the user group.}

\item{\code{namePart}}{character. User groups must contain the substring.}

\item{\code{orderBy}}{Enum < \link{username, -username, userGroup, -userGroup, lastName, -lastName, firstName, -firstName, status, -status, expirationDate, -expirationDate} > The order that the results should be retrieved in. Prefix the attribute name with a dash to sort in descending order, e.g. `orderBy=-username`.}

\item{\code{isActive}}{Enum < \link{false, False, true, True} > If specified, filters results by account activation status.}

\item{\code{isAdmin}}{Enum < \link{false, False, true, True} > If specified, filters results to admin users (system and org) or non-admin users.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List users in the group.


This method invokes \verb{GET /groups/\{groupId\}/users/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ListUsersInGroupResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 50 # integer | At most this many results are returned.
groupId <- 'groupId_example' # character | The identifier of the user group.
namePart <- "" # character | User groups must contain the substring.
orderBy <- 'orderBy_example' # character | The order that the results should be retrieved in. Prefix the attribute name with a dash to sort in descending order, e.g. `orderBy=-username`.
isActive <- 'isActive_example' # character | If specified, filters results by account activation status.
isAdmin <- 'isAdmin_example' # character | If specified, filters results to admin users (system and org) or non-admin users.

api.instance <- UserManagementApi$new()
result <- api.instance$GroupsUsersList(offset, limit, groupId, namePart=namePart, orderBy=orderBy, isActive=isActive, isAdmin=isAdmin)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-OrganizationsJobsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-OrganizationsJobsList}{}}}
\subsection{Method \code{OrganizationsJobsList()}}{
List organization jobs
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$OrganizationsJobsList(offset, limit, organizationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned. If 0, all results.}

\item{\code{organizationId}}{character. Organization ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List currently running jobs belonging to this organization.


This method invokes \verb{GET /organizations/\{organizationId\}/jobs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{OrganizationJobListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
organizationId <- 'organizationId_example' # character | Organization ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsJobsList(offset, limit, organizationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-OrganizationsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-OrganizationsList}{}}}
\subsection{Method \code{OrganizationsList()}}{
List organizations
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$OrganizationsList(limit, offset = 0, namePart = "", ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{offset}}{integer. The number of records to skip over. Default 0.}

\item{\code{namePart}}{character. Only return the organizations whose names contain the given substring.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List organizations available in the system.


This method invokes \verb{GET /organizations/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{OrganizationListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned.
offset <- 0 # integer | The number of records to skip over. Default 0.
namePart <- "" # character | Only return the organizations whose names contain the given substring.

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsList(limit, offset=offset, namePart=namePart)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-OrganizationsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-OrganizationsRetrieve}{}}}
\subsection{Method \code{OrganizationsRetrieve()}}{
Retrieve organization
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$OrganizationsRetrieve(organizationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{organizationId}}{character. Organization ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the organization details.


This method invokes \verb{GET /organizations/\{organizationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{OrganizationRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | Organization ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsRetrieve(organizationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-OrganizationsUsersCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-OrganizationsUsersCreate}{}}}
\subsection{Method \code{OrganizationsUsersCreate()}}{
Add user to an existing organization.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$OrganizationsUsersCreate(
  organizationId,
  organizationUser = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{organizationId}}{character. Organization ID}

\item{\code{organizationUser}}{\link{OrganizationUser}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add user to an existing organization. A user can only be part of one organization at a time


This method invokes \verb{POST /organizations/\{organizationId\}/users/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}}
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Returns}{
\link{OrganizationUserCreatedResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | Organization ID
organizationUser <- OrganizationUser$new() # OrganizationUser | 

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersCreate(organizationId, organizationUser=organizationUser)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-OrganizationsUsersDelete"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-OrganizationsUsersDelete}{}}}
\subsection{Method \code{OrganizationsUsersDelete()}}{
Remove user from organization
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$OrganizationsUsersDelete(organizationId, userId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{organizationId}}{character. The organization the user is in}

\item{\code{userId}}{character. The user ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Remove the user from the organization.


This method invokes \verb{DELETE /organizations/\{organizationId\}/users/\{userId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | The organization the user is in
userId <- 'userId_example' # character | The user ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersDelete(organizationId, userId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-OrganizationsUsersList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-OrganizationsUsersList}{}}}
\subsection{Method \code{OrganizationsUsersList()}}{
List organization users
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$OrganizationsUsersList(offset, limit, organizationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned. If 0, all results.}

\item{\code{organizationId}}{character. Organization ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List memberships in this organization.


This method invokes \verb{GET /organizations/\{organizationId\}/users/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{OrganizationUserListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
organizationId <- 'organizationId_example' # character | Organization ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersList(offset, limit, organizationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-OrganizationsUsersPatch"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-OrganizationsUsersPatch}{}}}
\subsection{Method \code{OrganizationsUsersPatch()}}{
Patch organization's user
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$OrganizationsUsersPatch(
  organizationId,
  userId,
  organizationUserPatch = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{organizationId}}{character. The organization the user is in}

\item{\code{userId}}{character. The user ID}

\item{\code{organizationUserPatch}}{\link{OrganizationUserPatch}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Patch organization's user. Only system or the organization admin can perform this operation.


This method invokes \verb{PATCH /organizations/\{organizationId\}/users/\{userId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
\item \strong{\code{403}} Invalid Permissions
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | The organization the user is in
userId <- 'userId_example' # character | The user ID
organizationUserPatch <- OrganizationUserPatch$new() # OrganizationUserPatch | 

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersPatch(organizationId, userId, organizationUserPatch=organizationUserPatch)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-OrganizationsUsersRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-OrganizationsUsersRetrieve}{}}}
\subsection{Method \code{OrganizationsUsersRetrieve()}}{
Retrieve user from organization
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$OrganizationsUsersRetrieve(organizationId, userId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{organizationId}}{character. The organization the user is in}

\item{\code{userId}}{character. The user ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the user from this organization.


This method invokes \verb{GET /organizations/\{organizationId\}/users/\{userId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{OrganizationUserResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
organizationId <- 'organizationId_example' # character | The organization the user is in
userId <- 'userId_example' # character | The user ID

api.instance <- UserManagementApi$new()
result <- api.instance$OrganizationsUsersRetrieve(organizationId, userId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupJobsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupJobsCreate}{}}}
\subsection{Method \code{UserCleanupJobsCreate()}}{
Users permanent delete.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupJobsCreate(usersPermadelete = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{usersPermadelete}}{\link{UsersPermadelete}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Schedules a job which permanently delete the users represented by the provided users ids or organization id. Number of users to be deleted in one go is restricted by DELETED_USERS_BATCH_LIMIT system setting.


This method invokes \verb{POST /userCleanupJobs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The users delete job status link.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{409}} Self deletion or some users are already under deletion.
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
\item \strong{\code{500}} Failed to schedule users perma-delete job.
\itemize{
}
}
}

\subsection{Returns}{
\link{UsersPermadeleteJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
usersPermadelete <- UsersPermadelete$new() # UsersPermadelete | 

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupJobsCreate(usersPermadelete=usersPermadelete)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupJobsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupJobsDelete}{}}}
\subsection{Method \code{UserCleanupJobsDelete()}}{
Cancel users perma-deletion.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupJobsDelete(statusId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statusId}}{character. The ID of the status object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Cancel permanent deletion of the selected users.


This method invokes \verb{DELETE /userCleanupJobs/\{statusId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupJobsDelete(statusId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupJobsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupJobsRetrieve}{}}}
\subsection{Method \code{UserCleanupJobsRetrieve()}}{
Retrieve users perma-delete job status.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupJobsRetrieve(statusId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statusId}}{character. The ID of the status object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get async status of the users perma-delete job.


This method invokes \verb{GET /userCleanupJobs/\{statusId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Users perma-delete job status.
\itemize{
}
}
}

\subsection{Returns}{
\link{UsersPermadeleteJobStatusResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupJobsRetrieve(statusId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupPreviewJobsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupPreviewJobsCreate}{}}}
\subsection{Method \code{UserCleanupPreviewJobsCreate()}}{
Users permanent delete preview.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupPreviewJobsCreate(usersPermadelete = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{usersPermadelete}}{\link{UsersPermadelete}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Schedules a job for building preview for users selected for permanent deletion. Number of users to be deleted in one go is restricted by DELETED_USERS_BATCH_LIMIT system setting.


This method invokes \verb{POST /userCleanupPreviewJobs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The users delete preview job status link.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{409}} Self deletion or some users are already under deletion.
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
\item \strong{\code{500}} Failed to schedule perma-delete preview building job.
\itemize{
}
}
}

\subsection{Returns}{
\link{UsersPermadeletePreviewJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
usersPermadelete <- UsersPermadelete$new() # UsersPermadelete | 

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewJobsCreate(usersPermadelete=usersPermadelete)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupPreviewJobsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupPreviewJobsDelete}{}}}
\subsection{Method \code{UserCleanupPreviewJobsDelete()}}{
Cancel users perma-delete preview building.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupPreviewJobsDelete(statusId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statusId}}{character. The ID of the status object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Cancel scheduled users permanent delete preview building.


This method invokes \verb{DELETE /userCleanupPreviewJobs/\{statusId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewJobsDelete(statusId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupPreviewJobsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupPreviewJobsRetrieve}{}}}
\subsection{Method \code{UserCleanupPreviewJobsRetrieve()}}{
Retrieve users perma-delete preview job status.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupPreviewJobsRetrieve(statusId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{statusId}}{character. The ID of the status object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get async status of the users perma-delete preview building job.


This method invokes \verb{GET /userCleanupPreviewJobs/\{statusId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Perma-delete preview job status.
\itemize{
}
}
}

\subsection{Returns}{
\link{UsersPermadeletePreviewJobStatusResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
statusId <- 'statusId_example' # character | The ID of the status object.

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewJobsRetrieve(statusId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupPreviewsContentList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupPreviewsContentList}{}}}
\subsection{Method \code{UserCleanupPreviewsContentList()}}{
Users permanent delete extended preview.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupPreviewsContentList(reportId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reportId}}{character. Report ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve users permanent delete extended preview.


This method invokes \verb{GET /userCleanupPreviews/\{reportId\}/content/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The users delete extended preview file.
\itemize{
\item \strong{\code{ContentMinusDisposition}} attachment; filename=\"<\"filename\">\".json JSON file with users delete extended preview.
\item \strong{\code{ContentMinusType}} application/json
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewsContentList(reportId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupPreviewsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupPreviewsDelete}{}}}
\subsection{Method \code{UserCleanupPreviewsDelete()}}{
Delete users permanent delete report.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupPreviewsDelete(reportId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reportId}}{character. Report ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete users permanent delete report.


This method invokes \verb{DELETE /userCleanupPreviews/\{reportId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Report is deleted.
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewsDelete(reportId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupPreviewsDeleteParamsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupPreviewsDeleteParamsList}{}}}
\subsection{Method \code{UserCleanupPreviewsDeleteParamsList()}}{
Users permanent delete report parameters.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupPreviewsDeleteParamsList(reportId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reportId}}{character. Report ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve users permanent delete report parameters.


This method invokes \verb{GET /userCleanupPreviews/\{reportId\}/deleteParams/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The users delete report parameters.
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Returns}{
\link{UsersPermadeleteDeleteReportParamsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewsDeleteParamsList(reportId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupPreviewsStatisticsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupPreviewsStatisticsList}{}}}
\subsection{Method \code{UserCleanupPreviewsStatisticsList()}}{
Users permanent delete preview statistics.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupPreviewsStatisticsList(reportId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reportId}}{character. Report ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve users permanent delete preview statistics.


This method invokes \verb{GET /userCleanupPreviews/\{reportId\}/statistics/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The users delete preview statistics.
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Returns}{
\link{UsersPermadeletePreviewStatisticsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupPreviewsStatisticsList(reportId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupSummariesContentList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupSummariesContentList}{}}}
\subsection{Method \code{UserCleanupSummariesContentList()}}{
Users permanent delete extended summary.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupSummariesContentList(reportId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reportId}}{character. Report ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve users permanent delete extended summary.


This method invokes \verb{GET /userCleanupSummaries/\{reportId\}/content/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The users delete extended summary file.
\itemize{
\item \strong{\code{ContentMinusDisposition}} attachment; filename=\"<\"filename\">\".json JSON file with with users delete extended summary.
\item \strong{\code{ContentMinusType}} application/json
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupSummariesContentList(reportId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupSummariesDelete"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupSummariesDelete}{}}}
\subsection{Method \code{UserCleanupSummariesDelete()}}{
Delete users permanent delete report.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupSummariesDelete(reportId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reportId}}{character. Report ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete users permanent delete report.


This method invokes \verb{DELETE /userCleanupSummaries/\{reportId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Report is deleted.
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupSummariesDelete(reportId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupSummariesDeleteParamsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupSummariesDeleteParamsList}{}}}
\subsection{Method \code{UserCleanupSummariesDeleteParamsList()}}{
Users permanent delete report parameters.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupSummariesDeleteParamsList(reportId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reportId}}{character. Report ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve users permanent delete report parameters.


This method invokes \verb{GET /userCleanupSummaries/\{reportId\}/deleteParams/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The users delete report parameters.
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Returns}{
\link{UsersPermadeleteDeleteReportParamsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupSummariesDeleteParamsList(reportId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UserCleanupSummariesStatisticsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UserCleanupSummariesStatisticsList}{}}}
\subsection{Method \code{UserCleanupSummariesStatisticsList()}}{
Users permanent delete summary statistics.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UserCleanupSummariesStatisticsList(reportId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reportId}}{character. Report ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve users permanent delete summary statistics.


This method invokes \verb{GET /userCleanupSummaries/\{reportId\}/statistics/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The users delete summary statistics.
\itemize{
}
\item \strong{\code{422}} Invalid data
\itemize{
}
}
}

\subsection{Returns}{
\link{UsersPermadeleteSummaryReportStatisticsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
reportId <- 'reportId_example' # character | Report ID

api.instance <- UserManagementApi$new()
result <- api.instance$UserCleanupSummariesStatisticsList(reportId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UsersCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UsersCreate}{}}}
\subsection{Method \code{UsersCreate()}}{
Create a User and add them to an organisation.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UsersCreate(userCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userCreate}}{\link{UserCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a User and add them to an organisation.


This method invokes \verb{POST /users/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The username and userId of the newly created user.
\itemize{
}
\item \strong{\code{409}} User already exists.
\itemize{
}
\item \strong{\code{422}} Password invalid/required.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userCreate <- UserCreate$new() # UserCreate | 

api.instance <- UserManagementApi$new()
result <- api.instance$UsersCreate(userCreate=userCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UsersLimitsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UsersLimitsList}{}}}
\subsection{Method \code{UsersLimitsList()}}{
Get the rate limits and account limits for a user
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UsersLimitsList(userId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userId}}{character. The id of the user to retrieve usage limits for}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
User limits are those limits on an account that can be updated per-user. Rate limits that can't be modified per-user are not returned here.


This method invokes \verb{GET /users/\{userId\}/limits/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data retrieved successfully
\itemize{
}
}
}

\subsection{Returns}{
\link{UserLimitsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userId <- 'userId_example' # character | The id of the user to retrieve usage limits for

api.instance <- UserManagementApi$new()
result <- api.instance$UsersLimitsList(userId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-UsersLimitsPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-UsersLimitsPatchMany}{}}}
\subsection{Method \code{UsersLimitsPatchMany()}}{
Update the rate limits and account limits for a user
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$UsersLimitsPatchMany(userId, userLimitsPatchBody = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userId}}{character. The id of the user to update usage limits for}

\item{\code{userLimitsPatchBody}}{\link{UserLimitsPatchBody}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
User limits are those limits on an account that can be updated per-user.Rate limits that can't be modified per-user are not returned here.


This method invokes \verb{PATCH /users/\{userId\}/limits/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data updated successfully
\itemize{
}
\item \strong{\code{409}} The limit being updated is not available to be updated
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userId <- 'userId_example' # character | The id of the user to update usage limits for
userLimitsPatchBody <- UserLimitsPatchBody$new() # UserLimitsPatchBody | 

api.instance <- UserManagementApi$new()
result <- api.instance$UsersLimitsPatchMany(userId, userLimitsPatchBody=userLimitsPatchBody)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserManagementApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-UserManagementApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UserManagementApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
