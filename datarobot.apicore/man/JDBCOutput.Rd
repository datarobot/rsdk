% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jdbc_output.R
\docType{class}
\name{JDBCOutput}
\alias{JDBCOutput}
\title{JDBCOutput}
\format{
An \code{R6Class} generator object
}
\description{
JDBCOutput Class
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{catalog}}{character \link{optional} The name of the specified database catalog to write output data to.}

\item{\code{commitInterval}}{integer \link{optional} Defines a time interval in seconds between each commit is done to the JDBC source. If set to 0, the batch prediction operation will write the entire job before committing.}

\item{\code{createTableIfNotExists}}{character \link{optional} Attempt to create the table first if no existing one is detected, before writing data with the strategy defined in the `statementType` parameter.}

\item{\code{credentialId}}{character \link{optional} The ID of the credential holding information about a user with write access to the JDBC data source.}

\item{\code{dataStoreId}}{character ID of the data store to connect to}

\item{\code{schema}}{character \link{optional} The name of the specified database schema to write the results to.}

\item{\code{statementType}}{character The statement type to use when writing the results. Deprecation Warning: Use of `create_table` is now discouraged. Use one of the other possibilities along with the parameter `createTableIfNotExists` set to `true`.}

\item{\code{table}}{character The name of the specified database table to write the results to.If this job is executed with a job definition, then template variables are available which will be substituted for timestamps: {{ current_run_timestamp }}, {{ last_completed_run_time }}, {{ last_scheduled_run_time }}, {{ next_scheduled_run_time }}, {{ current_run_time }}}

\item{\code{type}}{character Type name for this intake type}

\item{\code{updateColumns}}{list( character ) \link{optional} The column names to be updated if statementType is set to either update or upsert.}

\item{\code{whereColumns}}{list( character ) \link{optional} The column names to be used in the where clause if statementType is set to update or upsert.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-JDBCOutput-new}{\code{JDBCOutput$new()}}
\item \href{#method-JDBCOutput-validate}{\code{JDBCOutput$validate()}}
\item \href{#method-JDBCOutput-toJSON}{\code{JDBCOutput$toJSON()}}
\item \href{#method-JDBCOutput-fromJSON}{\code{JDBCOutput$fromJSON()}}
\item \href{#method-JDBCOutput-clone}{\code{JDBCOutput$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JDBCOutput-new"></a>}}
\if{latex}{\out{\hypertarget{method-JDBCOutput-new}{}}}
\subsection{Method \code{new()}}{
A function used to initialize an instance of this class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JDBCOutput$new(
  dataStoreId = NULL,
  statementType = NULL,
  table = NULL,
  type = NULL,
  catalog = NULL,
  commitInterval = 600,
  createTableIfNotExists = FALSE,
  credentialId = NULL,
  schema = NULL,
  updateColumns = NULL,
  whereColumns = NULL,
  validateParams = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{ID of the data store to connect to}

\item{\code{statementType}}{The statement type to use when writing the results. Deprecation Warning: Use of `create_table` is now discouraged. Use one of the other possibilities along with the parameter `createTableIfNotExists` set to `true`.}

\item{\code{table}}{The name of the specified database table to write the results to.If this job is executed with a job definition, then template variables are available which will be substituted for timestamps: {{ current_run_timestamp }}, {{ last_completed_run_time }}, {{ last_scheduled_run_time }}, {{ next_scheduled_run_time }}, {{ current_run_time }}}

\item{\code{type}}{Type name for this intake type}

\item{\code{catalog}}{The name of the specified database catalog to write output data to.}

\item{\code{commitInterval}}{Defines a time interval in seconds between each commit is done to the JDBC source. If set to 0, the batch prediction operation will write the entire job before committing.}

\item{\code{createTableIfNotExists}}{Attempt to create the table first if no existing one is detected, before writing data with the strategy defined in the `statementType` parameter.}

\item{\code{credentialId}}{The ID of the credential holding information about a user with write access to the JDBC data source.}

\item{\code{schema}}{The name of the specified database schema to write the results to.}

\item{\code{updateColumns}}{The column names to be updated if statementType is set to either update or upsert.}

\item{\code{whereColumns}}{The column names to be used in the where clause if statementType is set to update or upsert.}

\item{\code{validateParams}}{An optional param for auto validating this object's parameters before initialization. Default FALSE.}

\item{\code{...}}{Any additional keyword arguments to be passed into this object for initialization.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JDBCOutput-validate"></a>}}
\if{latex}{\out{\hypertarget{method-JDBCOutput-validate}{}}}
\subsection{Method \code{validate()}}{
A helper function that provides public access to the private validateProps function. This allows users the ability
to programmatically validate objects before sending them to DataRobot.
checking this objects set properties.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JDBCOutput$validate()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JDBCOutput-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-JDBCOutput-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
A helper function that serializes this object into a JSON encoded string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JDBCOutput$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JDBCOutput-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-JDBCOutput-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
A helper function that deserializes a JSON string into an instance of this class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JDBCOutput$fromJSON(JDBCOutputJson, validateParams = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{JDBCOutputJson}}{A JSON encoded string representation of a class instance.}

\item{\code{validateParams}}{An optional param for auto validating this object's parameters after deserialization. Default FALSE.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-JDBCOutput-clone"></a>}}
\if{latex}{\out{\hypertarget{method-JDBCOutput-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{JDBCOutput$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
