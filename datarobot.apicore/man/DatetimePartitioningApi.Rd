% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datetime_partitioning_api.R
\docType{class}
\name{DatetimePartitioningApi}
\alias{DatetimePartitioningApi}
\title{DatetimePartitioning operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.DatetimePartitioning
}
\examples{

## ------------------------------------------------
## Method `DatetimePartitioningApi$ProjectsDatetimePartitioningCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
datetimePartitioningDataForOpenApi <- DatetimePartitioningDataForOpenApi$new() # DatetimePartitioningDataForOpenApi |

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsDatetimePartitioningCreate(projectId, datetimePartitioningDataForOpenApi=datetimePartitioningDataForOpenApi)
}

## ------------------------------------------------
## Method `DatetimePartitioningApi$ProjectsDatetimePartitioningList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsDatetimePartitioningList(projectId)
}

## ------------------------------------------------
## Method `DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
optimizedDatetimePartitioningData <- OptimizedDatetimePartitioningData$new() # OptimizedDatetimePartitioningData |

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsOptimizedDatetimePartitioningsCreate(projectId, optimizedDatetimePartitioningData=optimizedDatetimePartitioningData)
}

## ------------------------------------------------
## Method `DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 10 # integer | At most this many results are returned.
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsOptimizedDatetimePartitioningsList(limit, projectId, offset=offset)
}

## ------------------------------------------------
## Method `DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
datetimePartitioningId <- 'datetimePartitioningId_example' # character | The ID of the datetime partitioning to retrieve.

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsOptimizedDatetimePartitioningsRetrieve(projectId, datetimePartitioningId)
}

## ------------------------------------------------
## Method `DatetimePartitioningApi$ProjectsTimeSeriesFeatureLogFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsTimeSeriesFeatureLogFileList(projectId)
}

## ------------------------------------------------
## Method `DatetimePartitioningApi$ProjectsTimeSeriesFeatureLogList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsTimeSeriesFeatureLogList(projectId, offset=offset, limit=limit)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DatetimePartitioningApi$new()}}
\item \href{#method-ProjectsDatetimePartitioningCreate}{\code{DatetimePartitioningApi$ProjectsDatetimePartitioningCreate()}}
\item \href{#method-ProjectsDatetimePartitioningList}{\code{DatetimePartitioningApi$ProjectsDatetimePartitioningList()}}
\item \href{#method-ProjectsOptimizedDatetimePartitioningsCreate}{\code{DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsCreate()}}
\item \href{#method-ProjectsOptimizedDatetimePartitioningsList}{\code{DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsList()}}
\item \href{#method-ProjectsOptimizedDatetimePartitioningsRetrieve}{\code{DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsRetrieve()}}
\item \href{#method-ProjectsTimeSeriesFeatureLogFileList}{\code{DatetimePartitioningApi$ProjectsTimeSeriesFeatureLogFileList()}}
\item \href{#method-ProjectsTimeSeriesFeatureLogList}{\code{DatetimePartitioningApi$ProjectsTimeSeriesFeatureLogList()}}
\item \href{#method-clone}{\code{DatetimePartitioningApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimePartitioningCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimePartitioningCreate}{}}}
\subsection{Method \code{ProjectsDatetimePartitioningCreate()}}{
Preview the fully specified datetime partitioning generated by the requested configuration.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$ProjectsDatetimePartitioningCreate(
  projectId,
  datetimePartitioningDataForOpenApi = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{datetimePartitioningDataForOpenApi}}{\link{DatetimePartitioningDataForOpenApi}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Preview the fully specified datetime partitioning generated by the requested configuration.  Populates the full datetime partitioning that would be used if the same arguments were passed to :http:patch:`/api/v2/projects/(projectId)/aim/` based on the requested configuration, generating defaults for all non-specified values, so that potential configurations can be tested prior to setting the target and applying a configuration.  `useTimeSeries` controls whether a time series project should be created or a normal project that uses datetime partitioning. See :ref:`Time-Series Projects<time_series_overview>` for more detail on the differences between time series projects and datetime partitioned projects. Time-series projects are only available to some users and use the additional settings of `featureDerivationWindowStart` and `featureDerivationWindowEnd` to establish feature derivation window and `forecastWindowStart` and `forecastWindowEnd` to establish a forecast window. The overview referenced above provides more information about using feature derivation and forecast windows.  When specifying a feature derivation window of a forecast window, the number of units it spans (end - start) must be an integer multiple of the timeStep of the datetimePartitionColumn.  All durations and datetimes should be specified in accordance with the :ref:`timestamp and duration formatting rules<time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Generated datetime partitioning.
\itemize{
}
\item \strong{\code{404}} Requested feature was not found.
\itemize{
}
\item \strong{\code{422}} Partitioning generation failed.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatetimePartitioningResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
datetimePartitioningDataForOpenApi <- DatetimePartitioningDataForOpenApi$new() # DatetimePartitioningDataForOpenApi |

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsDatetimePartitioningCreate(projectId, datetimePartitioningDataForOpenApi=datetimePartitioningDataForOpenApi)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsDatetimePartitioningList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsDatetimePartitioningList}{}}}
\subsection{Method \code{ProjectsDatetimePartitioningList()}}{
Retrieve datetime partitioning configuration.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$ProjectsDatetimePartitioningList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve datetime partitioning configuration  The datetime partition object in the response describes the full partitioning parameters. Since it becomes available after the target has been fully specified and the project is ready for modeling, there are some additional fields available compared to the response from :http:post:`/api/v2/projects/(projectId)/datetimePartitioning/`.  The available training data corresponds to all the data available for training, while the primary training data corresponds to the data that can be used to train while ensuring that all backtests are available. If a model is trained with more data than is available in the primary training data, then all backtests may not have scores available.  All durations and datetimes will be specified in accordance with the :ref:`timestamp and duration formatting rules<time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Generated datetime partitioning.
\itemize{
}
\item \strong{\code{422}} Partitioning has not been set.
\itemize{
}
}
}

\subsection{Returns}{
\link{FinalDatetimePartitioningResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsDatetimePartitioningList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsOptimizedDatetimePartitioningsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsOptimizedDatetimePartitioningsCreate}{}}}
\subsection{Method \code{ProjectsOptimizedDatetimePartitioningsCreate()}}{
Create an optimized datetime partitioning configuration using the target.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsCreate(
  projectId,
  optimizedDatetimePartitioningData = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{optimizedDatetimePartitioningData}}{\link{OptimizedDatetimePartitioningData}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create an optimized datetime partitioning configuration using the target.  Initializes a job to construct an optimized datetime partitioning using the date and target information to ensure that backtests sufficiently cover regions of interest in the target. This is an asynchronous job. The results of the asynchronous job (backtests and other parameters can be used in the synchronous version.  `useTimeSeries` controls whether a time series project should be created or a normal project that uses datetime partitioning. See :ref:`Time-Series Projects<time_series_overview>` for more detail on the differences between time series projects and datetime partitioned projects. Time-series projects are only available to some users and use the additional settings of `featureDerivationWindowStart` and `featureDerivationWindowEnd` to establish feature derivation window and `forecastWindowStart` and `forecastWindowEnd` to establish a forecast window. The overview referenced above provides more information about using feature derivation and forecast windows.  When specifying a feature derivation window of a forecast window, the number of units it spans (end - start) must be an integer multiple of the timeStep of the datetimePartitionColumn.  All durations and datetimes should be specified in accordance with the :ref:`timestamp and duration formatting rules<time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Generated datetime partitioning.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatetimePartitioningResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
optimizedDatetimePartitioningData <- OptimizedDatetimePartitioningData$new() # OptimizedDatetimePartitioningData |

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsOptimizedDatetimePartitioningsCreate(projectId, optimizedDatetimePartitioningData=optimizedDatetimePartitioningData)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsOptimizedDatetimePartitioningsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsOptimizedDatetimePartitioningsList}{}}}
\subsection{Method \code{ProjectsOptimizedDatetimePartitioningsList()}}{
List all created optimized datetime partitioning configurations
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsList(
  limit,
  projectId,
  offset = 0,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all created optimized datetime partitioning configurations


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of optimized datetime partitionings for projectId
\itemize{
}
}
}

\subsection{Returns}{
\link{OptimizedDatetimePartitioningListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 10 # integer | At most this many results are returned.
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsOptimizedDatetimePartitioningsList(limit, projectId, offset=offset)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsOptimizedDatetimePartitioningsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsOptimizedDatetimePartitioningsRetrieve}{}}}
\subsection{Method \code{ProjectsOptimizedDatetimePartitioningsRetrieve()}}{
Retrieve optimized datetime partitioning configuration
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$ProjectsOptimizedDatetimePartitioningsRetrieve(
  projectId,
  datetimePartitioningId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{datetimePartitioningId}}{character. The ID of the datetime partitioning to retrieve.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve optimized datetime partitioning configuration  The optimized datetime partition objects are structurally identical to the original datetime partition objects, however they are retrieved from a mongo database after creation as opposed to being calculated synchronously. The datetime partition object in the response describes the full partitioning parameters.  The available training data corresponds to all the data available for training, while the primary training data corresponds to the data that can be used to train while ensuring that all backtests are available. If a model is trained with more data than is available in the primary training data, then all backtests may not have scores available.  .. note:: All durations and datetimes should be specified in accordance with the :ref:`timestamp and duration formatting rules <time_format>`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Optimized datetime partitioning configuration
\itemize{
}
}
}

\subsection{Returns}{
\link{DatetimePartitioningResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
datetimePartitioningId <- 'datetimePartitioningId_example' # character | The ID of the datetime partitioning to retrieve.

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsOptimizedDatetimePartitioningsRetrieve(projectId, datetimePartitioningId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsTimeSeriesFeatureLogFileList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsTimeSeriesFeatureLogFileList}{}}}
\subsection{Method \code{ProjectsTimeSeriesFeatureLogFileList()}}{
Retrieve a text file containing the time series project feature log
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$ProjectsTimeSeriesFeatureLogFileList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a text file containing the time series project feature log.  The Time Series Feature Log provides details about the feature generation process for a time series project. It includes information about which features are generated and their priority,as well as the detected properties of the time series data such as whether the series is stationary, and periodicities detected.  This route is only supported for time series projects that have finished partitioning.  The feature derivation log will include information about:  * Maximum number of feature to be generated, e.g., ``Limit on the maximum number of feature in this project is 500`` * Number of derived features tested during the feature generation process, e.g., ``Total number of derived features during the feature generation process is 571`` * Number of generated features removed during the feature reduction process e.g. ``Total number of features removed during the feature reduction process is 472`` * Number of remaining features after the combined feature generation and reduction process, e.g., ``The finalized number of features is 99`` * Detected stationarity of the series, e.g., ``Series detected as non-stationary`` * Detected presence of multiplicative trend in the series, e.g., ``Multiplicative trend detected`` * Detected periodicities in the series, e.g., ``Detected periodicities: 7 day`` * Window sizes used in rolling statistics / lag extractors, e.g., ``The window sizes chosen to be: 2 months (because the time step is 1 month and Feature Derivation Window is 2 months)`` * Features that are specified as known-in-advance, e.g., ``Variables treated as apriori: holiday`` * Details about why certain variables are transformed in the input data, e.g., ``Generating variable \"y (log)\" from \"y\" because multiplicative trend is detected`` * Details about features generated as time series features, and their priority, e.g., ``Generating feature \"date (actual)\" from \"date\" (priority: 1)``


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
\item \strong{\code{ContentMinusDisposition}} `attachment;filename=<filename>.txt` The suggested filename is dynamically generated
\item \strong{\code{ContentMinusType}} MIME type of the returned data
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsTimeSeriesFeatureLogFileList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsTimeSeriesFeatureLogList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsTimeSeriesFeatureLogList}{}}}
\subsection{Method \code{ProjectsTimeSeriesFeatureLogList()}}{
Retrieve the feature derivation log content and log length for a time series project as JSON.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$ProjectsTimeSeriesFeatureLogList(
  projectId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the feature derivation log content and log length for a time series project as JSON.  The Time Series Feature Log provides details about the feature generation process for a time series project. It includes information about which features are generated and their priority,as well as the detected properties of the time series data such as whether the series is stationary, and periodicities detected.  This route is only supported for time series projects that have finished partitioning.  The feature derivation log will include information about:  * Detected stationarity of the series, e.g., ``Series detected as non-stationary`` * Detected presence of multiplicative trend in the series, e.g., ``Multiplicative trend detected`` * Detected periodicities in the series, e.g., ``Detected periodicities: 7 day`` * Maximum number of feature to be generated, e.g., ``Maximum number of feature to be generated is 1440`` * Window sizes used in rolling statistics / lag extractors, e.g., ``The window sizes chosen to be: 2 months`` * Features that are specified as known-in-advance, e.g., ``Variables treated as apriori: holiday`` * Details about features generated as timeseries features, and their priority, e.g., ``Generating feature \"date (actual)\" from \"date\" (priority: 1)`` * Details about why certain variables are transformed in the input data, e.g., ``Generating variable \"y (log)\" from \"y\" because multiplicative trend is detected``


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{TimeSeriesFeatureLogListControllerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- DatetimePartitioningApi$new()
result <- api.instance$ProjectsTimeSeriesFeatureLogList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimePartitioningApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
