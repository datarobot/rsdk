% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_connectivity_api.R
\docType{class}
\name{DataConnectivityApi}
\alias{DataConnectivityApi}
\title{DataConnectivity operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.DataConnectivity
}
\examples{

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataDriverFileCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
driverUploadRequest <- DriverUploadRequest$new() # DriverUploadRequest |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriverFileCreate(driverUploadRequest=driverUploadRequest)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataDriversConfigurationList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
driverId <- 'driverId_example' # character | Driver ID.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversConfigurationList(driverId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataDriversCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
createDriverRequest <- CreateDriverRequest$new() # CreateDriverRequest |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversCreate(createDriverRequest=createDriverRequest)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataDriversDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
driverId <- 'driverId_example' # character | Driver ID.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversDelete(driverId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataDriversList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversList()
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataDriversPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
driverId <- 'driverId_example' # character | Driver ID.
updateDriverRequest <- UpdateDriverRequest$new() # UpdateDriverRequest |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversPatch(driverId, updateDriverRequest=updateDriverRequest)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataDriversRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
driverId <- 'driverId_example' # character | Driver ID.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversRetrieve(driverId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesAccessControlList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
username <- 'username_example' # character | Optional, only return the access control information for a user with this username.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesAccessControlList(offset, limit, dataSourceId, username=username, userId=userId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesAccessControlPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
sharingUpdateOrRemoveWithGrant <- SharingUpdateOrRemoveWithGrant$new() # SharingUpdateOrRemoveWithGrant |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesAccessControlPatchMany(dataSourceId, sharingUpdateOrRemoveWithGrant=sharingUpdateOrRemoveWithGrant)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataSourceCreate <- DataSourceCreate$new() # DataSourceCreate |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesCreate(dataSourceCreate=dataSourceCreate)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesDelete(dataSourceId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
type <- "jdbc" # character | Data source type to filter by.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesList(type=type)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
dataSourceUpdate <- DataSourceUpdate$new() # DataSourceUpdate |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesPatch(dataSourceId, dataSourceUpdate=dataSourceUpdate)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesPermissionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesPermissionsList(dataSourceId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesRetrieve(dataSourceId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesSharedRolesList(offset, limit, dataSourceId, id=id, name=name, shareRecipientType=shareRecipientType)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataSourcesSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
sharedRolesUpdateWithGrant <- SharedRolesUpdateWithGrant$new() # SharedRolesUpdateWithGrant |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesSharedRolesPatchMany(dataSourceId, sharedRolesUpdateWithGrant=sharedRolesUpdateWithGrant)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresAccessControlPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
sharingUpdateOrRemoveWithGrant <- SharingUpdateOrRemoveWithGrant$new() # SharingUpdateOrRemoveWithGrant |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresAccessControlPatchMany(dataStoreId, sharingUpdateOrRemoveWithGrant=sharingUpdateOrRemoveWithGrant)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresColumnsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreColumnsList <- DataStoreColumnsList$new() # DataStoreColumnsList |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresColumnsCreate(dataStoreId, dataStoreColumnsList=dataStoreColumnsList)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreCreate <- DataStoreCreate$new() # DataStoreCreate |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresCreate(dataStoreCreate=dataStoreCreate)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresCredentialsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
types <- OneOfstringarray$new() # OneOfstringarray | Includes only credentials of the specified type. Repeat the parameter for filtering on multiple statuses.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresCredentialsList(dataStoreId, offset=offset, limit=limit, types=types)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresDelete(dataStoreId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
type <- "jdbc" # character | Includes only data stores of the specified type or any if set to `all`.
showHidden <- "False" # character | Specifies whether non-visible OAuth fields are shown.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresList(offset=offset, limit=limit, type=type, showHidden=showHidden)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreUpdate <- DataStoreUpdate$new() # DataStoreUpdate |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresPatch(dataStoreId, dataStoreUpdate=dataStoreUpdate)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresPermissionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresPermissionsList(dataStoreId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresRetrieve(dataStoreId)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresSchemasCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreCredentials <- DataStoreCredentials$new() # DataStoreCredentials |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresSchemasCreate(dataStoreId, dataStoreCredentials=dataStoreCredentials)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresSharedRolesList(offset, limit, dataStoreId, id=id, name=name, shareRecipientType=shareRecipientType)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
sharedRolesUpdateWithGrant <- SharedRolesUpdateWithGrant$new() # SharedRolesUpdateWithGrant |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresSharedRolesPatchMany(dataStoreId, sharedRolesUpdateWithGrant=sharedRolesUpdateWithGrant)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresTablesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreTables <- DataStoreTables$new() # DataStoreTables |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresTablesCreate(dataStoreId, dataStoreTables=dataStoreTables)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresTestCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreCredentialsWithCredentialsTypeSupport <- DataStoreCredentialsWithCredentialsTypeSupport$new() # DataStoreCredentialsWithCredentialsTypeSupport |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresTestCreate(dataStoreId, dataStoreCredentialsWithCredentialsTypeSupport=dataStoreCredentialsWithCredentialsTypeSupport)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDataStoresVerifySQLCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreSqlVerify <- DataStoreSQLVerify$new() # DataStoreSQLVerify |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresVerifySQLCreate(dataStoreId, dataStoreSqlVerify=dataStoreSqlVerify)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDriverConfigurationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
type <- "jdbc" # character | Type of driver configurations to return.
showHidden <- "False" # character | If True, include hidden configurations in response.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDriverConfigurationsList(offset=offset, limit=limit, type=type, showHidden=showHidden)
}

## ------------------------------------------------
## Method `DataConnectivityApi$ExternalDriverConfigurationsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
configurationId <- 'configurationId_example' # character | Driver configuration ID

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDriverConfigurationsRetrieve(configurationId)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DataConnectivityApi$new()}}
\item \href{#method-ExternalDataDriverFileCreate}{\code{DataConnectivityApi$ExternalDataDriverFileCreate()}}
\item \href{#method-ExternalDataDriversConfigurationList}{\code{DataConnectivityApi$ExternalDataDriversConfigurationList()}}
\item \href{#method-ExternalDataDriversCreate}{\code{DataConnectivityApi$ExternalDataDriversCreate()}}
\item \href{#method-ExternalDataDriversDelete}{\code{DataConnectivityApi$ExternalDataDriversDelete()}}
\item \href{#method-ExternalDataDriversList}{\code{DataConnectivityApi$ExternalDataDriversList()}}
\item \href{#method-ExternalDataDriversPatch}{\code{DataConnectivityApi$ExternalDataDriversPatch()}}
\item \href{#method-ExternalDataDriversRetrieve}{\code{DataConnectivityApi$ExternalDataDriversRetrieve()}}
\item \href{#method-ExternalDataSourcesAccessControlList}{\code{DataConnectivityApi$ExternalDataSourcesAccessControlList()}}
\item \href{#method-ExternalDataSourcesAccessControlPatchMany}{\code{DataConnectivityApi$ExternalDataSourcesAccessControlPatchMany()}}
\item \href{#method-ExternalDataSourcesCreate}{\code{DataConnectivityApi$ExternalDataSourcesCreate()}}
\item \href{#method-ExternalDataSourcesDelete}{\code{DataConnectivityApi$ExternalDataSourcesDelete()}}
\item \href{#method-ExternalDataSourcesList}{\code{DataConnectivityApi$ExternalDataSourcesList()}}
\item \href{#method-ExternalDataSourcesPatch}{\code{DataConnectivityApi$ExternalDataSourcesPatch()}}
\item \href{#method-ExternalDataSourcesPermissionsList}{\code{DataConnectivityApi$ExternalDataSourcesPermissionsList()}}
\item \href{#method-ExternalDataSourcesRetrieve}{\code{DataConnectivityApi$ExternalDataSourcesRetrieve()}}
\item \href{#method-ExternalDataSourcesSharedRolesList}{\code{DataConnectivityApi$ExternalDataSourcesSharedRolesList()}}
\item \href{#method-ExternalDataSourcesSharedRolesPatchMany}{\code{DataConnectivityApi$ExternalDataSourcesSharedRolesPatchMany()}}
\item \href{#method-ExternalDataStoresAccessControlPatchMany}{\code{DataConnectivityApi$ExternalDataStoresAccessControlPatchMany()}}
\item \href{#method-ExternalDataStoresColumnsCreate}{\code{DataConnectivityApi$ExternalDataStoresColumnsCreate()}}
\item \href{#method-ExternalDataStoresCreate}{\code{DataConnectivityApi$ExternalDataStoresCreate()}}
\item \href{#method-ExternalDataStoresCredentialsList}{\code{DataConnectivityApi$ExternalDataStoresCredentialsList()}}
\item \href{#method-ExternalDataStoresDelete}{\code{DataConnectivityApi$ExternalDataStoresDelete()}}
\item \href{#method-ExternalDataStoresList}{\code{DataConnectivityApi$ExternalDataStoresList()}}
\item \href{#method-ExternalDataStoresPatch}{\code{DataConnectivityApi$ExternalDataStoresPatch()}}
\item \href{#method-ExternalDataStoresPermissionsList}{\code{DataConnectivityApi$ExternalDataStoresPermissionsList()}}
\item \href{#method-ExternalDataStoresRetrieve}{\code{DataConnectivityApi$ExternalDataStoresRetrieve()}}
\item \href{#method-ExternalDataStoresSchemasCreate}{\code{DataConnectivityApi$ExternalDataStoresSchemasCreate()}}
\item \href{#method-ExternalDataStoresSharedRolesList}{\code{DataConnectivityApi$ExternalDataStoresSharedRolesList()}}
\item \href{#method-ExternalDataStoresSharedRolesPatchMany}{\code{DataConnectivityApi$ExternalDataStoresSharedRolesPatchMany()}}
\item \href{#method-ExternalDataStoresTablesCreate}{\code{DataConnectivityApi$ExternalDataStoresTablesCreate()}}
\item \href{#method-ExternalDataStoresTestCreate}{\code{DataConnectivityApi$ExternalDataStoresTestCreate()}}
\item \href{#method-ExternalDataStoresVerifySQLCreate}{\code{DataConnectivityApi$ExternalDataStoresVerifySQLCreate()}}
\item \href{#method-ExternalDriverConfigurationsList}{\code{DataConnectivityApi$ExternalDriverConfigurationsList()}}
\item \href{#method-ExternalDriverConfigurationsRetrieve}{\code{DataConnectivityApi$ExternalDriverConfigurationsRetrieve()}}
\item \href{#method-clone}{\code{DataConnectivityApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataDriverFileCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataDriverFileCreate}{}}}
\subsection{Method \code{ExternalDataDriverFileCreate()}}{
Upload JDBC driver from file.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataDriverFileCreate(
  driverUploadRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{driverUploadRequest}}{\link{DriverUploadRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Upload JDBC driver from file. Only Java archive (.jar) files are supported.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{413}} JDBC driver JAR file size exceeds the configured limit.
\itemize{
}
}
}

\subsection{Returns}{
\link{DriverUploadResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
driverUploadRequest <- DriverUploadRequest$new() # DriverUploadRequest |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriverFileCreate(driverUploadRequest=driverUploadRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataDriversConfigurationList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataDriversConfigurationList}{}}}
\subsection{Method \code{ExternalDataDriversConfigurationList()}}{
Driver configuration details.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataDriversConfigurationList(driverId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{driverId}}{character. Driver ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the driver configuration with the specified ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Driver configuration retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DriverConfigurationRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
driverId <- 'driverId_example' # character | Driver ID.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversConfigurationList(driverId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataDriversCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataDriversCreate}{}}}
\subsection{Method \code{ExternalDataDriversCreate()}}{
Create a new JDBC driver.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataDriversCreate(createDriverRequest = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{createDriverRequest}}{\link{CreateDriverRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new JDBC driver. To create connections from fields, rather than supplying a JDBC URL, use 'configurationId'. When using 'configurationId', do not include 'canonicalName' or 'className' as they are part of the driver configuration. Specifying a 'version' is required as it is used in the construction of the canonicalName.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Details about new driver entity.
\itemize{
}
}
}

\subsection{Returns}{
\link{DriverResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
createDriverRequest <- CreateDriverRequest$new() # CreateDriverRequest |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversCreate(createDriverRequest=createDriverRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataDriversDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataDriversDelete}{}}}
\subsection{Method \code{ExternalDataDriversDelete()}}{
Delete the driver.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataDriversDelete(driverId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{driverId}}{character. Driver ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the driver with given ID if it is not used by any data store or data source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Driver deleted successfully.
\itemize{
}
\item \strong{\code{409}} Driver is in use by one or more data store or data source
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
driverId <- 'driverId_example' # character | Driver ID.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversDelete(driverId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataDriversList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataDriversList}{}}}
\subsection{Method \code{ExternalDataDriversList()}}{
List drivers
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataDriversList(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Fetch all drivers a user has access to.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Drivers accessible by the user.
\itemize{
}
}
}

\subsection{Returns}{
\link{DriverListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversList()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataDriversPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataDriversPatch}{}}}
\subsection{Method \code{ExternalDataDriversPatch()}}{
Update properties of an existing JDBC Driver.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataDriversPatch(
  driverId,
  updateDriverRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{driverId}}{character. Driver ID.}

\item{\code{updateDriverRequest}}{\link{UpdateDriverRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update properties of an existing JDBC driver. To change the canonicalName and className, you must first remove the driver configuration, if it exists, as its properties will otherwise override name changes.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Driver properties updated successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DriverResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
driverId <- 'driverId_example' # character | Driver ID.
updateDriverRequest <- UpdateDriverRequest$new() # UpdateDriverRequest |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversPatch(driverId, updateDriverRequest=updateDriverRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataDriversRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataDriversRetrieve}{}}}
\subsection{Method \code{ExternalDataDriversRetrieve()}}{
Retrieve driver details.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataDriversRetrieve(driverId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{driverId}}{character. Driver ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve driver details by ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Driver details retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DriverResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
driverId <- 'driverId_example' # character | Driver ID.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataDriversRetrieve(driverId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesAccessControlList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesAccessControlList}{}}}
\subsection{Method \code{ExternalDataSourcesAccessControlList()}}{
Get data source's access control list
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesAccessControlList(
  offset,
  limit,
  dataSourceId,
  username = NULL,
  userId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{dataSourceId}}{character. The ID of the Data Source.}

\item{\code{username}}{character. Optional, only return the access control information for a user with this username.}

\item{\code{userId}}{character. Optional, only return the access control information for a user with this user ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations who have access to this data source and their roles.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The data source's access control list.
\itemize{
}
\item \strong{\code{400}} Both username and userId were specified
\itemize{
}
\item \strong{\code{404}} Either the data source does not exist or the user does not have permissions to view the data source.
\itemize{
}
}
}

\subsection{Returns}{
\link{SharingListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
username <- 'username_example' # character | Optional, only return the access control information for a user with this username.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesAccessControlList(offset, limit, dataSourceId, username=username, userId=userId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesAccessControlPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesAccessControlPatchMany}{}}}
\subsection{Method \code{ExternalDataSourcesAccessControlPatchMany()}}{
Update data source's access controls
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesAccessControlPatchMany(
  dataSourceId,
  sharingUpdateOrRemoveWithGrant = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataSourceId}}{character. The ID of the Data Source.}

\item{\code{sharingUpdateOrRemoveWithGrant}}{\link{SharingUpdateOrRemoveWithGrant}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Set roles for users on this data source. Note that when granting access to a data source, access to the corresponding data store as a \"CONSUMER\" will also be granted.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Roles updated successfully.
\itemize{
}
\item \strong{\code{409}} The request would leave the data source without an owner.
\itemize{
}
\item \strong{\code{422}} One of the users in the request does not exist, or the request is otherwise invalid
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
sharingUpdateOrRemoveWithGrant <- SharingUpdateOrRemoveWithGrant$new() # SharingUpdateOrRemoveWithGrant |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesAccessControlPatchMany(dataSourceId, sharingUpdateOrRemoveWithGrant=sharingUpdateOrRemoveWithGrant)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesCreate}{}}}
\subsection{Method \code{ExternalDataSourcesCreate()}}{
Create a data source.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesCreate(dataSourceCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataSourceCreate}}{\link{DataSourceCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a fully configured source of data which could be used for datasets and projects creation.A `data source` specifies, via SQL query or selected table and schema data, which data to extract from the `data connection` (the location of data within a given endpoint) to use for modeling or predictions. A `data source` has one `data connection` and one `connector` but can have many `datasets`. To test the SQL query before creating the data source,use :http:post:`/api/v2/externalDataStores/(dataStoreId)/verifySQL/`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data source created successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataSourceRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataSourceCreate <- DataSourceCreate$new() # DataSourceCreate |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesCreate(dataSourceCreate=dataSourceCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesDelete}{}}}
\subsection{Method \code{ExternalDataSourcesDelete()}}{
Delete the data source.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesDelete(dataSourceId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataSourceId}}{character. The ID of the Data Source.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the data source with given ID if it is not used by any dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Data source deleted successfully.
\itemize{
}
\item \strong{\code{409}} Data source is in use by one or more datasets
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesDelete(dataSourceId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesList}{}}}
\subsection{Method \code{ExternalDataSourcesList()}}{
List data sources.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesList(type = "jdbc", ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Enum < \link{dr-connector-v1, all, jdbc} > Data source type to filter by.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Return detailed list of available data sources.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data sources retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataSourceListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
type <- "jdbc" # character | Data source type to filter by.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesList(type=type)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesPatch}{}}}
\subsection{Method \code{ExternalDataSourcesPatch()}}{
Update the data source.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesPatch(
  dataSourceId,
  dataSourceUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataSourceId}}{character. The ID of the Data Source.}

\item{\code{dataSourceUpdate}}{\link{DataSourceUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the data source with given ID. To test the SQL query before updating the data source,use :http:post:`/api/v2/externalDataStores/(dataStoreId)/verifySQL/`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Data source updated successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
dataSourceUpdate <- DataSourceUpdate$new() # DataSourceUpdate |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesPatch(dataSourceId, dataSourceUpdate=dataSourceUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesPermissionsList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesPermissionsList}{}}}
\subsection{Method \code{ExternalDataSourcesPermissionsList()}}{
Describe data source permissions.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesPermissionsList(dataSourceId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataSourceId}}{character. The ID of the Data Source.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Describe what permissions current user has for given data source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The data source permissions.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataSourceDescribePermissionsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesPermissionsList(dataSourceId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesRetrieve}{}}}
\subsection{Method \code{ExternalDataSourcesRetrieve()}}{
Data source details.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesRetrieve(dataSourceId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataSourceId}}{character. The ID of the Data Source.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Return details of the existing data source with given ID, including SQL query or selected table and schema data, which fully describe which data to extract and from which location.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data source details retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataSourceRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesRetrieve(dataSourceId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesSharedRolesList}{}}}
\subsection{Method \code{ExternalDataSourcesSharedRolesList()}}{
Get data source's access control list
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesSharedRolesList(
  offset,
  limit,
  dataSourceId,
  id = NULL,
  name = NULL,
  shareRecipientType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{dataSourceId}}{character. The ID of the Data Source.}

\item{\code{id}}{character. Only return roles for a user, group or organization with this identifier.}

\item{\code{name}}{character. Only return roles for a user, group or organization with this name.}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > List access controls for recipients with this type.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations who have access to this data source and their roles.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of user/group/organization roles.
\itemize{
}
}
}

\subsection{Returns}{
\link{SharedRolesWithGrantListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesSharedRolesList(offset, limit, dataSourceId, id=id, name=name, shareRecipientType=shareRecipientType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataSourcesSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataSourcesSharedRolesPatchMany}{}}}
\subsection{Method \code{ExternalDataSourcesSharedRolesPatchMany()}}{
Modify data source shared roles.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataSourcesSharedRolesPatchMany(
  dataSourceId,
  sharedRolesUpdateWithGrant = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataSourceId}}{character. The ID of the Data Source.}

\item{\code{sharedRolesUpdateWithGrant}}{\link{SharedRolesUpdateWithGrant}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Grant access, remove access or update roles for organizations, groups or users on this data source. Up to 100 roles may be set per array in a single request.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Roles updated successfully.
\itemize{
}
\item \strong{\code{409}} Duplicate entry for the org/group/user in roles listor the request would leave the data source without an owner.
\itemize{
}
\item \strong{\code{422}} Request is unprocessable. For example, `name` is stated for not user recipient.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataSourceId <- 'dataSourceId_example' # character | The ID of the Data Source.
sharedRolesUpdateWithGrant <- SharedRolesUpdateWithGrant$new() # SharedRolesUpdateWithGrant |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataSourcesSharedRolesPatchMany(dataSourceId, sharedRolesUpdateWithGrant=sharedRolesUpdateWithGrant)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresAccessControlPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresAccessControlPatchMany}{}}}
\subsection{Method \code{ExternalDataStoresAccessControlPatchMany()}}{
Update data store's controls
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresAccessControlPatchMany(
  dataStoreId,
  sharingUpdateOrRemoveWithGrant = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{sharingUpdateOrRemoveWithGrant}}{\link{SharingUpdateOrRemoveWithGrant}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Set roles for users on this data store.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Roles updated successfully.
\itemize{
}
\item \strong{\code{409}} The request would leave the data store without an owner.
\itemize{
}
\item \strong{\code{422}} One of the users in the request does not exist, or the request is otherwise invalid
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
sharingUpdateOrRemoveWithGrant <- SharingUpdateOrRemoveWithGrant$new() # SharingUpdateOrRemoveWithGrant |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresAccessControlPatchMany(dataStoreId, sharingUpdateOrRemoveWithGrant=sharingUpdateOrRemoveWithGrant)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresColumnsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresColumnsCreate}{}}}
\subsection{Method \code{ExternalDataStoresColumnsCreate()}}{
Retrieves a data store's data columns.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresColumnsCreate(
  dataStoreId,
  dataStoreColumnsList = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{dataStoreColumnsList}}{\link{DataStoreColumnsList}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves a data store's data columns.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns response with array of Column objects.
\itemize{
}
\item \strong{\code{400}} Error thrown by DSS system when retrieving columns
\itemize{
}
\item \strong{\code{403}} Incorrect permissions to access catalog item through DSS
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreColumnsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreColumnsList <- DataStoreColumnsList$new() # DataStoreColumnsList |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresColumnsCreate(dataStoreId, dataStoreColumnsList=dataStoreColumnsList)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresCreate}{}}}
\subsection{Method \code{ExternalDataStoresCreate()}}{
Create a data store.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresCreate(dataStoreCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreCreate}}{\link{DataStoreCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a data store which includes a name and a driver ID or a connector ID. The driver would be configured by a JDBC URL or by jdbc fields; The connector would be configured by connection fields.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data store created successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreCreate <- DataStoreCreate$new() # DataStoreCreate |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresCreate(dataStoreCreate=dataStoreCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresCredentialsList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresCredentialsList}{}}}
\subsection{Method \code{ExternalDataStoresCredentialsList()}}{
List credentials associated with the specified data store.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresCredentialsList(
  dataStoreId,
  offset = 0,
  limit = 100,
  types = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{types}}{\link{OneOfstringarray}. Includes only credentials of the specified type. Repeat the parameter for filtering on multiple statuses.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Returns a list of credentials associated with the specified data store.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of credentials associated with the data store.
\itemize{
}
}
}

\subsection{Returns}{
\link{CredentialsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
types <- OneOfstringarray$new() # OneOfstringarray | Includes only credentials of the specified type. Repeat the parameter for filtering on multiple statuses.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresCredentialsList(dataStoreId, offset=offset, limit=limit, types=types)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresDelete}{}}}
\subsection{Method \code{ExternalDataStoresDelete()}}{
Delete the data store.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresDelete(dataStoreId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the data store with given ID if it is not used by any data source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Data store deleted successfully.
\itemize{
}
\item \strong{\code{409}} Data store is in use by one or more data source
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresDelete(dataStoreId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresList}{}}}
\subsection{Method \code{ExternalDataStoresList()}}{
List data stores.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresList(
  offset = 0,
  limit = 100,
  type = "jdbc",
  showHidden = "False",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{type}}{Enum < \link{dr-connector-v1, jdbc, all} > Includes only data stores of the specified type or any if set to `all`.}

\item{\code{showHidden}}{Enum < \link{false, False, true, True} > Specifies whether non-visible OAuth fields are shown.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Return list with details of the existing data stores available for the user.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data stores retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
type <- "jdbc" # character | Includes only data stores of the specified type or any if set to `all`.
showHidden <- "False" # character | Specifies whether non-visible OAuth fields are shown.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresList(offset=offset, limit=limit, type=type, showHidden=showHidden)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresPatch}{}}}
\subsection{Method \code{ExternalDataStoresPatch()}}{
Updates a data store configuration.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresPatch(
  dataStoreId,
  dataStoreUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{dataStoreUpdate}}{\link{DataStoreUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Updates a data store configuration.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns the updated data store entry.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreUpdate <- DataStoreUpdate$new() # DataStoreUpdate |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresPatch(dataStoreId, dataStoreUpdate=dataStoreUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresPermissionsList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresPermissionsList}{}}}
\subsection{Method \code{ExternalDataStoresPermissionsList()}}{
Describe data store permissions.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresPermissionsList(dataStoreId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Describe what permissions current user has for given data store.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The data store permissions.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreDescribePermissionsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresPermissionsList(dataStoreId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresRetrieve}{}}}
\subsection{Method \code{ExternalDataStoresRetrieve()}}{
Data store details.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresRetrieve(dataStoreId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
A configured connection to a database - it has a name and a specified driver. The driver may be specified by a JDBC URL or connection parameters if the driver was created with the parameter configuration.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Data store details retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresRetrieve(dataStoreId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresSchemasCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresSchemasCreate}{}}}
\subsection{Method \code{ExternalDataStoresSchemasCreate()}}{
Retrieves a data store's data schemas.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresSchemasCreate(
  dataStoreId,
  dataStoreCredentials = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{dataStoreCredentials}}{\link{DataStoreCredentials}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves a data store's data schemas.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns response with schemas and catalog.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreSchemasList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreCredentials <- DataStoreCredentials$new() # DataStoreCredentials |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresSchemasCreate(dataStoreId, dataStoreCredentials=dataStoreCredentials)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresSharedRolesList}{}}}
\subsection{Method \code{ExternalDataStoresSharedRolesList()}}{
Get data store's access control list
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresSharedRolesList(
  offset,
  limit,
  dataStoreId,
  id = NULL,
  name = NULL,
  shareRecipientType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{id}}{character. Only return roles for a user, group or organization with this identifier.}

\item{\code{name}}{character. Only return roles for a user, group or organization with this name.}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > List access controls for recipients with this type.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users who have access to this data store and their roles on the data store.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The data store's access control list.
\itemize{
}
\item \strong{\code{400}} Both username and userId were specified
\itemize{
}
\item \strong{\code{404}} Either the data store does not exist or the user does not have permissions to view the data store.
\itemize{
}
}
}

\subsection{Returns}{
\link{SharedRolesWithGrantListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresSharedRolesList(offset, limit, dataStoreId, id=id, name=name, shareRecipientType=shareRecipientType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresSharedRolesPatchMany}{}}}
\subsection{Method \code{ExternalDataStoresSharedRolesPatchMany()}}{
Modify data store shared roles.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresSharedRolesPatchMany(
  dataStoreId,
  sharedRolesUpdateWithGrant = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{sharedRolesUpdateWithGrant}}{\link{SharedRolesUpdateWithGrant}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Grant access, remove access or update roles for organizations, groups or users on this data store. Up to 100 roles may be set per array in a single request.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully modified.
\itemize{
}
\item \strong{\code{409}} Duplicate entry for the org/group/user in roles listor the request would leave the data store without an owner.
\itemize{
}
\item \strong{\code{422}} Request is unprocessable. For example, `name` is stated for not user recipient.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
sharedRolesUpdateWithGrant <- SharedRolesUpdateWithGrant$new() # SharedRolesUpdateWithGrant |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresSharedRolesPatchMany(dataStoreId, sharedRolesUpdateWithGrant=sharedRolesUpdateWithGrant)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresTablesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresTablesCreate}{}}}
\subsection{Method \code{ExternalDataStoresTablesCreate()}}{
Retrieves a data store's database tables (including views).
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresTablesCreate(
  dataStoreId,
  dataStoreTables = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{dataStoreTables}}{\link{DataStoreTables}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves a data store's database tables (including views).


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of tables available in the retrieved data store.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreTablesList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreTables <- DataStoreTables$new() # DataStoreTables |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresTablesCreate(dataStoreId, dataStoreTables=dataStoreTables)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresTestCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresTestCreate}{}}}
\subsection{Method \code{ExternalDataStoresTestCreate()}}{
Tests data store connection.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresTestCreate(
  dataStoreId,
  dataStoreCredentialsWithCredentialsTypeSupport = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{dataStoreCredentialsWithCredentialsTypeSupport}}{\link{DataStoreCredentialsWithCredentialsTypeSupport}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Tests the ability to connect to a data store with specified authentication.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Outcome of the connection test.
\itemize{
}
\item \strong{\code{400}} Details on why the connect call failed.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreTestResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreCredentialsWithCredentialsTypeSupport <- DataStoreCredentialsWithCredentialsTypeSupport$new() # DataStoreCredentialsWithCredentialsTypeSupport |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresTestCreate(dataStoreId, dataStoreCredentialsWithCredentialsTypeSupport=dataStoreCredentialsWithCredentialsTypeSupport)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDataStoresVerifySQLCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDataStoresVerifySQLCreate}{}}}
\subsection{Method \code{ExternalDataStoresVerifySQLCreate()}}{
Verifies a SQL query for a data store.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDataStoresVerifySQLCreate(
  dataStoreId,
  dataStoreSqlVerify = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataStoreId}}{character. ID of the data store.}

\item{\code{dataStoreSqlVerify}}{\link{DataStoreSQLVerify}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Executes the SQL query on the data store, returning a small number of rows (max 999). Use this for quick query execution validation and exploring results, not for capturing an entire result set.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns the names of columns and a limited number of results from the SQL query.
\itemize{
}
\item \strong{\code{400}} Details explaining why the SQL query is invalid.
\itemize{
}
}
}

\subsection{Returns}{
\link{DataStoreSQLVerifyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataStoreId <- 'dataStoreId_example' # character | ID of the data store.
dataStoreSqlVerify <- DataStoreSQLVerify$new() # DataStoreSQLVerify |

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDataStoresVerifySQLCreate(dataStoreId, dataStoreSqlVerify=dataStoreSqlVerify)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDriverConfigurationsList"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDriverConfigurationsList}{}}}
\subsection{Method \code{ExternalDriverConfigurationsList()}}{
List available driver configurations.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDriverConfigurationsList(
  offset = 0,
  limit = 100,
  type = "jdbc",
  showHidden = "False",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{type}}{Enum < \link{dr-connector-v1, jdbc, all} > Type of driver configurations to return.}

\item{\code{showHidden}}{Enum < \link{false, False, true, True} > If True, include hidden configurations in response.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve matching driver configurations based on query.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Driver configurations retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DriverConfigurationListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
type <- "jdbc" # character | Type of driver configurations to return.
showHidden <- "False" # character | If True, include hidden configurations in response.

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDriverConfigurationsList(offset=offset, limit=limit, type=type, showHidden=showHidden)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExternalDriverConfigurationsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ExternalDriverConfigurationsRetrieve}{}}}
\subsection{Method \code{ExternalDriverConfigurationsRetrieve()}}{
Driver configuration details.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$ExternalDriverConfigurationsRetrieve(configurationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{configurationId}}{character. Driver configuration ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the driver configuration with the specified ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Driver configuration retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DriverConfigurationRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
configurationId <- 'configurationId_example' # character | Driver configuration ID

api.instance <- DataConnectivityApi$new()
result <- api.instance$ExternalDriverConfigurationsRetrieve(configurationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataConnectivityApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
