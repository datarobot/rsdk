% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ai_catalog_api.R
\docType{class}
\name{AiCatalogApi}
\alias{AiCatalogApi}
\title{AiCatalog operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.AiCatalog
}
\examples{

## ------------------------------------------------
## Method `AiCatalogApi$CatalogItemsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Specifies the number of results to skip for pagination.
limit <- 0 # integer | Sets the maximum number of results returned. Enter 0 to specify no limit.
initialCacheSize <- 500 # integer | The initial cache size, for Mongo search only.
useCache <- "false" # character | Sets whether to use the cache, for Mongo search only.
orderBy <- 'orderBy_example' # character | The attribute sort order applied to the returned catalog list: 'catalogName', 'originalName', 'description', 'created', or 'relevance'. For all options other than 'relevance', prefix the attribute name with a dash to sort in descending order. e.g., orderBy='-catalogName'. Defaults to '-created'.
searchFor <- 'searchFor_example' # character | A value to search for in the dataset's name, description, tags, column names, categories, and latest errors. The search is case insensitive. If no value is provided, or if the empty string is used, or if the string contains only whitespace, no filtering occurs. Partial matching is performed on the dataset name and description fields; all other fields require an exact match.
tag <- OneOfstringarray$new() # OneOfstringarray | Filter results to display only items with the specified catalog item tags, in lower case, with no spaces.
accessType <- "any" # character | Access type used to filter returned results. Valid options are 'owner', 'shared', 'created', and 'any' (the default): 'owner' items are owned by the requester, 'shared' items have been shared with the requester, 'created' items have been created by the requester, and 'any' items matches all.
datasourceType <- OneOfstringarray$new() # OneOfstringarray | Data source types used for filtering.
category <- OneOfstringarray$new() # OneOfstringarray | Category type(s) used for filtering. Searches are case sensitive and support '&' and 'OR' operators.
filterFailed <- "false" # character | Sets whether to exclude from the search results all catalog items that failed during import. If True, invalid catalog items will be excluded; default is False.
ownerUserId <- OneOfstringarray$new() # OneOfstringarray | Filter results to display only those owned by user(s) identified by the specified UID.
ownerUsername <- OneOfstringarray$new() # OneOfstringarray | Filter results to display only those owned by user(s) identified by the specified username.
type <- 'type_example' # character | Filter results by catalog type. The 'dataset' option matches both 'snapshot_dataset' and 'remote_dataset'.

api.instance <- AiCatalogApi$new()
result <- api.instance$CatalogItemsList(offset, limit, initialCacheSize, useCache=useCache, orderBy=orderBy, searchFor=searchFor, tag=tag, accessType=accessType, datasourceType=datasourceType, category=category, filterFailed=filterFailed, ownerUserId=ownerUserId, ownerUsername=ownerUsername, type=type)
}

## ------------------------------------------------
## Method `AiCatalogApi$CatalogItemsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
catalogId <- 'catalogId_example' # character | Catalog item ID.
updateCatalogMetadata <- UpdateCatalogMetadata$new() # UpdateCatalogMetadata |

api.instance <- AiCatalogApi$new()
result <- api.instance$CatalogItemsPatch(catalogId, updateCatalogMetadata=updateCatalogMetadata)
}

## ------------------------------------------------
## Method `AiCatalogApi$CatalogItemsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
catalogId <- 'catalogId_example' # character | Catalog item ID.

api.instance <- AiCatalogApi$new()
result <- api.instance$CatalogItemsRetrieve(catalogId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DataEngineQueryGeneratorsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
createDataEngineQueryGenerator <- CreateDataEngineQueryGenerator$new() # CreateDataEngineQueryGenerator |

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineQueryGeneratorsCreate(createDataEngineQueryGenerator=createDataEngineQueryGenerator)
}

## ------------------------------------------------
## Method `AiCatalogApi$DataEngineQueryGeneratorsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
dataEngineQueryGeneratorId <- 'dataEngineQueryGeneratorId_example' # character | The ID of the data engine query generator.

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineQueryGeneratorsRetrieve(dataEngineQueryGeneratorId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DataEngineWorkspaceStatesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
createWorkspaceState <- CreateWorkspaceState$new() # CreateWorkspaceState |

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineWorkspaceStatesCreate(createWorkspaceState=createWorkspaceState)
}

## ------------------------------------------------
## Method `AiCatalogApi$DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
createWorkspaceStateFromQueryGenerator <- CreateWorkspaceStateFromQueryGenerator$new() # CreateWorkspaceStateFromQueryGenerator |

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate(createWorkspaceStateFromQueryGenerator=createWorkspaceStateFromQueryGenerator)
}

## ------------------------------------------------
## Method `AiCatalogApi$DataEngineWorkspaceStatesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
workspaceStateId <- 'workspaceStateId_example' # character | The ID of the Data Engine workspace state.

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineWorkspaceStatesRetrieve(workspaceStateId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsAccessControlList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
datasetId <- 'datasetId_example' # character | The ID of the dataset.
userId <- 'userId_example' # character | Only return the access control information for a user with this user ID.
username <- 'username_example' # character | Only return the access control information for a user with this username.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsAccessControlList(offset, limit, datasetId, userId=userId, username=username)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsAccessControlPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetAccessSet <- DatasetAccessSet$new() # DatasetAccessSet |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsAccessControlPatchMany(datasetId, datasetAccessSet=datasetAccessSet)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsAllFeaturesDetailsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "name" # character | How the features should be ordered.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsAllFeaturesDetailsList(limit, offset, orderBy, datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsDelete(datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsDeletedPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
body <- NULL # object |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsDeletedPatchMany(datasetId, body=body)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeatureHistogramsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
binLimit <- 60 # integer | Maximum number of bins in the returned plot.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry to retrieve.
featureName <- 'featureName_example' # character | The name of the feature.
key <- 'key_example' # character | Only required for the Summarized categorical feature. Name of the top 50 key for which plot to be retrieved.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeatureHistogramsRetrieve(binLimit, datasetId, featureName, key=key)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeatureTransformsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featureTransform <- FeatureTransform$new() # FeatureTransform |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeatureTransformsCreate(datasetId, featureTransform=featureTransform)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeatureTransformsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeatureTransformsList(limit, offset, datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeatureTransformsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset to select feature from.
featureName <- 'featureName_example' # character | The name of the feature. Note that DataRobot renames some features, so the feature name may not be the one from your original data. Non-ascii features names should be utf-8-encoded (before URL-quoting).

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeatureTransformsRetrieve(datasetId, featureName)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeaturelistsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featureListCreate <- FeatureListCreate$new() # FeatureListCreate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsCreate(datasetId, featureListCreate=featureListCreate)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeaturelistsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featurelistId <- 'featurelistId_example' # character | The ID of the featurelist.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsDelete(datasetId, featurelistId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeaturelistsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "name" # character | How the features should be ordered.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsList(limit, offset, orderBy, datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeaturelistsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featurelistId <- 'featurelistId_example' # character | The ID of the featurelist.
featureListModify <- FeatureListModify$new() # FeatureListModify |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsPatch(datasetId, featurelistId, featureListModify=featureListModify)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFeaturelistsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featurelistId <- 'featurelistId_example' # character | The ID of the featurelist.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsRetrieve(datasetId, featurelistId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFileList(datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFromDataEngineWorkspaceStateCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetCreateFromWorkspaceState <- DatasetCreateFromWorkspaceState$new() # DatasetCreateFromWorkspaceState |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromDataEngineWorkspaceStateCreate(datasetCreateFromWorkspaceState=datasetCreateFromWorkspaceState)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFromDataSourceCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasource <- Datasource$new() # Datasource |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromDataSourceCreate(datasource=datasource)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFromFileCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
file <- File.new('/path/to/file') # data.frame | The data to be used for the creation.
categories <- oneOf<string,array>$new() # OneOfstringarray | An array of strings describing the intended use of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromFileCreate(file, categories=categories)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFromHDFSCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
hdfs <- Hdfs$new() # Hdfs |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromHDFSCreate(hdfs=hdfs)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsFromURLCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
url <- Url$new() # Url |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromURLCreate(url=url)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned.
offset <- 0 # integer | This many results will be skipped.
category <- 'category_example' # character | If specified, only dataset versions that have the specified category will be included in the results. Categories identify the intended use of the dataset.
orderBy <- 'orderBy_example' # character | Sorting order which will be applied to catalog list.
filterFailed <- "false" # character | Whether datasets that failed during import should be excluded from the results. If True invalid datasets will be excluded.
datasetVersionIds <- OneOfstringarray$new() # OneOfstringarray | If specified will only return datasets that are associated with specified dataset versions.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsList(limit, offset, category=category, orderBy=orderBy, filterFailed=filterFailed, datasetVersionIds=datasetVersionIds)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
patchDataset <- PatchDataset$new() # PatchDataset |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsPatch(datasetId, patchDataset=patchDataset)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
bulkDatasetAction <- BulkDatasetAction$new() # BulkDatasetAction |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsPatchMany(bulkDatasetAction=bulkDatasetAction)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsPermissionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsPermissionsList(datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsProjectsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | Only this many items are returned.
offset <- 0 # integer | Skip this many items.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsProjectsList(limit, offset, datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRefreshJobsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetRefreshJobCreate <- DatasetRefreshJobCreate$new() # DatasetRefreshJobCreate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsCreate(datasetId, datasetRefreshJobCreate=datasetRefreshJobCreate)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRefreshJobsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset associated with the scheduled refresh job.
jobId <- 'jobId_example' # character | ID of the user scheduled dataset refresh job.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsDelete(datasetId, jobId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRefreshJobsExecutionResultsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset associated with the scheduled refresh job.
jobId <- 'jobId_example' # character | ID of the user scheduled dataset refresh job.
limit <- 20 # integer | Maximum number of results returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | Number of results that will be skipped.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsExecutionResultsList(datasetId, jobId, limit=limit, offset=offset)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRefreshJobsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | Only this many items are returned.
offset <- 0 # integer | Skip this many items.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsList(limit, offset, datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRefreshJobsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset associated with the scheduled refresh job.
jobId <- 'jobId_example' # character | ID of the user scheduled dataset refresh job.
datasetRefreshJobUpdate <- DatasetRefreshJobUpdate$new() # DatasetRefreshJobUpdate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsPatch(datasetId, jobId, datasetRefreshJobUpdate=datasetRefreshJobUpdate)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRefreshJobsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset associated with the scheduled refresh job.
jobId <- 'jobId_example' # character | ID of the user scheduled dataset refresh job.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsRetrieve(datasetId, jobId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRelationshipsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetRelationshipCreate <- DatasetRelationshipCreate$new() # DatasetRelationshipCreate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRelationshipsCreate(datasetId, datasetRelationshipCreate=datasetRelationshipCreate)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRelationshipsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetRelationshipId <- 'datasetRelationshipId_example' # character | The ID of the dataset relationship to delete.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRelationshipsDelete(datasetId, datasetRelationshipId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRelationshipsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned.
offset <- 0 # integer | This many results will be skipped.
datasetId <- 'datasetId_example' # character | The ID of the dataset.
linkedDatasetId <- 'linkedDatasetId_example' # character | Providing `linkedDatasetId` will filter such that only relationships between `datasetId` (from the path) and `linkedDatasetId` will be returned.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRelationshipsList(limit, offset, datasetId, linkedDatasetId=linkedDatasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRelationshipsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetRelationshipId <- 'datasetRelationshipId_example' # character | The ID of the dataset relationship to delete.
datasetRelationshipUpdate <- DatasetRelationshipUpdate$new() # DatasetRelationshipUpdate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRelationshipsPatch(datasetId, datasetRelationshipId, datasetRelationshipUpdate=datasetRelationshipUpdate)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRetrieve(datasetId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
datasetId <- 'datasetId_example' # character | The ID of the dataset.
id <- 'id_example' # character | Only return the access control information for a organization, group or user with this ID.
name <- 'name_example' # character | Only return the access control information for a organization, group or user with this name.
shareRecipientType <- 'shareRecipientType_example' # character | It describes the recipient type.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsSharedRolesList(offset, limit, datasetId, id=id, name=name, shareRecipientType=shareRecipientType)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetSharedRoles <- DatasetSharedRoles$new() # DatasetSharedRoles |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsSharedRolesPatchMany(datasetId, datasetSharedRoles=datasetSharedRoles)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsAllFeaturesDetailsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "name" # character | How the features should be ordered.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsAllFeaturesDetailsList(limit, offset, orderBy, datasetId, datasetVersionId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsDelete(datasetId, datasetVersionId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsDeletedPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.
body <- NULL # object |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsDeletedPatchMany(datasetId, datasetVersionId, body=body)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFeatureHistogramsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
binLimit <- 60 # integer | Maximum number of bins in the returned plot.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry to retrieve.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version to retrieve.
featureName <- 'featureName_example' # character | The name of the feature.
key <- 'key_example' # character | Only required for the Summarized categorical feature. Name of the top 50 key for which plot to be retrieved.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFeatureHistogramsRetrieve(binLimit, datasetId, datasetVersionId, featureName, key=key)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFeaturelistsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "name" # character | How the features should be ordered.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFeaturelistsList(limit, offset, orderBy, datasetId, datasetVersionId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFeaturelistsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset to retrieve featurelist for.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version to retrieve featurelists for.
featurelistId <- 'featurelistId_example' # character | The ID of the featurelist.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFeaturelistsRetrieve(datasetId, datasetVersionId, featurelistId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFileList(datasetId, datasetVersionId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFromDataEngineWorkspaceStateCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetCreateFromWorkspaceState <- DatasetCreateFromWorkspaceState$new() # DatasetCreateFromWorkspaceState |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromDataEngineWorkspaceStateCreate(datasetId, datasetCreateFromWorkspaceState=datasetCreateFromWorkspaceState)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFromDataSourceCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasource <- Datasource$new() # Datasource |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromDataSourceCreate(datasetId, datasource=datasource)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFromFileCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetFromFile <- DatasetFromFile$new() # DatasetFromFile |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromFileCreate(datasetId, datasetFromFile=datasetFromFile)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFromHDFSCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
hdfs <- Hdfs$new() # Hdfs |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromHDFSCreate(datasetId, hdfs=hdfs)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFromLatestVersionCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
fromLatest <- FromLatest$new() # FromLatest |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromLatestVersionCreate(datasetId, fromLatest=fromLatest)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFromURLCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
url <- Url$new() # Url |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromURLCreate(datasetId, url=url)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsFromVersionCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.
fromSpecific <- FromSpecific$new() # FromSpecific |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromVersionCreate(datasetId, datasetVersionId, fromSpecific=fromSpecific)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned.
offset <- 0 # integer | This many results will be skipped.
datasetId <- 'datasetId_example' # character | The ID of the dataset.
category <- 'category_example' # character | If specified, only dataset versions that have the specified category will be included in the results. Categories identify the intended use of the dataset.
orderBy <- 'orderBy_example' # character | Sorting order which will be applied to catalog list.
filterFailed <- "false" # character | Whether datasets that failed during import should be excluded from the results. If True invalid datasets will be excluded.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsList(limit, offset, datasetId, category=category, orderBy=orderBy, filterFailed=filterFailed)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsProjectsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | Only this many items are returned.
offset <- 0 # integer | Skip this many items.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsProjectsList(limit, offset, datasetId, datasetVersionId)
}

## ------------------------------------------------
## Method `AiCatalogApi$DatasetsVersionsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsRetrieve(datasetId, datasetVersionId)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsBulkValidationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintBulkValidationRequest <- UserBlueprintBulkValidationRequest$new() # UserBlueprintBulkValidationRequest |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsBulkValidationsCreate(userBlueprintBulkValidationRequest=userBlueprintBulkValidationRequest)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintCreate <- UserBlueprintCreate$new() # UserBlueprintCreate |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsCreate(userBlueprintCreate=userBlueprintCreate)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsDelete(userBlueprintId)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsDeleteMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintsBulkDelete <- UserBlueprintsBulkDelete$new() # UserBlueprintsBulkDelete |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsDeleteMany(userBlueprintsBulkDelete=userBlueprintsBulkDelete)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsFromBlueprintIdCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromBlueprintId <- UserBlueprintCreateFromBlueprintId$new() # UserBlueprintCreateFromBlueprintId |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsFromBlueprintIdCreate(userBlueprintCreateFromBlueprintId=userBlueprintCreateFromBlueprintId)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsFromCustomTaskVersionIdCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromCustomTaskVersionIdPayload <- UserBlueprintCreateFromCustomTaskVersionIdPayload$new() # UserBlueprintCreateFromCustomTaskVersionIdPayload |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsFromCustomTaskVersionIdCreate(userBlueprintCreateFromCustomTaskVersionIdPayload=userBlueprintCreateFromCustomTaskVersionIdPayload)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsFromUserBlueprintIdCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromUserBlueprintId <- UserBlueprintCreateFromUserBlueprintId$new() # UserBlueprintCreateFromUserBlueprintId |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsFromUserBlueprintIdCreate(userBlueprintCreateFromUserBlueprintId=userBlueprintCreateFromUserBlueprintId)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsInputTypesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsInputTypesList()
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of results to skip (for pagination).
limit <- 100 # integer | The max number of results to return.
projectId <- 'projectId_example' # character | The id of the project, used to filter for original project_id.

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsList(offset, limit, projectId=projectId)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
userBlueprintUpdate <- UserBlueprintUpdate$new() # UserBlueprintUpdate |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsPatch(userBlueprintId, userBlueprintUpdate=userBlueprintUpdate)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsProjectBlueprintsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintAddToMenu <- UserBlueprintAddToMenu$new() # UserBlueprintAddToMenu |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsProjectBlueprintsCreate(userBlueprintAddToMenu=userBlueprintAddToMenu)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
editMode <- FALSE # character | Whether to retrieve the extra blueprint metadata for editing.
decompressedBlueprint <- FALSE # character | Whether to retrieve the blueprint in the decompressed format.
isInplaceEditor <- FALSE # character | Whether the request is sent from the in place user BP editor.
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
projectId <- 'projectId_example' # character | String representation of ObjectId for the currently active project. The user blueprint is retrieved when this project is active.
getDynamicLabels <- FALSE # character | Whether to add dynamic labels to a decompressed blueprint.

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsRetrieve(editMode, decompressedBlueprint, isInplaceEditor, userBlueprintId, projectId=projectId, getDynamicLabels=getDynamicLabels)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsSharedRolesList(offset, limit, userBlueprintId, id=id, name=name, shareRecipientType=shareRecipientType)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
sharedRolesUpdate <- SharedRolesUpdate$new() # SharedRolesUpdate |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsSharedRolesPatchMany(userBlueprintId, sharedRolesUpdate=sharedRolesUpdate)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsTaskParametersCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintTaskParameterValidation <- UserBlueprintTaskParameterValidation$new() # UserBlueprintTaskParameterValidation |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsTaskParametersCreate(userBlueprintTaskParameterValidation=userBlueprintTaskParameterValidation)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsTasksList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id to use for task retrieval
blueprintId <- 'blueprintId_example' # character | The blueprint id to use for task retrieval
userBlueprintId <- 'userBlueprintId_example' # character | The user blueprint id to use for task retrieval

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsTasksList(projectId=projectId, blueprintId=blueprintId, userBlueprintId=userBlueprintId)
}

## ------------------------------------------------
## Method `AiCatalogApi$UserBlueprintsValidationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintValidation <- UserBlueprintValidation$new() # UserBlueprintValidation |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsValidationsCreate(userBlueprintValidation=userBlueprintValidation)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{AiCatalogApi$new()}}
\item \href{#method-CatalogItemsList}{\code{AiCatalogApi$CatalogItemsList()}}
\item \href{#method-CatalogItemsPatch}{\code{AiCatalogApi$CatalogItemsPatch()}}
\item \href{#method-CatalogItemsRetrieve}{\code{AiCatalogApi$CatalogItemsRetrieve()}}
\item \href{#method-DataEngineQueryGeneratorsCreate}{\code{AiCatalogApi$DataEngineQueryGeneratorsCreate()}}
\item \href{#method-DataEngineQueryGeneratorsRetrieve}{\code{AiCatalogApi$DataEngineQueryGeneratorsRetrieve()}}
\item \href{#method-DataEngineWorkspaceStatesCreate}{\code{AiCatalogApi$DataEngineWorkspaceStatesCreate()}}
\item \href{#method-DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate}{\code{AiCatalogApi$DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate()}}
\item \href{#method-DataEngineWorkspaceStatesRetrieve}{\code{AiCatalogApi$DataEngineWorkspaceStatesRetrieve()}}
\item \href{#method-DatasetsAccessControlList}{\code{AiCatalogApi$DatasetsAccessControlList()}}
\item \href{#method-DatasetsAccessControlPatchMany}{\code{AiCatalogApi$DatasetsAccessControlPatchMany()}}
\item \href{#method-DatasetsAllFeaturesDetailsList}{\code{AiCatalogApi$DatasetsAllFeaturesDetailsList()}}
\item \href{#method-DatasetsDelete}{\code{AiCatalogApi$DatasetsDelete()}}
\item \href{#method-DatasetsDeletedPatchMany}{\code{AiCatalogApi$DatasetsDeletedPatchMany()}}
\item \href{#method-DatasetsFeatureHistogramsRetrieve}{\code{AiCatalogApi$DatasetsFeatureHistogramsRetrieve()}}
\item \href{#method-DatasetsFeatureTransformsCreate}{\code{AiCatalogApi$DatasetsFeatureTransformsCreate()}}
\item \href{#method-DatasetsFeatureTransformsList}{\code{AiCatalogApi$DatasetsFeatureTransformsList()}}
\item \href{#method-DatasetsFeatureTransformsRetrieve}{\code{AiCatalogApi$DatasetsFeatureTransformsRetrieve()}}
\item \href{#method-DatasetsFeaturelistsCreate}{\code{AiCatalogApi$DatasetsFeaturelistsCreate()}}
\item \href{#method-DatasetsFeaturelistsDelete}{\code{AiCatalogApi$DatasetsFeaturelistsDelete()}}
\item \href{#method-DatasetsFeaturelistsList}{\code{AiCatalogApi$DatasetsFeaturelistsList()}}
\item \href{#method-DatasetsFeaturelistsPatch}{\code{AiCatalogApi$DatasetsFeaturelistsPatch()}}
\item \href{#method-DatasetsFeaturelistsRetrieve}{\code{AiCatalogApi$DatasetsFeaturelistsRetrieve()}}
\item \href{#method-DatasetsFileList}{\code{AiCatalogApi$DatasetsFileList()}}
\item \href{#method-DatasetsFromDataEngineWorkspaceStateCreate}{\code{AiCatalogApi$DatasetsFromDataEngineWorkspaceStateCreate()}}
\item \href{#method-DatasetsFromDataSourceCreate}{\code{AiCatalogApi$DatasetsFromDataSourceCreate()}}
\item \href{#method-DatasetsFromFileCreate}{\code{AiCatalogApi$DatasetsFromFileCreate()}}
\item \href{#method-DatasetsFromHDFSCreate}{\code{AiCatalogApi$DatasetsFromHDFSCreate()}}
\item \href{#method-DatasetsFromURLCreate}{\code{AiCatalogApi$DatasetsFromURLCreate()}}
\item \href{#method-DatasetsList}{\code{AiCatalogApi$DatasetsList()}}
\item \href{#method-DatasetsPatch}{\code{AiCatalogApi$DatasetsPatch()}}
\item \href{#method-DatasetsPatchMany}{\code{AiCatalogApi$DatasetsPatchMany()}}
\item \href{#method-DatasetsPermissionsList}{\code{AiCatalogApi$DatasetsPermissionsList()}}
\item \href{#method-DatasetsProjectsList}{\code{AiCatalogApi$DatasetsProjectsList()}}
\item \href{#method-DatasetsRefreshJobsCreate}{\code{AiCatalogApi$DatasetsRefreshJobsCreate()}}
\item \href{#method-DatasetsRefreshJobsDelete}{\code{AiCatalogApi$DatasetsRefreshJobsDelete()}}
\item \href{#method-DatasetsRefreshJobsExecutionResultsList}{\code{AiCatalogApi$DatasetsRefreshJobsExecutionResultsList()}}
\item \href{#method-DatasetsRefreshJobsList}{\code{AiCatalogApi$DatasetsRefreshJobsList()}}
\item \href{#method-DatasetsRefreshJobsPatch}{\code{AiCatalogApi$DatasetsRefreshJobsPatch()}}
\item \href{#method-DatasetsRefreshJobsRetrieve}{\code{AiCatalogApi$DatasetsRefreshJobsRetrieve()}}
\item \href{#method-DatasetsRelationshipsCreate}{\code{AiCatalogApi$DatasetsRelationshipsCreate()}}
\item \href{#method-DatasetsRelationshipsDelete}{\code{AiCatalogApi$DatasetsRelationshipsDelete()}}
\item \href{#method-DatasetsRelationshipsList}{\code{AiCatalogApi$DatasetsRelationshipsList()}}
\item \href{#method-DatasetsRelationshipsPatch}{\code{AiCatalogApi$DatasetsRelationshipsPatch()}}
\item \href{#method-DatasetsRetrieve}{\code{AiCatalogApi$DatasetsRetrieve()}}
\item \href{#method-DatasetsSharedRolesList}{\code{AiCatalogApi$DatasetsSharedRolesList()}}
\item \href{#method-DatasetsSharedRolesPatchMany}{\code{AiCatalogApi$DatasetsSharedRolesPatchMany()}}
\item \href{#method-DatasetsVersionsAllFeaturesDetailsList}{\code{AiCatalogApi$DatasetsVersionsAllFeaturesDetailsList()}}
\item \href{#method-DatasetsVersionsDelete}{\code{AiCatalogApi$DatasetsVersionsDelete()}}
\item \href{#method-DatasetsVersionsDeletedPatchMany}{\code{AiCatalogApi$DatasetsVersionsDeletedPatchMany()}}
\item \href{#method-DatasetsVersionsFeatureHistogramsRetrieve}{\code{AiCatalogApi$DatasetsVersionsFeatureHistogramsRetrieve()}}
\item \href{#method-DatasetsVersionsFeaturelistsList}{\code{AiCatalogApi$DatasetsVersionsFeaturelistsList()}}
\item \href{#method-DatasetsVersionsFeaturelistsRetrieve}{\code{AiCatalogApi$DatasetsVersionsFeaturelistsRetrieve()}}
\item \href{#method-DatasetsVersionsFileList}{\code{AiCatalogApi$DatasetsVersionsFileList()}}
\item \href{#method-DatasetsVersionsFromDataEngineWorkspaceStateCreate}{\code{AiCatalogApi$DatasetsVersionsFromDataEngineWorkspaceStateCreate()}}
\item \href{#method-DatasetsVersionsFromDataSourceCreate}{\code{AiCatalogApi$DatasetsVersionsFromDataSourceCreate()}}
\item \href{#method-DatasetsVersionsFromFileCreate}{\code{AiCatalogApi$DatasetsVersionsFromFileCreate()}}
\item \href{#method-DatasetsVersionsFromHDFSCreate}{\code{AiCatalogApi$DatasetsVersionsFromHDFSCreate()}}
\item \href{#method-DatasetsVersionsFromLatestVersionCreate}{\code{AiCatalogApi$DatasetsVersionsFromLatestVersionCreate()}}
\item \href{#method-DatasetsVersionsFromURLCreate}{\code{AiCatalogApi$DatasetsVersionsFromURLCreate()}}
\item \href{#method-DatasetsVersionsFromVersionCreate}{\code{AiCatalogApi$DatasetsVersionsFromVersionCreate()}}
\item \href{#method-DatasetsVersionsList}{\code{AiCatalogApi$DatasetsVersionsList()}}
\item \href{#method-DatasetsVersionsProjectsList}{\code{AiCatalogApi$DatasetsVersionsProjectsList()}}
\item \href{#method-DatasetsVersionsRetrieve}{\code{AiCatalogApi$DatasetsVersionsRetrieve()}}
\item \href{#method-UserBlueprintsBulkValidationsCreate}{\code{AiCatalogApi$UserBlueprintsBulkValidationsCreate()}}
\item \href{#method-UserBlueprintsCreate}{\code{AiCatalogApi$UserBlueprintsCreate()}}
\item \href{#method-UserBlueprintsDelete}{\code{AiCatalogApi$UserBlueprintsDelete()}}
\item \href{#method-UserBlueprintsDeleteMany}{\code{AiCatalogApi$UserBlueprintsDeleteMany()}}
\item \href{#method-UserBlueprintsFromBlueprintIdCreate}{\code{AiCatalogApi$UserBlueprintsFromBlueprintIdCreate()}}
\item \href{#method-UserBlueprintsFromCustomTaskVersionIdCreate}{\code{AiCatalogApi$UserBlueprintsFromCustomTaskVersionIdCreate()}}
\item \href{#method-UserBlueprintsFromUserBlueprintIdCreate}{\code{AiCatalogApi$UserBlueprintsFromUserBlueprintIdCreate()}}
\item \href{#method-UserBlueprintsInputTypesList}{\code{AiCatalogApi$UserBlueprintsInputTypesList()}}
\item \href{#method-UserBlueprintsList}{\code{AiCatalogApi$UserBlueprintsList()}}
\item \href{#method-UserBlueprintsPatch}{\code{AiCatalogApi$UserBlueprintsPatch()}}
\item \href{#method-UserBlueprintsProjectBlueprintsCreate}{\code{AiCatalogApi$UserBlueprintsProjectBlueprintsCreate()}}
\item \href{#method-UserBlueprintsRetrieve}{\code{AiCatalogApi$UserBlueprintsRetrieve()}}
\item \href{#method-UserBlueprintsSharedRolesList}{\code{AiCatalogApi$UserBlueprintsSharedRolesList()}}
\item \href{#method-UserBlueprintsSharedRolesPatchMany}{\code{AiCatalogApi$UserBlueprintsSharedRolesPatchMany()}}
\item \href{#method-UserBlueprintsTaskParametersCreate}{\code{AiCatalogApi$UserBlueprintsTaskParametersCreate()}}
\item \href{#method-UserBlueprintsTasksList}{\code{AiCatalogApi$UserBlueprintsTasksList()}}
\item \href{#method-UserBlueprintsValidationsCreate}{\code{AiCatalogApi$UserBlueprintsValidationsCreate()}}
\item \href{#method-clone}{\code{AiCatalogApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CatalogItemsList"></a>}}
\if{latex}{\out{\hypertarget{method-CatalogItemsList}{}}}
\subsection{Method \code{CatalogItemsList()}}{
List all catalog items accessible by the user.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$CatalogItemsList(
  offset,
  limit,
  initialCacheSize,
  useCache = "false",
  orderBy = NULL,
  searchFor = NULL,
  tag = NULL,
  accessType = "any",
  datasourceType = NULL,
  category = NULL,
  filterFailed = "false",
  ownerUserId = NULL,
  ownerUsername = NULL,
  type = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Specifies the number of results to skip for pagination.}

\item{\code{limit}}{integer. Sets the maximum number of results returned. Enter 0 to specify no limit.}

\item{\code{initialCacheSize}}{integer. The initial cache size, for Mongo search only.}

\item{\code{useCache}}{Enum < \link{false, False, true, True} > Sets whether to use the cache, for Mongo search only.}

\item{\code{orderBy}}{Enum < \link{originalName, -originalName, catalogName, -catalogName, description, -description, created, -created, relevance, -relevance} > The attribute sort order applied to the returned catalog list: 'catalogName', 'originalName', 'description', 'created', or 'relevance'. For all options other than 'relevance', prefix the attribute name with a dash to sort in descending order. e.g., orderBy='-catalogName'. Defaults to '-created'.}

\item{\code{searchFor}}{character. A value to search for in the dataset's name, description, tags, column names, categories, and latest errors. The search is case insensitive. If no value is provided, or if the empty string is used, or if the string contains only whitespace, no filtering occurs. Partial matching is performed on the dataset name and description fields; all other fields require an exact match.}

\item{\code{tag}}{\link{OneOfstringarray}. Filter results to display only items with the specified catalog item tags, in lower case, with no spaces.}

\item{\code{accessType}}{Enum < \link{owner, shared, any, created} > Access type used to filter returned results. Valid options are 'owner', 'shared', 'created', and 'any' (the default): 'owner' items are owned by the requester, 'shared' items have been shared with the requester, 'created' items have been created by the requester, and 'any' items matches all.}

\item{\code{datasourceType}}{\link{OneOfstringarray}. Data source types used for filtering.}

\item{\code{category}}{\link{OneOfstringarray}. Category type(s) used for filtering. Searches are case sensitive and support '&' and 'OR' operators.}

\item{\code{filterFailed}}{Enum < \link{false, False, true, True} > Sets whether to exclude from the search results all catalog items that failed during import. If True, invalid catalog items will be excluded; default is False.}

\item{\code{ownerUserId}}{\link{OneOfstringarray}. Filter results to display only those owned by user(s) identified by the specified UID.}

\item{\code{ownerUsername}}{\link{OneOfstringarray}. Filter results to display only those owned by user(s) identified by the specified username.}

\item{\code{type}}{Enum < \link{user_blueprint, snapshot_dataset, remote_dataset, data_mesh_workspace, dataset} > Filter results by catalog type. The 'dataset' option matches both 'snapshot_dataset' and 'remote_dataset'.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all catalog items accessible by the user.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Paginated list of catalog items is returned.
\itemize{
}
}
}

\subsection{Returns}{
\link{CatalogListSearchResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Specifies the number of results to skip for pagination.
limit <- 0 # integer | Sets the maximum number of results returned. Enter 0 to specify no limit.
initialCacheSize <- 500 # integer | The initial cache size, for Mongo search only.
useCache <- "false" # character | Sets whether to use the cache, for Mongo search only.
orderBy <- 'orderBy_example' # character | The attribute sort order applied to the returned catalog list: 'catalogName', 'originalName', 'description', 'created', or 'relevance'. For all options other than 'relevance', prefix the attribute name with a dash to sort in descending order. e.g., orderBy='-catalogName'. Defaults to '-created'.
searchFor <- 'searchFor_example' # character | A value to search for in the dataset's name, description, tags, column names, categories, and latest errors. The search is case insensitive. If no value is provided, or if the empty string is used, or if the string contains only whitespace, no filtering occurs. Partial matching is performed on the dataset name and description fields; all other fields require an exact match.
tag <- OneOfstringarray$new() # OneOfstringarray | Filter results to display only items with the specified catalog item tags, in lower case, with no spaces.
accessType <- "any" # character | Access type used to filter returned results. Valid options are 'owner', 'shared', 'created', and 'any' (the default): 'owner' items are owned by the requester, 'shared' items have been shared with the requester, 'created' items have been created by the requester, and 'any' items matches all.
datasourceType <- OneOfstringarray$new() # OneOfstringarray | Data source types used for filtering.
category <- OneOfstringarray$new() # OneOfstringarray | Category type(s) used for filtering. Searches are case sensitive and support '&' and 'OR' operators.
filterFailed <- "false" # character | Sets whether to exclude from the search results all catalog items that failed during import. If True, invalid catalog items will be excluded; default is False.
ownerUserId <- OneOfstringarray$new() # OneOfstringarray | Filter results to display only those owned by user(s) identified by the specified UID.
ownerUsername <- OneOfstringarray$new() # OneOfstringarray | Filter results to display only those owned by user(s) identified by the specified username.
type <- 'type_example' # character | Filter results by catalog type. The 'dataset' option matches both 'snapshot_dataset' and 'remote_dataset'.

api.instance <- AiCatalogApi$new()
result <- api.instance$CatalogItemsList(offset, limit, initialCacheSize, useCache=useCache, orderBy=orderBy, searchFor=searchFor, tag=tag, accessType=accessType, datasourceType=datasourceType, category=category, filterFailed=filterFailed, ownerUserId=ownerUserId, ownerUsername=ownerUsername, type=type)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CatalogItemsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-CatalogItemsPatch}{}}}
\subsection{Method \code{CatalogItemsPatch()}}{
Update the name, description, or tags for the requested catalog item.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$CatalogItemsPatch(catalogId, updateCatalogMetadata = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{catalogId}}{character. Catalog item ID.}

\item{\code{updateCatalogMetadata}}{\link{UpdateCatalogMetadata}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the name, description, or tags for the requested catalog item.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Extended details of the updated catalog item.
\itemize{
}
\item \strong{\code{403}} User does not have permission to update this catalog item.
\itemize{
}
\item \strong{\code{410}} Requested catalog item was previously deleted.
\itemize{
}
}
}

\subsection{Returns}{
\link{CatalogExtendedDetailsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
catalogId <- 'catalogId_example' # character | Catalog item ID.
updateCatalogMetadata <- UpdateCatalogMetadata$new() # UpdateCatalogMetadata |

api.instance <- AiCatalogApi$new()
result <- api.instance$CatalogItemsPatch(catalogId, updateCatalogMetadata=updateCatalogMetadata)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CatalogItemsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-CatalogItemsRetrieve}{}}}
\subsection{Method \code{CatalogItemsRetrieve()}}{
Retrieves latest version information, by ID, for catalog items.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$CatalogItemsRetrieve(catalogId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{catalogId}}{character. Catalog item ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves latest version information, by ID, for catalog items.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Catalog item details retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{CatalogDetailsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
catalogId <- 'catalogId_example' # character | Catalog item ID.

api.instance <- AiCatalogApi$new()
result <- api.instance$CatalogItemsRetrieve(catalogId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataEngineQueryGeneratorsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DataEngineQueryGeneratorsCreate}{}}}
\subsection{Method \code{DataEngineQueryGeneratorsCreate()}}{
Create a data engine query generator
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DataEngineQueryGeneratorsCreate(
  createDataEngineQueryGenerator = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{createDataEngineQueryGenerator}}{\link{CreateDataEngineQueryGenerator}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a data engine query generator.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{422}} Unable to process data engine query generation.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
createDataEngineQueryGenerator <- CreateDataEngineQueryGenerator$new() # CreateDataEngineQueryGenerator |

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineQueryGeneratorsCreate(createDataEngineQueryGenerator=createDataEngineQueryGenerator)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataEngineQueryGeneratorsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DataEngineQueryGeneratorsRetrieve}{}}}
\subsection{Method \code{DataEngineQueryGeneratorsRetrieve()}}{
Retrieve a data engine query generator given ID.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DataEngineQueryGeneratorsRetrieve(dataEngineQueryGeneratorId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataEngineQueryGeneratorId}}{character. The ID of the data engine query generator.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a data engine query generator


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Specified query generator was not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrieveDataEngineQueryResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
dataEngineQueryGeneratorId <- 'dataEngineQueryGeneratorId_example' # character | The ID of the data engine query generator.

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineQueryGeneratorsRetrieve(dataEngineQueryGeneratorId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataEngineWorkspaceStatesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DataEngineWorkspaceStatesCreate}{}}}
\subsection{Method \code{DataEngineWorkspaceStatesCreate()}}{
Create Data Engine workspace state
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DataEngineWorkspaceStatesCreate(createWorkspaceState = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{createWorkspaceState}}{\link{CreateWorkspaceState}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create Data Engine workspace state in database.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The Data Engine Workspace state
\itemize{
}
\item \strong{\code{410}} Specified workspace state was already deleted.
\itemize{
}
}
}

\subsection{Returns}{
\link{WorkspaceSourceCreatedResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
createWorkspaceState <- CreateWorkspaceState$new() # CreateWorkspaceState |

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineWorkspaceStatesCreate(createWorkspaceState=createWorkspaceState)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate}{}}}
\subsection{Method \code{DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate()}}{
Create Data Engine workspace state from a query generator
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate(
  createWorkspaceStateFromQueryGenerator = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{createWorkspaceStateFromQueryGenerator}}{\link{CreateWorkspaceStateFromQueryGenerator}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create Data Engine workspace state in database from a query generator.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} The Data Engine Workspace state
\itemize{
}
}
}

\subsection{Returns}{
\link{WorkspaceStateCreatedFromQueryGeneratorResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
createWorkspaceStateFromQueryGenerator <- CreateWorkspaceStateFromQueryGenerator$new() # CreateWorkspaceStateFromQueryGenerator |

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineWorkspaceStatesFromDataEngineQueryGeneratorCreate(createWorkspaceStateFromQueryGenerator=createWorkspaceStateFromQueryGenerator)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataEngineWorkspaceStatesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DataEngineWorkspaceStatesRetrieve}{}}}
\subsection{Method \code{DataEngineWorkspaceStatesRetrieve()}}{
Read Data Engine workspace state
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DataEngineWorkspaceStatesRetrieve(workspaceStateId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workspaceStateId}}{character. The ID of the Data Engine workspace state.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Read and return previously stored Data Engine workspace state.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The Data Engine workspace state
\itemize{
}
\item \strong{\code{410}} Specified workspace state was already deleted.
\itemize{
}
}
}

\subsection{Returns}{
\link{WorkspaceStateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
workspaceStateId <- 'workspaceStateId_example' # character | The ID of the Data Engine workspace state.

api.instance <- AiCatalogApi$new()
result <- api.instance$DataEngineWorkspaceStatesRetrieve(workspaceStateId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsAccessControlList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsAccessControlList}{}}}
\subsection{Method \code{DatasetsAccessControlList()}}{
List dataset access
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsAccessControlList(
  offset,
  limit,
  datasetId,
  userId = NULL,
  username = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{userId}}{character. Only return the access control information for a user with this user ID.}

\item{\code{username}}{character. Only return the access control information for a user with this username.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the users and their associated roles for the specified dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of user permissions
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetAccessControlListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
datasetId <- 'datasetId_example' # character | The ID of the dataset.
userId <- 'userId_example' # character | Only return the access control information for a user with this user ID.
username <- 'username_example' # character | Only return the access control information for a user with this username.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsAccessControlList(offset, limit, datasetId, userId=userId, username=username)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsAccessControlPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsAccessControlPatchMany}{}}}
\subsection{Method \code{DatasetsAccessControlPatchMany()}}{
Modify dataset access
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsAccessControlPatchMany(
  datasetId,
  datasetAccessSet = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasetAccessSet}}{\link{DatasetAccessSet}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Grant access to the dataset at the specified role level, or remove access to the dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully modified
\itemize{
}
\item \strong{\code{409}} Duplicate entry for a user in permission list or the request would leave the dataset without an owner.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetAccessSet <- DatasetAccessSet$new() # DatasetAccessSet |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsAccessControlPatchMany(datasetId, datasetAccessSet=datasetAccessSet)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsAllFeaturesDetailsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsAllFeaturesDetailsList}{}}}
\subsection{Method \code{DatasetsAllFeaturesDetailsList()}}{
Get dataset features
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsAllFeaturesDetailsList(
  limit,
  offset,
  orderBy,
  datasetId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change and a maximum limit may be imposed without notice.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{orderBy}}{character. How the features should be ordered.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Return detailed information on all the features and transforms for this dataset.If the Dataset Item has attribute snapshot = True, all optional fields also appear


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of feature info
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeaturesListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "name" # character | How the features should be ordered.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsAllFeaturesDetailsList(limit, offset, orderBy, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsDelete}{}}}
\subsection{Method \code{DatasetsDelete()}}{
Delete dataset
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsDelete(datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Marks the dataset with the given ID as deleted.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully deleted
\itemize{
}
\item \strong{\code{409}} Cannot delete a dataset that has refresh jobs.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsDelete(datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsDeletedPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsDeletedPatchMany}{}}}
\subsection{Method \code{DatasetsDeletedPatchMany()}}{
Recover deleted dataset
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsDeletedPatchMany(datasetId, body = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{body}}{object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Recover the dataset item with given datasetId from `deleted`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Item was not deleted: nothing to recover.
\itemize{
}
\item \strong{\code{204}} Successfully recovered
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
body <- NULL # object |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsDeletedPatchMany(datasetId, body=body)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeatureHistogramsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeatureHistogramsRetrieve}{}}}
\subsection{Method \code{DatasetsFeatureHistogramsRetrieve()}}{
Get dataset feature histogram
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeatureHistogramsRetrieve(
  binLimit,
  datasetId,
  featureName,
  key = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{binLimit}}{integer. Maximum number of bins in the returned plot.}

\item{\code{datasetId}}{character. The ID of the dataset entry to retrieve.}

\item{\code{featureName}}{character. The name of the feature.}

\item{\code{key}}{character. Only required for the Summarized categorical feature. Name of the top 50 key for which plot to be retrieved.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get histogram chart data for a specific feature in the specified dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The feature histogram
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeatureHistogramResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
binLimit <- 60 # integer | Maximum number of bins in the returned plot.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry to retrieve.
featureName <- 'featureName_example' # character | The name of the feature.
key <- 'key_example' # character | Only required for the Summarized categorical feature. Name of the top 50 key for which plot to be retrieved.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeatureHistogramsRetrieve(binLimit, datasetId, featureName, key=key)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeatureTransformsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeatureTransformsCreate}{}}}
\subsection{Method \code{DatasetsFeatureTransformsCreate()}}{
Create dataset feature transform
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeatureTransformsCreate(
  datasetId,
  featureTransform = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{featureTransform}}{\link{FeatureTransform}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new feature by changing the type of an existing one.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{409}} Feature name already exists.
\itemize{
}
\item \strong{\code{410}} Dataset deleted.
\itemize{
}
\item \strong{\code{422}} In case of an invalid transformation or when dataset does not have profile data or sample files available.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featureTransform <- FeatureTransform$new() # FeatureTransform |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeatureTransformsCreate(datasetId, featureTransform=featureTransform)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeatureTransformsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeatureTransformsList}{}}}
\subsection{Method \code{DatasetsFeatureTransformsList()}}{
List dataset feature transforms
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeatureTransformsList(limit, offset, datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change and a maximum limit may be imposed without notice.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves the transforms of the dataset with given ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of feature transforms
\itemize{
}
\item \strong{\code{410}} Dataset deleted.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetTransformListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeatureTransformsList(limit, offset, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeatureTransformsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeatureTransformsRetrieve}{}}}
\subsection{Method \code{DatasetsFeatureTransformsRetrieve()}}{
Get dataset feature transform
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeatureTransformsRetrieve(datasetId, featureName, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The dataset to select feature from.}

\item{\code{featureName}}{character. The name of the feature. Note that DataRobot renames some features, so the feature name may not be the one from your original data. Non-ascii features names should be utf-8-encoded (before URL-quoting).}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the specified feature with descriptive information.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The feature transform
\itemize{
}
\item \strong{\code{410}} Dataset deleted.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetTransformResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset to select feature from.
featureName <- 'featureName_example' # character | The name of the feature. Note that DataRobot renames some features, so the feature name may not be the one from your original data. Non-ascii features names should be utf-8-encoded (before URL-quoting).

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeatureTransformsRetrieve(datasetId, featureName)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeaturelistsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeaturelistsCreate}{}}}
\subsection{Method \code{DatasetsFeaturelistsCreate()}}{
Create dataset featurelist
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeaturelistsCreate(
  datasetId,
  featureListCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{featureListCreate}}{\link{FeatureListCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create featurelist for specified dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Successfully created
\itemize{
}
\item \strong{\code{409}} Feature list with specified name already exists
\itemize{
}
\item \strong{\code{422}} One or more of the specified features does not exist in the dataset
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeaturelistResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featureListCreate <- FeatureListCreate$new() # FeatureListCreate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsCreate(datasetId, featureListCreate=featureListCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeaturelistsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeaturelistsDelete}{}}}
\subsection{Method \code{DatasetsFeaturelistsDelete()}}{
Delete dataset featurelist
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeaturelistsDelete(datasetId, featurelistId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{featurelistId}}{character. The ID of the featurelist.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Deletes the indicated featurelist of the dataset with given ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully deleted
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featurelistId <- 'featurelistId_example' # character | The ID of the featurelist.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsDelete(datasetId, featurelistId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeaturelistsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeaturelistsList}{}}}
\subsection{Method \code{DatasetsFeaturelistsList()}}{
Retrieve dataset featurelists
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeaturelistsList(limit, offset, orderBy, datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change and a maximum limit may be imposed without notice.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{orderBy}}{character. How the features should be ordered.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves the featurelists of the dataset with given ID and the latest dataset version.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of featurelists
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeaturelistListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "name" # character | How the features should be ordered.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsList(limit, offset, orderBy, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeaturelistsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeaturelistsPatch}{}}}
\subsection{Method \code{DatasetsFeaturelistsPatch()}}{
Update dataset featurelist
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeaturelistsPatch(
  datasetId,
  featurelistId,
  featureListModify = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{featurelistId}}{character. The ID of the featurelist.}

\item{\code{featureListModify}}{\link{FeatureListModify}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Modifies the indicated featurelist of the dataset with given ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully modified
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featurelistId <- 'featurelistId_example' # character | The ID of the featurelist.
featureListModify <- FeatureListModify$new() # FeatureListModify |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsPatch(datasetId, featurelistId, featureListModify=featureListModify)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFeaturelistsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFeaturelistsRetrieve}{}}}
\subsection{Method \code{DatasetsFeaturelistsRetrieve()}}{
Get dataset featurelist
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFeaturelistsRetrieve(datasetId, featurelistId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{featurelistId}}{character. The ID of the featurelist.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves the specified featurelist of the dataset with given ID and the latest dataset version.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The featurelist
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeaturelistResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
featurelistId <- 'featurelistId_example' # character | The ID of the featurelist.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFeaturelistsRetrieve(datasetId, featurelistId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFileList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFileList}{}}}
\subsection{Method \code{DatasetsFileList()}}{
Retrieve original dataset data
Produces: "text/csv"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFileList(datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve all the originally uploaded data, in CSV form.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The original dataset data
\itemize{
}
\item \strong{\code{409}} Ingest info is missing for dataset version.
\itemize{
}
\item \strong{\code{422}} Dataset cannot be downloaded. Possible reasons include \"dataPersisted\" being false for the dataset, the dataset not being a snapshot, and this dataset is too big to be downloaded (maximum download size depends on a config of your installation).
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFileList(datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFromDataEngineWorkspaceStateCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFromDataEngineWorkspaceStateCreate}{}}}
\subsection{Method \code{DatasetsFromDataEngineWorkspaceStateCreate()}}{
Create dataset from Data Engine workspace
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFromDataEngineWorkspaceStateCreate(
  datasetCreateFromWorkspaceState = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetCreateFromWorkspaceState}}{\link{DatasetCreateFromWorkspaceState}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a dataset from a Data Engine workspace state.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{410}} Specified query output was already deleted.
\itemize{
}
}
}

\subsection{Returns}{
\link{CreatedDatasetDataEngineResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetCreateFromWorkspaceState <- DatasetCreateFromWorkspaceState$new() # DatasetCreateFromWorkspaceState |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromDataEngineWorkspaceStateCreate(datasetCreateFromWorkspaceState=datasetCreateFromWorkspaceState)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFromDataSourceCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFromDataSourceCreate}{}}}
\subsection{Method \code{DatasetsFromDataSourceCreate()}}{
Create dataset from data source
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFromDataSourceCreate(datasource = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasource}}{\link{Datasource}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a Dataset Item from a data source.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasource <- Datasource$new() # Datasource |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromDataSourceCreate(datasource=datasource)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFromFileCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFromFileCreate}{}}}
\subsection{Method \code{DatasetsFromFileCreate()}}{
Create dataset from file
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFromFileCreate(file, categories = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{data.frame. The data to be used for the creation.}

\item{\code{categories}}{\link{OneOfstringarray}. An array of strings describing the intended use of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a dataset from a file.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{422}} The request cannot be processed. The request did not contain file contents.
\itemize{
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
file <- File.new('/path/to/file') # data.frame | The data to be used for the creation.
categories <- oneOf<string,array>$new() # OneOfstringarray | An array of strings describing the intended use of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromFileCreate(file, categories=categories)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFromHDFSCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFromHDFSCreate}{}}}
\subsection{Method \code{DatasetsFromHDFSCreate()}}{
Create dataset from HDFS URL
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFromHDFSCreate(hdfs = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{hdfs}}{\link{Hdfs}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a Dataset Item from an HDFS URL.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
hdfs <- Hdfs$new() # Hdfs |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromHDFSCreate(hdfs=hdfs)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsFromURLCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsFromURLCreate}{}}}
\subsection{Method \code{DatasetsFromURLCreate()}}{
Create dataset from URL
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsFromURLCreate(url = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{\link{Url}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a Dataset Item from a URL.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
url <- Url$new() # Url |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsFromURLCreate(url=url)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsList}{}}}
\subsection{Method \code{DatasetsList()}}{
List datasets
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsList(
  limit,
  offset,
  category = NULL,
  orderBy = NULL,
  filterFailed = "false",
  datasetVersionIds = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{category}}{Enum < \link{TRAINING, PREDICTION} > If specified, only dataset versions that have the specified category will be included in the results. Categories identify the intended use of the dataset.}

\item{\code{orderBy}}{Enum < \link{created, -created} > Sorting order which will be applied to catalog list.}

\item{\code{filterFailed}}{Enum < \link{false, False, true, True} > Whether datasets that failed during import should be excluded from the results. If True invalid datasets will be excluded.}

\item{\code{datasetVersionIds}}{\link{OneOfstringarray}. If specified will only return datasets that are associated with specified dataset versions.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all datasets accessible by the user.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of datasets
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned.
offset <- 0 # integer | This many results will be skipped.
category <- 'category_example' # character | If specified, only dataset versions that have the specified category will be included in the results. Categories identify the intended use of the dataset.
orderBy <- 'orderBy_example' # character | Sorting order which will be applied to catalog list.
filterFailed <- "false" # character | Whether datasets that failed during import should be excluded from the results. If True invalid datasets will be excluded.
datasetVersionIds <- OneOfstringarray$new() # OneOfstringarray | If specified will only return datasets that are associated with specified dataset versions.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsList(limit, offset, category=category, orderBy=orderBy, filterFailed=filterFailed, datasetVersionIds=datasetVersionIds)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsPatch}{}}}
\subsection{Method \code{DatasetsPatch()}}{
Modify dataset
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsPatch(datasetId, patchDataset = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{patchDataset}}{\link{PatchDataset}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Modifies the specified dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Dataset successfully modified
\itemize{
}
\item \strong{\code{422}} The categories are not applicable to the dataset.
\itemize{
}
}
}

\subsection{Returns}{
\link{BasicDatasetDetailsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
patchDataset <- PatchDataset$new() # PatchDataset |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsPatch(datasetId, patchDataset=patchDataset)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsPatchMany}{}}}
\subsection{Method \code{DatasetsPatchMany()}}{
Execute bulk dataset action
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsPatchMany(bulkDatasetAction = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{bulkDatasetAction}}{\link{BulkDatasetAction}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Execute the specified bulk action on multiple datasets.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully executed
\itemize{
}
\item \strong{\code{409}} Cannot delete a dataset that has refresh jobs.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
bulkDatasetAction <- BulkDatasetAction$new() # BulkDatasetAction |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsPatchMany(bulkDatasetAction=bulkDatasetAction)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsPermissionsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsPermissionsList}{}}}
\subsection{Method \code{DatasetsPermissionsList()}}{
Describe dataset permissions
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsPermissionsList(datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Describe what permissions current user has for given dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The dataset permissions
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetDescribePermissionsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsPermissionsList(datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsProjectsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsProjectsList}{}}}
\subsection{Method \code{DatasetsProjectsList()}}{
Get dataset projects
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsProjectsList(limit, offset, datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. Only this many items are returned.}

\item{\code{offset}}{integer. Skip this many items.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves a dataset's projects by dataset ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of projects
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetProjectListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | Only this many items are returned.
offset <- 0 # integer | Skip this many items.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsProjectsList(limit, offset, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRefreshJobsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRefreshJobsCreate}{}}}
\subsection{Method \code{DatasetsRefreshJobsCreate()}}{
Schedule dataset refresh
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRefreshJobsCreate(
  datasetId,
  datasetRefreshJobCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasetRefreshJobCreate}}{\link{DatasetRefreshJobCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a dataset refresh job that will automatically create dataset snapshots on a schedule.  Optionally if the limit of enabled jobs per user is reached the following metadata will be added to the default error response payload:  - \strong{datasetsWithJob} (\emph{array}) - The list of datasets IDs that have at least one enabled job. - \strong{errorType} (\emph{string}) - (New in version v2.21) The type of error that happened, possible values include (but are not limited to): ``Generic Limit Reached``, ``Max Job Limit Reached for Dataset``, and ``Max Job Limit Reached for User``.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Dataset refresh job created.
\itemize{
}
\item \strong{\code{409}} The maximum number of enabled jobs is reached.
\itemize{
}
\item \strong{\code{422}} Refresh job could not be created. Possible reasons include, the job does not belong to the given dataset, credential ID required when Kerberos authentication enabled, or the schedule is not valid or cannot be understood.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetRefreshJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetRefreshJobCreate <- DatasetRefreshJobCreate$new() # DatasetRefreshJobCreate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsCreate(datasetId, datasetRefreshJobCreate=datasetRefreshJobCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRefreshJobsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRefreshJobsDelete}{}}}
\subsection{Method \code{DatasetsRefreshJobsDelete()}}{
Deletes an existing dataset refresh job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRefreshJobsDelete(datasetId, jobId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The dataset associated with the scheduled refresh job.}

\item{\code{jobId}}{character. ID of the user scheduled dataset refresh job.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Deletes an existing dataset refresh job.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Scheduled Job deleted.
\itemize{
}
\item \strong{\code{422}} Invalid job ID or dataset ID provided.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset associated with the scheduled refresh job.
jobId <- 'jobId_example' # character | ID of the user scheduled dataset refresh job.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsDelete(datasetId, jobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRefreshJobsExecutionResultsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRefreshJobsExecutionResultsList}{}}}
\subsection{Method \code{DatasetsRefreshJobsExecutionResultsList()}}{
Results of dataset refresh job.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRefreshJobsExecutionResultsList(
  datasetId,
  jobId,
  limit = 20,
  offset = 0,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The dataset associated with the scheduled refresh job.}

\item{\code{jobId}}{character. ID of the user scheduled dataset refresh job.}

\item{\code{limit}}{integer. Maximum number of results returned. The default may change and a maximum limit may be imposed without notice.}

\item{\code{offset}}{integer. Number of results that will be skipped.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Paginated list of execution results for refresh job with the given ID and dataset with the given ID, sorted from newest to oldest.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Paginated list of dataset refresh job results, sorted from latest to oldest.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetRefreshJobRetrieveExecutionResultsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset associated with the scheduled refresh job.
jobId <- 'jobId_example' # character | ID of the user scheduled dataset refresh job.
limit <- 20 # integer | Maximum number of results returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | Number of results that will be skipped.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsExecutionResultsList(datasetId, jobId, limit=limit, offset=offset)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRefreshJobsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRefreshJobsList}{}}}
\subsection{Method \code{DatasetsRefreshJobsList()}}{
Information about scheduled jobs for given dataset.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRefreshJobsList(limit, offset, datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. Only this many items are returned.}

\item{\code{offset}}{integer. Skip this many items.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Paginated list of scheduled jobs descriptions for a specific dataset with given dataset ID, sorted by time of the last update.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of a dataset's scheduled job information retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetRefreshJobsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | Only this many items are returned.
offset <- 0 # integer | Skip this many items.
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsList(limit, offset, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRefreshJobsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRefreshJobsPatch}{}}}
\subsection{Method \code{DatasetsRefreshJobsPatch()}}{
Update a dataset refresh job
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRefreshJobsPatch(
  datasetId,
  jobId,
  datasetRefreshJobUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The dataset associated with the scheduled refresh job.}

\item{\code{jobId}}{character. ID of the user scheduled dataset refresh job.}

\item{\code{datasetRefreshJobUpdate}}{\link{DatasetRefreshJobUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a dataset refresh job.  Optionally if the limit of enabled jobs per user is reached the following metadata will be added to the default error response payload:  - \strong{datasetsWithJob} (\emph{array}) - The list of datasets IDs that have at least one enabled job. - \strong{errorType} (\emph{string}) - (New in version v2.21) The type of error that happened, possible values include (but are not limited to): ``Generic Limit Reached``, ``Max Job Limit Reached for Dataset``, and ``Max Job Limit Reached for User``.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Scheduled Job configuration updated.
\itemize{
}
\item \strong{\code{409}} The maximum number of enabled jobs is reached.
\itemize{
}
\item \strong{\code{422}} Refresh job could not be updated. Possible reasons include, the job does not belong to the given dataset, credential ID required when Kerberos authentication enabled, or the schedule is not valid or cannot be understood.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetRefreshJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset associated with the scheduled refresh job.
jobId <- 'jobId_example' # character | ID of the user scheduled dataset refresh job.
datasetRefreshJobUpdate <- DatasetRefreshJobUpdate$new() # DatasetRefreshJobUpdate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsPatch(datasetId, jobId, datasetRefreshJobUpdate=datasetRefreshJobUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRefreshJobsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRefreshJobsRetrieve}{}}}
\subsection{Method \code{DatasetsRefreshJobsRetrieve()}}{
Gets configuration of a user scheduled dataset refresh job by job ID
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRefreshJobsRetrieve(datasetId, jobId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The dataset associated with the scheduled refresh job.}

\item{\code{jobId}}{character. ID of the user scheduled dataset refresh job.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Gets configuration of a user scheduled dataset refresh job by job ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Job information retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetRefreshJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The dataset associated with the scheduled refresh job.
jobId <- 'jobId_example' # character | ID of the user scheduled dataset refresh job.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRefreshJobsRetrieve(datasetId, jobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRelationshipsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRelationshipsCreate}{}}}
\subsection{Method \code{DatasetsRelationshipsCreate()}}{
Create dataset relationship.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRelationshipsCreate(
  datasetId,
  datasetRelationshipCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasetRelationshipCreate}}{\link{DatasetRelationshipCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a dataset relationship.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Successfully created
\itemize{
}
\item \strong{\code{409}} Relationship already exists.
\itemize{
}
\item \strong{\code{410}} Dataset deleted.
\itemize{
}
\item \strong{\code{422}} Missing or unrecognized fields.
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetRelationshipResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetRelationshipCreate <- DatasetRelationshipCreate$new() # DatasetRelationshipCreate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRelationshipsCreate(datasetId, datasetRelationshipCreate=datasetRelationshipCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRelationshipsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRelationshipsDelete}{}}}
\subsection{Method \code{DatasetsRelationshipsDelete()}}{
Delete dataset relationship.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRelationshipsDelete(datasetId, datasetRelationshipId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasetRelationshipId}}{character. The ID of the dataset relationship to delete.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a dataset relationship.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully deleted
\itemize{
}
\item \strong{\code{410}} Dataset deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetRelationshipId <- 'datasetRelationshipId_example' # character | The ID of the dataset relationship to delete.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRelationshipsDelete(datasetId, datasetRelationshipId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRelationshipsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRelationshipsList}{}}}
\subsection{Method \code{DatasetsRelationshipsList()}}{
List related datasets
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRelationshipsList(
  limit,
  offset,
  datasetId,
  linkedDatasetId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{linkedDatasetId}}{character. Providing `linkedDatasetId` will filter such that only relationships between `datasetId` (from the path) and `linkedDatasetId` will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a list of the dataset relationships for a specific dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of dataset relationships
\itemize{
}
\item \strong{\code{410}} Dataset deleted
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetRelationshipListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned.
offset <- 0 # integer | This many results will be skipped.
datasetId <- 'datasetId_example' # character | The ID of the dataset.
linkedDatasetId <- 'linkedDatasetId_example' # character | Providing `linkedDatasetId` will filter such that only relationships between `datasetId` (from the path) and `linkedDatasetId` will be returned.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRelationshipsList(limit, offset, datasetId, linkedDatasetId=linkedDatasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRelationshipsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRelationshipsPatch}{}}}
\subsection{Method \code{DatasetsRelationshipsPatch()}}{
Update dataset relationship.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRelationshipsPatch(
  datasetId,
  datasetRelationshipId,
  datasetRelationshipUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasetRelationshipId}}{character. The ID of the dataset relationship to delete.}

\item{\code{datasetRelationshipUpdate}}{\link{DatasetRelationshipUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a dataset relationship.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully updated
\itemize{
}
\item \strong{\code{409}} Relationship already exists
\itemize{
}
\item \strong{\code{410}} Dataset deleted
\itemize{
}
\item \strong{\code{422}} Bad payload: missing or unrecognized fields
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetRelationshipResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetRelationshipId <- 'datasetRelationshipId_example' # character | The ID of the dataset relationship to delete.
datasetRelationshipUpdate <- DatasetRelationshipUpdate$new() # DatasetRelationshipUpdate |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRelationshipsPatch(datasetId, datasetRelationshipId, datasetRelationshipUpdate=datasetRelationshipUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsRetrieve}{}}}
\subsection{Method \code{DatasetsRetrieve()}}{
Get dataset details
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsRetrieve(datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves the details of the dataset with given ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The dataset details
\itemize{
}
}
}

\subsection{Returns}{
\link{FullDatasetDetailsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsRetrieve(datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsSharedRolesList}{}}}
\subsection{Method \code{DatasetsSharedRolesList()}}{
List dataset shared roles
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsSharedRolesList(
  offset,
  limit,
  datasetId,
  id = NULL,
  name = NULL,
  shareRecipientType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{id}}{character. Only return the access control information for a organization, group or user with this ID.}

\item{\code{name}}{character. Only return the access control information for a organization, group or user with this name.}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > It describes the recipient type.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations who have access to this dataset and their roles.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of user permissions
\itemize{
}
}
}

\subsection{Returns}{
\link{SharedRolesListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
datasetId <- 'datasetId_example' # character | The ID of the dataset.
id <- 'id_example' # character | Only return the access control information for a organization, group or user with this ID.
name <- 'name_example' # character | Only return the access control information for a organization, group or user with this name.
shareRecipientType <- 'shareRecipientType_example' # character | It describes the recipient type.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsSharedRolesList(offset, limit, datasetId, id=id, name=name, shareRecipientType=shareRecipientType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsSharedRolesPatchMany}{}}}
\subsection{Method \code{DatasetsSharedRolesPatchMany()}}{
Modify dataset shared roles
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsSharedRolesPatchMany(
  datasetId,
  datasetSharedRoles = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasetSharedRoles}}{\link{DatasetSharedRoles}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Grant access, remove access or update roles for organizations, groups or users on this dataset. Up to 100 roles may be set per array in a single request.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully modified
\itemize{
}
\item \strong{\code{409}} Duplicate entry for the org/group/user in permission listor the request would leave the dataset without an owner.
\itemize{
}
\item \strong{\code{422}} Request is unprocessable. For example, `name` is stated for not user recipient.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetSharedRoles <- DatasetSharedRoles$new() # DatasetSharedRoles |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsSharedRolesPatchMany(datasetId, datasetSharedRoles=datasetSharedRoles)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsAllFeaturesDetailsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsAllFeaturesDetailsList}{}}}
\subsection{Method \code{DatasetsVersionsAllFeaturesDetailsList()}}{
Get dataset features
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsAllFeaturesDetailsList(
  limit,
  offset,
  orderBy,
  datasetId,
  datasetVersionId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change and a maximum limit may be imposed without notice.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{orderBy}}{character. How the features should be ordered.}

\item{\code{datasetId}}{character. The ID of the dataset entry.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Return detailed information on all the features and transforms for this dataset.If the Dataset Item has attribute snapshot = True, all optional fields also appear


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of feature info
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeaturesListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "name" # character | How the features should be ordered.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsAllFeaturesDetailsList(limit, offset, orderBy, datasetId, datasetVersionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsDelete}{}}}
\subsection{Method \code{DatasetsVersionsDelete()}}{
Delete dataset version
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsDelete(datasetId, datasetVersionId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset entry.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Marks the dataset version with the given ID as deleted.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully deleted
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsDelete(datasetId, datasetVersionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsDeletedPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsDeletedPatchMany}{}}}
\subsection{Method \code{DatasetsVersionsDeletedPatchMany()}}{
Recover deleted dataset version
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsDeletedPatchMany(
  datasetId,
  datasetVersionId,
  body = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset entry.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version.}

\item{\code{body}}{object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Recover the dataset version item with given datasetId and datasetVersionId from `deleted`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The item was not deleted: nothing to recover.
\itemize{
}
\item \strong{\code{204}} Successfully recovered
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.
body <- NULL # object |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsDeletedPatchMany(datasetId, datasetVersionId, body=body)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFeatureHistogramsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFeatureHistogramsRetrieve}{}}}
\subsection{Method \code{DatasetsVersionsFeatureHistogramsRetrieve()}}{
Get dataset feature histogram
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFeatureHistogramsRetrieve(
  binLimit,
  datasetId,
  datasetVersionId,
  featureName,
  key = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{binLimit}}{integer. Maximum number of bins in the returned plot.}

\item{\code{datasetId}}{character. The ID of the dataset entry to retrieve.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version to retrieve.}

\item{\code{featureName}}{character. The name of the feature.}

\item{\code{key}}{character. Only required for the Summarized categorical feature. Name of the top 50 key for which plot to be retrieved.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get histogram chart data for a specific feature in the specified dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The feature histogram
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeatureHistogramResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
binLimit <- 60 # integer | Maximum number of bins in the returned plot.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry to retrieve.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version to retrieve.
featureName <- 'featureName_example' # character | The name of the feature.
key <- 'key_example' # character | Only required for the Summarized categorical feature. Name of the top 50 key for which plot to be retrieved.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFeatureHistogramsRetrieve(binLimit, datasetId, datasetVersionId, featureName, key=key)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFeaturelistsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFeaturelistsList}{}}}
\subsection{Method \code{DatasetsVersionsFeaturelistsList()}}{
Retrieve dataset featurelists
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFeaturelistsList(
  limit,
  offset,
  orderBy,
  datasetId,
  datasetVersionId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change and a maximum limit may be imposed without notice.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{orderBy}}{character. How the features should be ordered.}

\item{\code{datasetId}}{character. The ID of the dataset entry.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves the featurelists of the dataset with given ID and the latest dataset version.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of featurelists
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeaturelistListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned. The default may change and a maximum limit may be imposed without notice.
offset <- 0 # integer | This many results will be skipped.
orderBy <- "name" # character | How the features should be ordered.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFeaturelistsList(limit, offset, orderBy, datasetId, datasetVersionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFeaturelistsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFeaturelistsRetrieve}{}}}
\subsection{Method \code{DatasetsVersionsFeaturelistsRetrieve()}}{
Get dataset featurelist
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFeaturelistsRetrieve(
  datasetId,
  datasetVersionId,
  featurelistId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset to retrieve featurelist for.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version to retrieve featurelists for.}

\item{\code{featurelistId}}{character. The ID of the featurelist.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves the specified featurelist of the dataset with given ID and the latest dataset version.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The featurelist
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetFeaturelistResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset to retrieve featurelist for.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version to retrieve featurelists for.
featurelistId <- 'featurelistId_example' # character | The ID of the featurelist.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFeaturelistsRetrieve(datasetId, datasetVersionId, featurelistId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFileList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFileList}{}}}
\subsection{Method \code{DatasetsVersionsFileList()}}{
Retrieve original dataset data
Produces: "text/csv"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFileList(datasetId, datasetVersionId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset entry.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve all the originally uploaded data, in CSV form.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The original dataset data
\itemize{
}
\item \strong{\code{409}} Ingest info is missing for dataset version.
\itemize{
}
\item \strong{\code{422}} Dataset version cannot be downloaded. Possible reasons include \"dataPersisted being false for the dataset, the dataset not being a snapshot, and this dataset version is too big to be downloaded (maximum download size depends on a config of your installation).
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFileList(datasetId, datasetVersionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFromDataEngineWorkspaceStateCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFromDataEngineWorkspaceStateCreate}{}}}
\subsection{Method \code{DatasetsVersionsFromDataEngineWorkspaceStateCreate()}}{
Create dataset version from Data Engine workspace
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFromDataEngineWorkspaceStateCreate(
  datasetId,
  datasetCreateFromWorkspaceState = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasetCreateFromWorkspaceState}}{\link{DatasetCreateFromWorkspaceState}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new dataset version for a specified dataset from a Data Engine workspace state. The new dataset version should have the same schema as the specified dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{410}} Specified workspace was already deleted.
\itemize{
}
\item \strong{\code{422}} Type of new dataset version is incompatible with specified dataset.
\itemize{
}
}
}

\subsection{Returns}{
\link{CreatedDatasetDataEngineResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetCreateFromWorkspaceState <- DatasetCreateFromWorkspaceState$new() # DatasetCreateFromWorkspaceState |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromDataEngineWorkspaceStateCreate(datasetId, datasetCreateFromWorkspaceState=datasetCreateFromWorkspaceState)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFromDataSourceCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFromDataSourceCreate}{}}}
\subsection{Method \code{DatasetsVersionsFromDataSourceCreate()}}{
Create dataset version from Data Source
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFromDataSourceCreate(
  datasetId,
  datasource = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasource}}{\link{Datasource}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new version for the specified dataset from specified Data Source. The dataset must have been created from a compatible data source originally.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasource <- Datasource$new() # Datasource |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromDataSourceCreate(datasetId, datasource=datasource)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFromFileCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFromFileCreate}{}}}
\subsection{Method \code{DatasetsVersionsFromFileCreate()}}{
Create dataset version from file
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFromFileCreate(
  datasetId,
  datasetFromFile = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{datasetFromFile}}{\link{DatasetFromFile}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new version for the specified dataset from a file.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
datasetFromFile <- DatasetFromFile$new() # DatasetFromFile |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromFileCreate(datasetId, datasetFromFile=datasetFromFile)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFromHDFSCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFromHDFSCreate}{}}}
\subsection{Method \code{DatasetsVersionsFromHDFSCreate()}}{
Create dataset version from HDFS URL
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFromHDFSCreate(datasetId, hdfs = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{hdfs}}{\link{Hdfs}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new version for the specified dataset from a HDFS URL. The dataset must have been created from the same HDFS URL originally.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
hdfs <- Hdfs$new() # Hdfs |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromHDFSCreate(datasetId, hdfs=hdfs)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFromLatestVersionCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFromLatestVersionCreate}{}}}
\subsection{Method \code{DatasetsVersionsFromLatestVersionCreate()}}{
Create dataset version from data source
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFromLatestVersionCreate(
  datasetId,
  fromLatest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{fromLatest}}{\link{FromLatest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new version of the specified dataset from the latest dataset version. This will reuse the same source of the data that was previously used. Not supported for datasets that were previously loaded from an uploaded file. If the dataset is currently a remote dataset, it will be converted to a snapshot dataset. NOTE:  if the current version uses a Data Source, the `user` and `password` must be specified so the data can be accessed.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{409}} The latest version of the dataset is in an errored state.
\itemize{
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
fromLatest <- FromLatest$new() # FromLatest |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromLatestVersionCreate(datasetId, fromLatest=fromLatest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFromURLCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFromURLCreate}{}}}
\subsection{Method \code{DatasetsVersionsFromURLCreate()}}{
Create dataset version from URL
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFromURLCreate(datasetId, url = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{url}}{\link{Url}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new version for the specified dataset from specified URL. The dataset must have been created from the same URL originally.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset.
url <- Url$new() # Url |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromURLCreate(datasetId, url=url)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsFromVersionCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsFromVersionCreate}{}}}
\subsection{Method \code{DatasetsVersionsFromVersionCreate()}}{
Create dataset version from previous version
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsFromVersionCreate(
  datasetId,
  datasetVersionId,
  fromSpecific = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset entry.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version.}

\item{\code{fromSpecific}}{\link{FromSpecific}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new version of the specified dataset from the specified dataset version. This will reuse the same source of the data that was previously used. Not supported for datasets that were previously loaded from an uploaded file. If the dataset is currently a remote dataset, it will be converted to a snapshot dataset. NOTE: If the specified version uses a Data Source, the `user` and `password` must be specified so the data can be accessed.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{409}} The dataset item's specified version is in an errored state.
\itemize{
}
}
}

\subsection{Returns}{
\link{CreatedDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.
fromSpecific <- FromSpecific$new() # FromSpecific |

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsFromVersionCreate(datasetId, datasetVersionId, fromSpecific=fromSpecific)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsList}{}}}
\subsection{Method \code{DatasetsVersionsList()}}{
List dataset versions
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsList(
  limit,
  offset,
  datasetId,
  category = NULL,
  orderBy = NULL,
  filterFailed = "false",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{datasetId}}{character. The ID of the dataset.}

\item{\code{category}}{Enum < \link{TRAINING, PREDICTION} > If specified, only dataset versions that have the specified category will be included in the results. Categories identify the intended use of the dataset.}

\item{\code{orderBy}}{Enum < \link{created, -created} > Sorting order which will be applied to catalog list.}

\item{\code{filterFailed}}{Enum < \link{false, False, true, True} > Whether datasets that failed during import should be excluded from the results. If True invalid datasets will be excluded.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all versions associated with given datasetId and which match the specified query parameters.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of dataset versions
\itemize{
}
}
}

\subsection{Returns}{
\link{DatasetListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | At most this many results are returned.
offset <- 0 # integer | This many results will be skipped.
datasetId <- 'datasetId_example' # character | The ID of the dataset.
category <- 'category_example' # character | If specified, only dataset versions that have the specified category will be included in the results. Categories identify the intended use of the dataset.
orderBy <- 'orderBy_example' # character | Sorting order which will be applied to catalog list.
filterFailed <- "false" # character | Whether datasets that failed during import should be excluded from the results. If True invalid datasets will be excluded.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsList(limit, offset, datasetId, category=category, orderBy=orderBy, filterFailed=filterFailed)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsProjectsList"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsProjectsList}{}}}
\subsection{Method \code{DatasetsVersionsProjectsList()}}{
Get dataset projects by version
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsProjectsList(
  limit,
  offset,
  datasetId,
  datasetVersionId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. Only this many items are returned.}

\item{\code{offset}}{integer. Skip this many items.}

\item{\code{datasetId}}{character. The ID of the dataset entry.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves a dataset's projects for the specified catalog dataset and dataset version id.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of projects
\itemize{
}
}
}

\subsection{Returns}{
\link{GetDatasetVersionProjectsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 100 # integer | Only this many items are returned.
offset <- 0 # integer | Skip this many items.
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsProjectsList(limit, offset, datasetId, datasetVersionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatasetsVersionsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-DatasetsVersionsRetrieve}{}}}
\subsection{Method \code{DatasetsVersionsRetrieve()}}{
Get dataset details by version
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$DatasetsVersionsRetrieve(datasetId, datasetVersionId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset entry.}

\item{\code{datasetVersionId}}{character. The ID of the dataset version.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieves the details of the dataset with given ID and version ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The dataset details
\itemize{
}
}
}

\subsection{Returns}{
\link{FullDatasetDetailsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset entry.
datasetVersionId <- 'datasetVersionId_example' # character | The ID of the dataset version.

api.instance <- AiCatalogApi$new()
result <- api.instance$DatasetsVersionsRetrieve(datasetId, datasetVersionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsBulkValidationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsBulkValidationsCreate}{}}}
\subsection{Method \code{UserBlueprintsBulkValidationsCreate()}}{
Validate many user blueprints.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsBulkValidationsCreate(
  userBlueprintBulkValidationRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintBulkValidationRequest}}{\link{UserBlueprintBulkValidationRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Validate many user blueprints, optionally using a specific project. Any non-existent or inaccessible user blueprints will be ignored.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Validated many user blueprints successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project was not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsBulkValidationResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintBulkValidationRequest <- UserBlueprintBulkValidationRequest$new() # UserBlueprintBulkValidationRequest |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsBulkValidationsCreate(userBlueprintBulkValidationRequest=userBlueprintBulkValidationRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsCreate}{}}}
\subsection{Method \code{UserBlueprintsCreate()}}{
Create a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsCreate(userBlueprintCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintCreate}}{\link{UserBlueprintCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Created the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Project not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintCreate <- UserBlueprintCreate$new() # UserBlueprintCreate |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsCreate(userBlueprintCreate=userBlueprintCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsDelete}{}}}
\subsection{Method \code{UserBlueprintsDelete()}}{
Delete a user blueprint.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsDelete(userBlueprintId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a user blueprint, specified by the `userBlueprintId`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully deleted the specified blueprint, if it existed.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsDelete(userBlueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsDeleteMany"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsDeleteMany}{}}}
\subsection{Method \code{UserBlueprintsDeleteMany()}}{
Delete user blueprints.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsDeleteMany(userBlueprintsBulkDelete = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintsBulkDelete}}{\link{UserBlueprintsBulkDelete}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete user blueprints, specified by `userBlueprintIds`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of user blueprints successfully and unsuccessfully deleted.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsBulkDeleteResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintsBulkDelete <- UserBlueprintsBulkDelete$new() # UserBlueprintsBulkDelete |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsDeleteMany(userBlueprintsBulkDelete=userBlueprintsBulkDelete)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsFromBlueprintIdCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsFromBlueprintIdCreate}{}}}
\subsection{Method \code{UserBlueprintsFromBlueprintIdCreate()}}{
Clone a blueprint from a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsFromBlueprintIdCreate(
  userBlueprintCreateFromBlueprintId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintCreateFromBlueprintId}}{\link{UserBlueprintCreateFromBlueprintId}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Clone a blueprint from a project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Created the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Project or blueprint not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromBlueprintId <- UserBlueprintCreateFromBlueprintId$new() # UserBlueprintCreateFromBlueprintId |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsFromBlueprintIdCreate(userBlueprintCreateFromBlueprintId=userBlueprintCreateFromBlueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsFromCustomTaskVersionIdCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsFromCustomTaskVersionIdCreate}{}}}
\subsection{Method \code{UserBlueprintsFromCustomTaskVersionIdCreate()}}{
Create a user blueprint from a single custom task.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsFromCustomTaskVersionIdCreate(
  userBlueprintCreateFromCustomTaskVersionIdPayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintCreateFromCustomTaskVersionIdPayload}}{\link{UserBlueprintCreateFromCustomTaskVersionIdPayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a user blueprint from a single custom task.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Created the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Custom task version or custom task not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromCustomTaskVersionIdPayload <- UserBlueprintCreateFromCustomTaskVersionIdPayload$new() # UserBlueprintCreateFromCustomTaskVersionIdPayload |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsFromCustomTaskVersionIdCreate(userBlueprintCreateFromCustomTaskVersionIdPayload=userBlueprintCreateFromCustomTaskVersionIdPayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsFromUserBlueprintIdCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsFromUserBlueprintIdCreate}{}}}
\subsection{Method \code{UserBlueprintsFromUserBlueprintIdCreate()}}{
Clone a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsFromUserBlueprintIdCreate(
  userBlueprintCreateFromUserBlueprintId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintCreateFromUserBlueprintId}}{\link{UserBlueprintCreateFromUserBlueprintId}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Clone a user blueprint.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Created the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} User blueprint or project not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromUserBlueprintId <- UserBlueprintCreateFromUserBlueprintId$new() # UserBlueprintCreateFromUserBlueprintId |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsFromUserBlueprintIdCreate(userBlueprintCreateFromUserBlueprintId=userBlueprintCreateFromUserBlueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsInputTypesList"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsInputTypesList}{}}}
\subsection{Method \code{UserBlueprintsInputTypesList()}}{
Retrieve input types.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsInputTypesList(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the input types which can be used with User Blueprints.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully retrieved the input types.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsInputTypesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsInputTypesList()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsList}{}}}
\subsection{Method \code{UserBlueprintsList()}}{
List user blueprints.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsList(offset, limit, projectId = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of results to skip (for pagination).}

\item{\code{limit}}{integer. The max number of results to return.}

\item{\code{projectId}}{character. The id of the project, used to filter for original project_id.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Fetch a list of the user blueprints the current user has access to


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Fetched the list of the accessible user blueprints successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of results to skip (for pagination).
limit <- 100 # integer | The max number of results to return.
projectId <- 'projectId_example' # character | The id of the project, used to filter for original project_id.

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsList(offset, limit, projectId=projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsPatch}{}}}
\subsection{Method \code{UserBlueprintsPatch()}}{
Update a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsPatch(
  userBlueprintId,
  userBlueprintUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{userBlueprintUpdate}}{\link{UserBlueprintUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Updated the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} User blueprint not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
userBlueprintUpdate <- UserBlueprintUpdate$new() # UserBlueprintUpdate |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsPatch(userBlueprintId, userBlueprintUpdate=userBlueprintUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsProjectBlueprintsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsProjectBlueprintsCreate}{}}}
\subsection{Method \code{UserBlueprintsProjectBlueprintsCreate()}}{
Add user blueprints to a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsProjectBlueprintsCreate(
  userBlueprintAddToMenu = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintAddToMenu}}{\link{UserBlueprintAddToMenu}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add a list of user blueprints, by id, to a specified (by id) project's repository.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully added the user blueprints to the project's repository.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintAddToMenuResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintAddToMenu <- UserBlueprintAddToMenu$new() # UserBlueprintAddToMenu |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsProjectBlueprintsCreate(userBlueprintAddToMenu=userBlueprintAddToMenu)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsRetrieve}{}}}
\subsection{Method \code{UserBlueprintsRetrieve()}}{
Retrieve a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsRetrieve(
  editMode,
  decompressedBlueprint,
  isInplaceEditor,
  userBlueprintId,
  projectId = NULL,
  getDynamicLabels = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{editMode}}{character. Whether to retrieve the extra blueprint metadata for editing.}

\item{\code{decompressedBlueprint}}{character. Whether to retrieve the blueprint in the decompressed format.}

\item{\code{isInplaceEditor}}{character. Whether the request is sent from the in place user BP editor.}

\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{projectId}}{character. String representation of ObjectId for the currently active project. The user blueprint is retrieved when this project is active.}

\item{\code{getDynamicLabels}}{character. Whether to add dynamic labels to a decompressed blueprint.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieved the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project or user blueprint not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
editMode <- FALSE # character | Whether to retrieve the extra blueprint metadata for editing.
decompressedBlueprint <- FALSE # character | Whether to retrieve the blueprint in the decompressed format.
isInplaceEditor <- FALSE # character | Whether the request is sent from the in place user BP editor.
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
projectId <- 'projectId_example' # character | String representation of ObjectId for the currently active project. The user blueprint is retrieved when this project is active.
getDynamicLabels <- FALSE # character | Whether to add dynamic labels to a decompressed blueprint.

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsRetrieve(editMode, decompressedBlueprint, isInplaceEditor, userBlueprintId, projectId=projectId, getDynamicLabels=getDynamicLabels)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsSharedRolesList}{}}}
\subsection{Method \code{UserBlueprintsSharedRolesList()}}{
Get a list of users, groups and organizations that have an access to this user blueprint
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsSharedRolesList(
  offset,
  limit,
  userBlueprintId,
  id = NULL,
  name = NULL,
  shareRecipientType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{id}}{character. Only return roles for a user, group or organization with this identifier.}

\item{\code{name}}{character. Only return roles for a user, group or organization with this name.}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > List access controls for recipients with this type.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations that have an access to this user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully retrieved roles.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintSharedRolesListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsSharedRolesList(offset, limit, userBlueprintId, id=id, name=name, shareRecipientType=shareRecipientType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsSharedRolesPatchMany}{}}}
\subsection{Method \code{UserBlueprintsSharedRolesPatchMany()}}{
Share a user blueprint with a user, group, or organization
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsSharedRolesPatchMany(
  userBlueprintId,
  sharedRolesUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{sharedRolesUpdate}}{\link{SharedRolesUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Share a user blueprint with a user, group, or organization


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Roles updated successfully
\itemize{
}
\item \strong{\code{400}} Bad Request
\itemize{
}
\item \strong{\code{403}} User can view entity but does not have permission to grant these roles on the entity.
\itemize{
}
\item \strong{\code{404}} Either the entity does not exist or the user does not have permissions to view the entity.
\itemize{
}
\item \strong{\code{409}} The request would leave the entity without an owner.
\itemize{
}
\item \strong{\code{422}} The request was formatted improperly.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
sharedRolesUpdate <- SharedRolesUpdate$new() # SharedRolesUpdate |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsSharedRolesPatchMany(userBlueprintId, sharedRolesUpdate=sharedRolesUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsTaskParametersCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsTaskParametersCreate}{}}}
\subsection{Method \code{UserBlueprintsTaskParametersCreate()}}{
Validate task parameters.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsTaskParametersCreate(
  userBlueprintTaskParameterValidation = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintTaskParameterValidation}}{\link{UserBlueprintTaskParameterValidation}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Validate that each value assigned to specified task parameters are valid.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Accepted validation parameters for a task in the context of User Blueprints.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Custom task version not found
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsValidateTaskParametersResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintTaskParameterValidation <- UserBlueprintTaskParameterValidation$new() # UserBlueprintTaskParameterValidation |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsTaskParametersCreate(userBlueprintTaskParameterValidation=userBlueprintTaskParameterValidation)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsTasksList"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsTasksList}{}}}
\subsection{Method \code{UserBlueprintsTasksList()}}{
Retrieve tasks for blueprint construction.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsTasksList(
  projectId = NULL,
  blueprintId = NULL,
  userBlueprintId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project id to use for task retrieval}

\item{\code{blueprintId}}{character. The blueprint id to use for task retrieval}

\item{\code{userBlueprintId}}{character. The user blueprint id to use for task retrieval}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the available tasks, organized into categories, which can be used to create or modify User Blueprints.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully retrieved the tasks.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project or user blueprint not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintTasksResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id to use for task retrieval
blueprintId <- 'blueprintId_example' # character | The blueprint id to use for task retrieval
userBlueprintId <- 'userBlueprintId_example' # character | The user blueprint id to use for task retrieval

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsTasksList(projectId=projectId, blueprintId=blueprintId, userBlueprintId=userBlueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsValidationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsValidationsCreate}{}}}
\subsection{Method \code{UserBlueprintsValidationsCreate()}}{
Validate a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$UserBlueprintsValidationsCreate(
  userBlueprintValidation = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintValidation}}{\link{UserBlueprintValidation}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Validate a user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Validated the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsValidationResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintValidation <- UserBlueprintValidation$new() # UserBlueprintValidation |

api.instance <- AiCatalogApi$new()
result <- api.instance$UserBlueprintsValidationsCreate(userBlueprintValidation=userBlueprintValidation)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AiCatalogApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
