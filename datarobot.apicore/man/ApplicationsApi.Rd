% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/applications_api.R
\docType{class}
\name{ApplicationsApi}
\alias{ApplicationsApi}
\title{Applications operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Applications
}
\examples{

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationTypesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Defaults to 0.
limit <- 0 # integer | The number of records to return. Defaults to 0, meaning all records.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationTypesList(offset, limit)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationTypesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationTypeId <- 'applicationTypeId_example' # character | The application type to retrieve

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationTypesRetrieve(applicationTypeId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationTypesUsecasesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Defaults to 0.
limit <- 100 # integer | The number of records to return. Defaults to 100.
applicationTypeId <- 'applicationTypeId_example' # character | The application type to retrieve

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationTypesUsecasesList(offset, limit, applicationTypeId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationUserRoleRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationUserRoleRetrieve(applicationId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsAccessControlList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
applicationId <- 'applicationId_example' # character | The ID of the application
username <- 'username_example' # character | Optional, only return the access control information for a user with this username.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAccessControlList(offset, limit, applicationId, username=username, userId=userId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsAccessControlPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationAccessControlUpdateRequest <- ApplicationAccessControlUpdateRequest$new() # ApplicationAccessControlUpdateRequest |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAccessControlPatchMany(applicationId, applicationAccessControlUpdateRequest=applicationAccessControlUpdateRequest)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsAuthTokenPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAuthTokenPatchMany(applicationId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsBuildJobsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
body <- NULL # object |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsBuildJobsCreate(applicationId, body=body)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationCreate <- ApplicationCreate$new() # ApplicationCreate |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsCreate(applicationCreate=applicationCreate)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationParam <- ApplicationParam$new() # ApplicationParam |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDelete(applicationId, applicationParam=applicationParam)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDeploymentStatePatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationDeploymentStateUpdate <- ApplicationDeploymentStateUpdate$new() # ApplicationDeploymentStateUpdate |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentStatePatchMany(applicationId, applicationDeploymentStateUpdate=applicationDeploymentStateUpdate)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDeploymentsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
addDeploymentToApplication <- AddDeploymentToApplication$new() # AddDeploymentToApplication |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentsCreate(applicationId, addDeploymentToApplication=addDeploymentToApplication)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDeploymentsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
modelDeploymentId <- 'modelDeploymentId_example' # character | The ID of the model deployment
applicationModelDeploymentParam <- ApplicationModelDeploymentParam$new() # ApplicationModelDeploymentParam |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentsDelete(applicationId, modelDeploymentId, applicationModelDeploymentParam=applicationModelDeploymentParam)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDuplicateCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationDuplicate <- ApplicationDuplicate$new() # ApplicationDuplicate |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDuplicateCreate(applicationId, applicationDuplicate=applicationDuplicate)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsList(offset, limit)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationDeploymentUpdate <- ApplicationDeploymentUpdate$new() # ApplicationDeploymentUpdate |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsPatch(applicationId, applicationDeploymentUpdate=applicationDeploymentUpdate)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsRetrieve(applicationId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
limit <- 56 # integer | The number of records to return in the range of 1 to 100
offset <- 0 # integer | The number of records to skip over. Default 0.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name
id <- 'id_example' # character | Only return roles for a user, group or organization with this id
shareRecipientType <- 'shareRecipientType_example' # character | Specify the recipient type, one of 'user', 'group', 'organization'
applicationSharedRolesList <- ApplicationSharedRolesList$new() # ApplicationSharedRolesList |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsSharedRolesList(applicationId, limit=limit, offset=offset, name=name, id=id, shareRecipientType=shareRecipientType, applicationSharedRolesList=applicationSharedRolesList)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
sendNotification <- FALSE # character | Send a notification
note <- 'note_example' # character | A note to go with the project share
operation <- 'operation_example' # character | Name of the action being taken, only 'updateRoles' is supported
roles <- [ApplicationSharedRolesEntryUpdate$new()] # array[ApplicationSharedRolesEntryUpdate] | Role objects, may contain up to 100 per request
applicationId <- 'applicationId_example' # character | The ID of the application
applicationSharingUpdateOrRemove <- ApplicationSharingUpdateOrRemove$new() # ApplicationSharingUpdateOrRemove |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsSharedRolesPatchMany(sendNotification, note, operation, roles, applicationId, applicationSharingUpdateOrRemove=applicationSharingUpdateOrRemove)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsVersionPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationUpgradeDeploymentVersion <- ApplicationUpgradeDeploymentVersion$new() # ApplicationUpgradeDeploymentVersion |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsVersionPatchMany(applicationId, applicationUpgradeDeploymentVersion=applicationUpgradeDeploymentVersion)
}

## ------------------------------------------------
## Method `ApplicationsApi$DemoApplicationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
demoApplication <- DemoApplication$new() # DemoApplication |

api.instance <- ApplicationsApi$new()
result <- api.instance$DemoApplicationsCreate(demoApplication=demoApplication)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ApplicationsApi$new()}}
\item \href{#method-ApplicationTypesList}{\code{ApplicationsApi$ApplicationTypesList()}}
\item \href{#method-ApplicationTypesRetrieve}{\code{ApplicationsApi$ApplicationTypesRetrieve()}}
\item \href{#method-ApplicationTypesUsecasesList}{\code{ApplicationsApi$ApplicationTypesUsecasesList()}}
\item \href{#method-ApplicationUserRoleRetrieve}{\code{ApplicationsApi$ApplicationUserRoleRetrieve()}}
\item \href{#method-ApplicationsAccessControlList}{\code{ApplicationsApi$ApplicationsAccessControlList()}}
\item \href{#method-ApplicationsAccessControlPatchMany}{\code{ApplicationsApi$ApplicationsAccessControlPatchMany()}}
\item \href{#method-ApplicationsAuthTokenPatchMany}{\code{ApplicationsApi$ApplicationsAuthTokenPatchMany()}}
\item \href{#method-ApplicationsBuildJobsCreate}{\code{ApplicationsApi$ApplicationsBuildJobsCreate()}}
\item \href{#method-ApplicationsCreate}{\code{ApplicationsApi$ApplicationsCreate()}}
\item \href{#method-ApplicationsDelete}{\code{ApplicationsApi$ApplicationsDelete()}}
\item \href{#method-ApplicationsDeploymentStatePatchMany}{\code{ApplicationsApi$ApplicationsDeploymentStatePatchMany()}}
\item \href{#method-ApplicationsDeploymentsCreate}{\code{ApplicationsApi$ApplicationsDeploymentsCreate()}}
\item \href{#method-ApplicationsDeploymentsDelete}{\code{ApplicationsApi$ApplicationsDeploymentsDelete()}}
\item \href{#method-ApplicationsDuplicateCreate}{\code{ApplicationsApi$ApplicationsDuplicateCreate()}}
\item \href{#method-ApplicationsList}{\code{ApplicationsApi$ApplicationsList()}}
\item \href{#method-ApplicationsPatch}{\code{ApplicationsApi$ApplicationsPatch()}}
\item \href{#method-ApplicationsRetrieve}{\code{ApplicationsApi$ApplicationsRetrieve()}}
\item \href{#method-ApplicationsSharedRolesList}{\code{ApplicationsApi$ApplicationsSharedRolesList()}}
\item \href{#method-ApplicationsSharedRolesPatchMany}{\code{ApplicationsApi$ApplicationsSharedRolesPatchMany()}}
\item \href{#method-ApplicationsVersionPatchMany}{\code{ApplicationsApi$ApplicationsVersionPatchMany()}}
\item \href{#method-DemoApplicationsCreate}{\code{ApplicationsApi$DemoApplicationsCreate()}}
\item \href{#method-clone}{\code{ApplicationsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationTypesList"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationTypesList}{}}}
\subsection{Method \code{ApplicationTypesList()}}{
List of available application types to deploy.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationTypesList(offset, limit, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of records to skip over. Defaults to 0.}

\item{\code{limit}}{integer. The number of records to return. Defaults to 0, meaning all records.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of available application types to deploy.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationTypeListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Defaults to 0.
limit <- 0 # integer | The number of records to return. Defaults to 0, meaning all records.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationTypesList(offset, limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationTypesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationTypesRetrieve}{}}}
\subsection{Method \code{ApplicationTypesRetrieve()}}{
Retrieve one application type
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationTypesRetrieve(applicationTypeId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationTypeId}}{character. The application type to retrieve}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve one application type


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} No app type matching the specified identifier found or user does not have permissions to access to this app type
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationTypeRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationTypeId <- 'applicationTypeId_example' # character | The application type to retrieve

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationTypesRetrieve(applicationTypeId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationTypesUsecasesList"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationTypesUsecasesList}{}}}
\subsection{Method \code{ApplicationTypesUsecasesList()}}{
List application type usecases
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationTypesUsecasesList(
  offset,
  limit,
  applicationTypeId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of records to skip over. Defaults to 0.}

\item{\code{limit}}{integer. The number of records to return. Defaults to 100.}

\item{\code{applicationTypeId}}{character. The application type to retrieve}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of available usecases for application type.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationTypeUsecasesListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Defaults to 0.
limit <- 100 # integer | The number of records to return. Defaults to 100.
applicationTypeId <- 'applicationTypeId_example' # character | The application type to retrieve

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationTypesUsecasesList(offset, limit, applicationTypeId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationUserRoleRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationUserRoleRetrieve}{}}}
\subsection{Method \code{ApplicationUserRoleRetrieve()}}{
Get application user role
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationUserRoleRetrieve(applicationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get application user role


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} user's role on application entity, taking into account RBAC, groups and organization.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationUserRoleResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationUserRoleRetrieve(applicationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsAccessControlList"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsAccessControlList}{}}}
\subsection{Method \code{ApplicationsAccessControlList()}}{
A list of users with access to this application
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsAccessControlList(
  offset,
  limit,
  applicationId,
  username = NULL,
  userId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{applicationId}}{character. The ID of the application}

\item{\code{username}}{character. Optional, only return the access control information for a user with this username.}

\item{\code{userId}}{character. Optional, only return the access control information for a user with this user ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
A list of users who have access to this application and their roles


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{400}} Bad Request, both username and userId were specified
\itemize{
}
\item \strong{\code{404}} Entity not found. Either the application does not exist or the user does not have permissions to view the application.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationAccessControlList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
applicationId <- 'applicationId_example' # character | The ID of the application
username <- 'username_example' # character | Optional, only return the access control information for a user with this username.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAccessControlList(offset, limit, applicationId, username=username, userId=userId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsAccessControlPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsAccessControlPatchMany}{}}}
\subsection{Method \code{ApplicationsAccessControlPatchMany()}}{
Update access control for this application.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsAccessControlPatchMany(
  applicationId,
  applicationAccessControlUpdateRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationAccessControlUpdateRequest}}{\link{ApplicationAccessControlUpdateRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update access control for this application. Request is processed only if updates can be performed on all entries.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have appropriate privileges
\itemize{
}
\item \strong{\code{404}} Invalid applicationId provided or invalid username provided to modify access for
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationAccessControlUpdateRequest <- ApplicationAccessControlUpdateRequest$new() # ApplicationAccessControlUpdateRequest |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAccessControlPatchMany(applicationId, applicationAccessControlUpdateRequest=applicationAccessControlUpdateRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsAuthTokenPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsAuthTokenPatchMany}{}}}
\subsection{Method \code{ApplicationsAuthTokenPatchMany()}}{
Redeploys application with refreshed auth token.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsAuthTokenPatchMany(applicationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Redeploys application with refreshed auth token.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{422}} App is not deployed.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAuthTokenPatchMany(applicationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsBuildJobsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsBuildJobsCreate}{}}}
\subsection{Method \code{ApplicationsBuildJobsCreate()}}{
Schedules a build job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsBuildJobsCreate(applicationId, body = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{body}}{object.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Schedules a build job, which is normally automatically scheduled at the end of DataRobot autopilot. This is currently used in tests only, so this route is for internal use only.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{202}} The job has been added to the queue. See the Location header.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
body <- NULL # object |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsBuildJobsCreate(applicationId, body=body)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsCreate}{}}}
\subsection{Method \code{ApplicationsCreate()}}{
Create an application
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsCreate(applicationCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationCreate}}{\link{ApplicationCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create an application. Note that the number of active applications users can have at the same time is limited.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
}
\item \strong{\code{403}} User does not have permission to launch application of provided type.
\itemize{
}
\item \strong{\code{404}} No app type matching the specified identifier found or user does not have permissions to access to this app type.
\itemize{
}
\item \strong{\code{422}} Application could not be created with the given input.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationCreate <- ApplicationCreate$new() # ApplicationCreate |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsCreate(applicationCreate=applicationCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsDelete}{}}}
\subsection{Method \code{ApplicationsDelete()}}{
Delete an application
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDelete(applicationId, applicationParam = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationParam}}{\link{ApplicationParam}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete an application


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The application has been deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationParam <- ApplicationParam$new() # ApplicationParam |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDelete(applicationId, applicationParam=applicationParam)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsDeploymentStatePatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsDeploymentStatePatchMany}{}}}
\subsection{Method \code{ApplicationsDeploymentStatePatchMany()}}{
Update the application's deployment state.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDeploymentStatePatchMany(
  applicationId,
  applicationDeploymentStateUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationDeploymentStateUpdate}}{\link{ApplicationDeploymentStateUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the application's deployment state. Transitioning the app to `deactivated` state will keep the app record in the database, but the app will not be accessible at its URL until changed back to `deployed` state again. When the limit of active apps has been reached, this API can be used to deactivate some applications to make space for new ones.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{422}} Application could not be created with the given input.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationDeploymentStateUpdate <- ApplicationDeploymentStateUpdate$new() # ApplicationDeploymentStateUpdate |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentStatePatchMany(applicationId, applicationDeploymentStateUpdate=applicationDeploymentStateUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsDeploymentsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsDeploymentsCreate}{}}}
\subsection{Method \code{ApplicationsDeploymentsCreate()}}{
Links a deployment to an application
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDeploymentsCreate(
  applicationId,
  addDeploymentToApplication = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{addDeploymentToApplication}}{\link{AddDeploymentToApplication}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If application creates deployment during its lifetime, we want to have an API to link deployment with application.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
addDeploymentToApplication <- AddDeploymentToApplication$new() # AddDeploymentToApplication |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentsCreate(applicationId, addDeploymentToApplication=addDeploymentToApplication)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsDeploymentsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsDeploymentsDelete}{}}}
\subsection{Method \code{ApplicationsDeploymentsDelete()}}{
Delete link between application and deployment.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDeploymentsDelete(
  applicationId,
  modelDeploymentId,
  applicationModelDeploymentParam = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{modelDeploymentId}}{character. The ID of the model deployment}

\item{\code{applicationModelDeploymentParam}}{\link{ApplicationModelDeploymentParam}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete link between application and deployment.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The link has been deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
modelDeploymentId <- 'modelDeploymentId_example' # character | The ID of the model deployment
applicationModelDeploymentParam <- ApplicationModelDeploymentParam$new() # ApplicationModelDeploymentParam |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentsDelete(applicationId, modelDeploymentId, applicationModelDeploymentParam=applicationModelDeploymentParam)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsDuplicateCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsDuplicateCreate}{}}}
\subsection{Method \code{ApplicationsDuplicateCreate()}}{
Create a duplicate of the application
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDuplicateCreate(
  applicationId,
  applicationDuplicate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationDuplicate}}{\link{ApplicationDuplicate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a copy of App Builder application. Note that the number of active applications users can have at the same time is limited.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{202}} Dulication has successfully started. See the Location header.
\itemize{
}
\item \strong{\code{403}} User does not have permission to launch application of provided type.
\itemize{
}
\item \strong{\code{404}} App for duplication was not found
\itemize{
}
\item \strong{\code{422}} Application could not be created with the given input.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationDuplicate <- ApplicationDuplicate$new() # ApplicationDuplicate |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDuplicateCreate(applicationId, applicationDuplicate=applicationDuplicate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsList"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsList}{}}}
\subsection{Method \code{ApplicationsList()}}{
Paginated list of applications created by the currently authenticated user.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsList(offset, limit, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned. If 0, all results.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Paginated list of applications created by the currently authenticated user.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsList(offset, limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsPatch}{}}}
\subsection{Method \code{ApplicationsPatch()}}{
Update an application's name and/or domain prefix
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsPatch(
  applicationId,
  applicationDeploymentUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationDeploymentUpdate}}{\link{ApplicationDeploymentUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update an application's name and/or domain prefix


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The application has been updated.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationDeploymentUpdate <- ApplicationDeploymentUpdate$new() # ApplicationDeploymentUpdate |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsPatch(applicationId, applicationDeploymentUpdate=applicationDeploymentUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsRetrieve}{}}}
\subsection{Method \code{ApplicationsRetrieve()}}{
Retrieve an application
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsRetrieve(applicationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve an application


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsRetrieve(applicationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsSharedRolesList}{}}}
\subsection{Method \code{ApplicationsSharedRolesList()}}{
Get a list of users, groups and organizations that have an access to this application
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsSharedRolesList(
  applicationId,
  limit = NULL,
  offset = 0,
  name = NULL,
  id = NULL,
  shareRecipientType = NULL,
  applicationSharedRolesList = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{limit}}{integer. The number of records to return in the range of 1 to 100}

\item{\code{offset}}{integer. The number of records to skip over. Default 0.}

\item{\code{name}}{character. Only return roles for a user, group or organization with this name}

\item{\code{id}}{character. Only return roles for a user, group or organization with this id}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > Specify the recipient type, one of 'user', 'group', 'organization'}

\item{\code{applicationSharedRolesList}}{\link{ApplicationSharedRolesList}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations that have an access to this application


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
limit <- 56 # integer | The number of records to return in the range of 1 to 100
offset <- 0 # integer | The number of records to skip over. Default 0.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name
id <- 'id_example' # character | Only return roles for a user, group or organization with this id
shareRecipientType <- 'shareRecipientType_example' # character | Specify the recipient type, one of 'user', 'group', 'organization'
applicationSharedRolesList <- ApplicationSharedRolesList$new() # ApplicationSharedRolesList |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsSharedRolesList(applicationId, limit=limit, offset=offset, name=name, id=id, shareRecipientType=shareRecipientType, applicationSharedRolesList=applicationSharedRolesList)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsSharedRolesPatchMany}{}}}
\subsection{Method \code{ApplicationsSharedRolesPatchMany()}}{
Share an application with a user, group, or organization
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsSharedRolesPatchMany(
  sendNotification,
  note,
  operation,
  roles,
  applicationId,
  applicationSharingUpdateOrRemove = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sendNotification}}{character. Send a notification}

\item{\code{note}}{character. A note to go with the project share}

\item{\code{operation}}{character. Name of the action being taken, only 'updateRoles' is supported}

\item{\code{roles}}{list( \link{ApplicationSharedRolesEntryUpdate} )}

\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationSharingUpdateOrRemove}}{\link{ApplicationSharingUpdateOrRemove}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Share an application with a user, group, or organization


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The roles updated successfully
\itemize{
}
\item \strong{\code{422}} The request was formatted improperly.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
sendNotification <- FALSE # character | Send a notification
note <- 'note_example' # character | A note to go with the project share
operation <- 'operation_example' # character | Name of the action being taken, only 'updateRoles' is supported
roles <- [ApplicationSharedRolesEntryUpdate$new()] # array[ApplicationSharedRolesEntryUpdate] | Role objects, may contain up to 100 per request
applicationId <- 'applicationId_example' # character | The ID of the application
applicationSharingUpdateOrRemove <- ApplicationSharingUpdateOrRemove$new() # ApplicationSharingUpdateOrRemove |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsSharedRolesPatchMany(sendNotification, note, operation, roles, applicationId, applicationSharingUpdateOrRemove=applicationSharingUpdateOrRemove)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsVersionPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsVersionPatchMany}{}}}
\subsection{Method \code{ApplicationsVersionPatchMany()}}{
Redeploys application with specified version.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsVersionPatchMany(
  applicationId,
  applicationUpgradeDeploymentVersion = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationUpgradeDeploymentVersion}}{\link{ApplicationUpgradeDeploymentVersion}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Redeploys application with specified version. If version is omitted latest available version is used.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationUpgradeDeploymentVersion <- ApplicationUpgradeDeploymentVersion$new() # ApplicationUpgradeDeploymentVersion |

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsVersionPatchMany(applicationId, applicationUpgradeDeploymentVersion=applicationUpgradeDeploymentVersion)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DemoApplicationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-DemoApplicationsCreate}{}}}
\subsection{Method \code{DemoApplicationsCreate()}}{
Create a demo application
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$DemoApplicationsCreate(demoApplication = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{demoApplication}}{\link{DemoApplication}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a demo application. The number of active applications users can have at the same time is limited.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
}
\item \strong{\code{404}} No app type matching the specified identifier found or user does not have permissions to access to this app type.
\itemize{
}
\item \strong{\code{422}} Application could not be created with the given input.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
demoApplication <- DemoApplication$new() # DemoApplication |

api.instance <- ApplicationsApi$new()
result <- api.instance$DemoApplicationsCreate(demoApplication=demoApplication)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
