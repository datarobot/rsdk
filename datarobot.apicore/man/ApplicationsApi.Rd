% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/applications_api.R
\docType{class}
\name{ApplicationsApi}
\alias{ApplicationsApi}
\title{Applications operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Applications
}
\examples{

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationUserRoleRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationUserRoleRetrieve(applicationId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsAccessControlList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
applicationId <- 'applicationId_example' # character | The ID of the application
username <- 'username_example' # character | Optional, only return the access control information for a user with this username.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAccessControlList(offset, limit, applicationId, username=username, userId=userId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsAccessControlPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationAccessControlUpdateRequest <- ApplicationAccessControlUpdateRequest$new() # ApplicationAccessControlUpdateRequest | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAccessControlPatchMany(applicationId, applicationAccessControlUpdateRequest=applicationAccessControlUpdateRequest)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationCreate <- ApplicationCreate$new() # ApplicationCreate | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsCreate(applicationCreate=applicationCreate)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationParam <- ApplicationParam$new() # ApplicationParam | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDelete(applicationId, applicationParam=applicationParam)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDeploymentsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
addDeploymentToApplication <- AddDeploymentToApplication$new() # AddDeploymentToApplication | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentsCreate(applicationId, addDeploymentToApplication=addDeploymentToApplication)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDeploymentsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
modelDeploymentId <- 'modelDeploymentId_example' # character | The ID of the model deployment
applicationModelDeploymentParam <- ApplicationModelDeploymentParam$new() # ApplicationModelDeploymentParam | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentsDelete(applicationId, modelDeploymentId, applicationModelDeploymentParam=applicationModelDeploymentParam)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsDuplicateCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationDuplicate <- ApplicationDuplicate$new() # ApplicationDuplicate | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDuplicateCreate(applicationId, applicationDuplicate=applicationDuplicate)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsList(offset, limit)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationNameAndDescription <- ApplicationNameAndDescription$new() # ApplicationNameAndDescription | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsPatch(applicationId, applicationNameAndDescription=applicationNameAndDescription)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsRetrieve(applicationId)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
limit <- 56 # integer | The number of records to return in the range of 1 to 100
offset <- 0 # integer | The number of records to skip over. Default 0.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name
id <- 'id_example' # character | Only return roles for a user, group or organization with this id
shareRecipientType <- 'shareRecipientType_example' # character | Specify the recipient type, one of 'user', 'group', 'organization'
applicationSharedRolesList <- ApplicationSharedRolesList$new() # ApplicationSharedRolesList | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsSharedRolesList(applicationId, limit=limit, offset=offset, name=name, id=id, shareRecipientType=shareRecipientType, applicationSharedRolesList=applicationSharedRolesList)
}

## ------------------------------------------------
## Method `ApplicationsApi$ApplicationsSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
sendNotification <- FALSE # character | Send a notification
note <- 'note_example' # character | A note to go with the project share
operation <- 'operation_example' # character | Name of the action being taken, only 'updateRoles' is supported
roles <- [ApplicationSharedRolesEntryUpdate$new()] # array[ApplicationSharedRolesEntryUpdate] | Role objects, may contain up to 100 per request
applicationId <- 'applicationId_example' # character | The ID of the application
applicationSharingUpdateOrRemove <- ApplicationSharingUpdateOrRemove$new() # ApplicationSharingUpdateOrRemove | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsSharedRolesPatchMany(sendNotification, note, operation, roles, applicationId, applicationSharingUpdateOrRemove=applicationSharingUpdateOrRemove)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ApplicationsApi-new}{\code{ApplicationsApi$new()}}
\item \href{#method-ApplicationsApi-ApplicationUserRoleRetrieve}{\code{ApplicationsApi$ApplicationUserRoleRetrieve()}}
\item \href{#method-ApplicationsApi-ApplicationsAccessControlList}{\code{ApplicationsApi$ApplicationsAccessControlList()}}
\item \href{#method-ApplicationsApi-ApplicationsAccessControlPatchMany}{\code{ApplicationsApi$ApplicationsAccessControlPatchMany()}}
\item \href{#method-ApplicationsApi-ApplicationsCreate}{\code{ApplicationsApi$ApplicationsCreate()}}
\item \href{#method-ApplicationsApi-ApplicationsDelete}{\code{ApplicationsApi$ApplicationsDelete()}}
\item \href{#method-ApplicationsApi-ApplicationsDeploymentsCreate}{\code{ApplicationsApi$ApplicationsDeploymentsCreate()}}
\item \href{#method-ApplicationsApi-ApplicationsDeploymentsDelete}{\code{ApplicationsApi$ApplicationsDeploymentsDelete()}}
\item \href{#method-ApplicationsApi-ApplicationsDuplicateCreate}{\code{ApplicationsApi$ApplicationsDuplicateCreate()}}
\item \href{#method-ApplicationsApi-ApplicationsList}{\code{ApplicationsApi$ApplicationsList()}}
\item \href{#method-ApplicationsApi-ApplicationsPatch}{\code{ApplicationsApi$ApplicationsPatch()}}
\item \href{#method-ApplicationsApi-ApplicationsRetrieve}{\code{ApplicationsApi$ApplicationsRetrieve()}}
\item \href{#method-ApplicationsApi-ApplicationsSharedRolesList}{\code{ApplicationsApi$ApplicationsSharedRolesList()}}
\item \href{#method-ApplicationsApi-ApplicationsSharedRolesPatchMany}{\code{ApplicationsApi$ApplicationsSharedRolesPatchMany()}}
\item \href{#method-ApplicationsApi-clone}{\code{ApplicationsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationUserRoleRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationUserRoleRetrieve}{}}}
\subsection{Method \code{ApplicationUserRoleRetrieve()}}{
Get application user role
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationUserRoleRetrieve(applicationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get application user role


This method invokes \verb{GET /applications/\{applicationId\}/userRole/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} user's role on application entity, taking into account RBAC, groups and organization.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationUserRoleResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationUserRoleRetrieve(applicationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsAccessControlList"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsAccessControlList}{}}}
\subsection{Method \code{ApplicationsAccessControlList()}}{
A list of users with access to this application
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsAccessControlList(
  offset,
  limit,
  applicationId,
  username = NULL,
  userId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{applicationId}}{character. The ID of the application}

\item{\code{username}}{character. Optional, only return the access control information for a user with this username.}

\item{\code{userId}}{character. Optional, only return the access control information for a user with this user ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
A list of users who have access to this application and their roles


This method invokes \verb{GET /applications/\{applicationId\}/accessControl/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{400}} Bad Request, both username and userId were specified
\itemize{
}
\item \strong{\code{404}} Entity not found. Either the application does not exist or the user does not have permissions to view the application.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationAccessControlList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
applicationId <- 'applicationId_example' # character | The ID of the application
username <- 'username_example' # character | Optional, only return the access control information for a user with this username.
userId <- 'userId_example' # character | Optional, only return the access control information for a user with this user ID.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAccessControlList(offset, limit, applicationId, username=username, userId=userId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsAccessControlPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsAccessControlPatchMany}{}}}
\subsection{Method \code{ApplicationsAccessControlPatchMany()}}{
Update access control for this application.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsAccessControlPatchMany(
  applicationId,
  applicationAccessControlUpdateRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationAccessControlUpdateRequest}}{\link{ApplicationAccessControlUpdateRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update access control for this application. Request is processed only if updates can be performed on all entries.


This method invokes \verb{PATCH /applications/\{applicationId\}/accessControl/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{403}} User does not have appropriate privileges
\itemize{
}
\item \strong{\code{404}} Invalid applicationId provided or invalid username provided to modify access for
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationAccessControlUpdateRequest <- ApplicationAccessControlUpdateRequest$new() # ApplicationAccessControlUpdateRequest | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsAccessControlPatchMany(applicationId, applicationAccessControlUpdateRequest=applicationAccessControlUpdateRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsCreate}{}}}
\subsection{Method \code{ApplicationsCreate()}}{
Create an application
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsCreate(applicationCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationCreate}}{\link{ApplicationCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create an application. Note that the number of active applications users can have at the same time is limited.


This method invokes \verb{POST /applications/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
}
\item \strong{\code{403}} User does not have permission to launch application of provided type.
\itemize{
}
\item \strong{\code{404}} No app type matching the specified identifier found or user does not have permissions to access to this app type.
\itemize{
}
\item \strong{\code{422}} Application could not be created with the given input.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationCreate <- ApplicationCreate$new() # ApplicationCreate | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsCreate(applicationCreate=applicationCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsDelete}{}}}
\subsection{Method \code{ApplicationsDelete()}}{
Delete an application
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDelete(applicationId, applicationParam = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationParam}}{\link{ApplicationParam}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete an application


This method invokes \verb{DELETE /applications/\{applicationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The application has been deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationParam <- ApplicationParam$new() # ApplicationParam | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDelete(applicationId, applicationParam=applicationParam)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsDeploymentsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsDeploymentsCreate}{}}}
\subsection{Method \code{ApplicationsDeploymentsCreate()}}{
Links a deployment to an application
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDeploymentsCreate(
  applicationId,
  addDeploymentToApplication = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{addDeploymentToApplication}}{\link{AddDeploymentToApplication}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If application creates deployment during its lifetime, we want to have an API to link deployment with application.


This method invokes \verb{POST /applications/\{applicationId\}/deployments/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
addDeploymentToApplication <- AddDeploymentToApplication$new() # AddDeploymentToApplication | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentsCreate(applicationId, addDeploymentToApplication=addDeploymentToApplication)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsDeploymentsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsDeploymentsDelete}{}}}
\subsection{Method \code{ApplicationsDeploymentsDelete()}}{
Delete link between application and deployment.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDeploymentsDelete(
  applicationId,
  modelDeploymentId,
  applicationModelDeploymentParam = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{modelDeploymentId}}{character. The ID of the model deployment}

\item{\code{applicationModelDeploymentParam}}{\link{ApplicationModelDeploymentParam}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete link between application and deployment.


This method invokes \verb{DELETE /applications/\{applicationId\}/deployments/\{modelDeploymentId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The link has been deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
modelDeploymentId <- 'modelDeploymentId_example' # character | The ID of the model deployment
applicationModelDeploymentParam <- ApplicationModelDeploymentParam$new() # ApplicationModelDeploymentParam | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDeploymentsDelete(applicationId, modelDeploymentId, applicationModelDeploymentParam=applicationModelDeploymentParam)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsDuplicateCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsDuplicateCreate}{}}}
\subsection{Method \code{ApplicationsDuplicateCreate()}}{
Create a duplicate of the application
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsDuplicateCreate(
  applicationId,
  applicationDuplicate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationDuplicate}}{\link{ApplicationDuplicate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a copy of App Builder application. Note that the number of active applications users can have at the same time is limited.


This method invokes \verb{POST /applications/\{applicationId\}/duplicate/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{202}} Dulication has successfully started. See the Location header.
\itemize{
}
\item \strong{\code{403}} User does not have permission to launch application of provided type.
\itemize{
}
\item \strong{\code{404}} App for duplication was not found
\itemize{
}
\item \strong{\code{422}} Application could not be created with the given input.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationDuplicate <- ApplicationDuplicate$new() # ApplicationDuplicate | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsDuplicateCreate(applicationId, applicationDuplicate=applicationDuplicate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsList"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsList}{}}}
\subsection{Method \code{ApplicationsList()}}{
Paginated list of applications created by the currently authenticated user.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsList(offset, limit, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned. If 0, all results.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Paginated list of applications created by the currently authenticated user.


This method invokes \verb{GET /applications/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsList(offset, limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsPatch}{}}}
\subsection{Method \code{ApplicationsPatch()}}{
Update an application's name and/or description
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsPatch(
  applicationId,
  applicationNameAndDescription = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationNameAndDescription}}{\link{ApplicationNameAndDescription}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update an application's name and/or description


This method invokes \verb{PATCH /applications/\{applicationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The application has been updated.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
applicationNameAndDescription <- ApplicationNameAndDescription$new() # ApplicationNameAndDescription | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsPatch(applicationId, applicationNameAndDescription=applicationNameAndDescription)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsRetrieve}{}}}
\subsection{Method \code{ApplicationsRetrieve()}}{
Retrieve an application
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsRetrieve(applicationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve an application


This method invokes \verb{GET /applications/\{applicationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ApplicationRetrieve}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsRetrieve(applicationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsSharedRolesList}{}}}
\subsection{Method \code{ApplicationsSharedRolesList()}}{
Get a list of users, groups and organizations that have an access to this application
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsSharedRolesList(
  applicationId,
  limit = NULL,
  offset = 0,
  name = NULL,
  id = NULL,
  shareRecipientType = NULL,
  applicationSharedRolesList = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{applicationId}}{character. The ID of the application}

\item{\code{limit}}{integer. The number of records to return in the range of 1 to 100}

\item{\code{offset}}{integer. The number of records to skip over. Default 0.}

\item{\code{name}}{character. Only return roles for a user, group or organization with this name}

\item{\code{id}}{character. Only return roles for a user, group or organization with this id}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > Specify the recipient type, one of 'user', 'group', 'organization'}

\item{\code{applicationSharedRolesList}}{\link{ApplicationSharedRolesList}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations that have an access to this application


This method invokes \verb{GET /applications/\{applicationId\}/sharedRoles/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
applicationId <- 'applicationId_example' # character | The ID of the application
limit <- 56 # integer | The number of records to return in the range of 1 to 100
offset <- 0 # integer | The number of records to skip over. Default 0.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name
id <- 'id_example' # character | Only return roles for a user, group or organization with this id
shareRecipientType <- 'shareRecipientType_example' # character | Specify the recipient type, one of 'user', 'group', 'organization'
applicationSharedRolesList <- ApplicationSharedRolesList$new() # ApplicationSharedRolesList | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsSharedRolesList(applicationId, limit=limit, offset=offset, name=name, id=id, shareRecipientType=shareRecipientType, applicationSharedRolesList=applicationSharedRolesList)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-ApplicationsSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-ApplicationsSharedRolesPatchMany}{}}}
\subsection{Method \code{ApplicationsSharedRolesPatchMany()}}{
Share an application with a user, group, or organization
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$ApplicationsSharedRolesPatchMany(
  sendNotification,
  note,
  operation,
  roles,
  applicationId,
  applicationSharingUpdateOrRemove = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sendNotification}}{character. Send a notification}

\item{\code{note}}{character. A note to go with the project share}

\item{\code{operation}}{character. Name of the action being taken, only 'updateRoles' is supported}

\item{\code{roles}}{list( \link{ApplicationSharedRolesEntryUpdate} )}

\item{\code{applicationId}}{character. The ID of the application}

\item{\code{applicationSharingUpdateOrRemove}}{\link{ApplicationSharingUpdateOrRemove}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Share an application with a user, group, or organization


This method invokes \verb{PATCH /applications/\{applicationId\}/sharedRoles/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{204}} The roles updated successfully
\itemize{
}
\item \strong{\code{422}} The request was formatted improperly.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
sendNotification <- FALSE # character | Send a notification
note <- 'note_example' # character | A note to go with the project share
operation <- 'operation_example' # character | Name of the action being taken, only 'updateRoles' is supported
roles <- [ApplicationSharedRolesEntryUpdate$new()] # array[ApplicationSharedRolesEntryUpdate] | Role objects, may contain up to 100 per request
applicationId <- 'applicationId_example' # character | The ID of the application
applicationSharingUpdateOrRemove <- ApplicationSharingUpdateOrRemove$new() # ApplicationSharingUpdateOrRemove | 

api.instance <- ApplicationsApi$new()
result <- api.instance$ApplicationsSharedRolesPatchMany(sendNotification, note, operation, roles, applicationId, applicationSharingUpdateOrRemove=applicationSharingUpdateOrRemove)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApplicationsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ApplicationsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApplicationsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
