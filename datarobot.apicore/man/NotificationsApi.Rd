% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/notifications_api.R
\docType{class}
\name{NotificationsApi}
\alias{NotificationsApi}
\title{Notifications operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Notifications
}
\examples{

## ------------------------------------------------
## Method `NotificationsApi$NotificationChannelsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
notificationChannelCreate <- NotificationChannelCreate$new() # NotificationChannelCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsCreate(notificationChannelCreate=notificationChannelCreate)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationChannelsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
channelId <- 'channelId_example' # character | The id of the notification channel.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsDelete(channelId)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationChannelsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | How many notification channels to skip.
limit <- 100 # integer | At most this many notification channels to return.
namePart <- 'namePart_example' # character | Only return the notification channels whose names contain the given substring.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsList(offset, limit, namePart=namePart)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationChannelsPut`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
channelId <- 'channelId_example' # character | The id of the notification channel.
notificationChannelUpdate <- NotificationChannelUpdate$new() # NotificationChannelUpdate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsPut(channelId, notificationChannelUpdate=notificationChannelUpdate)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationChannelsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
channelId <- 'channelId_example' # character | The id of the notification channel.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsRetrieve(channelId)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationEmailChannelVerificationCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
notificationEmailChannelVerification <- NotificationEmailChannelVerification$new() # NotificationEmailChannelVerification | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationEmailChannelVerificationCreate(notificationEmailChannelVerification=notificationEmailChannelVerification)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationEmailChannelVerificationStatusCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
notificationEmailChannelVerificationStatus <- NotificationEmailChannelVerificationStatus$new() # NotificationEmailChannelVerificationStatus | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationEmailChannelVerificationStatusCreate(notificationEmailChannelVerificationStatus=notificationEmailChannelVerificationStatus)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationEventsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationEventsList()
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationLogsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Default 0
limit <- 100 # integer | The number of records to return. Default to 100, minimum to 1, maximum to 1000
policyId <- 'policyId_example' # character | The id of the policy to filter notification logs
channelId <- 'channelId_example' # character | The id of the channel to filter notification logs

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationLogsList(offset, limit, policyId=policyId, channelId=channelId)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationPoliciesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
notificationPolicyCreate <- NotificationPolicyCreate$new() # NotificationPolicyCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesCreate(notificationPolicyCreate=notificationPolicyCreate)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationPoliciesDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
policyId <- 'policyId_example' # character | The id of the notification policy

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesDelete(policyId)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationPoliciesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | How many notification channels to skip.
limit <- 100 # integer | At most this many notification channels to return.
channelId <- 'channelId_example' # character | Return policies with this channel.
namePart <- 'namePart_example' # character | Only return the notification channels whose names contain the given substring.
eventGroup <- 'eventGroup_example' # character | Return policies with this event group.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesList(offset, limit, channelId=channelId, namePart=namePart, eventGroup=eventGroup)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationPoliciesPut`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
policyId <- 'policyId_example' # character | The id of the notification policy
notificationPolicyUpdate <- NotificationPolicyUpdate$new() # NotificationPolicyUpdate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesPut(policyId, notificationPolicyUpdate=notificationPolicyUpdate)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationPoliciesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
policyId <- 'policyId_example' # character | The id of the notification policy

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesRetrieve(policyId)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationPolicyMutesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
notificationPolicyMuteCreate <- NotificationPolicyMuteCreate$new() # NotificationPolicyMuteCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPolicyMutesCreate(notificationPolicyMuteCreate=notificationPolicyMuteCreate)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationPolicyMutesDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
muteId <- 'muteId_example' # character | The id of the notification policy mute to delete

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPolicyMutesDelete(muteId)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationPolicyMutesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Default 0
limit <- 100 # integer | The number of records to return. Default to 100, minimum to 1, maximum to 1000
entityId <- 'entityId_example' # character | The id of the entity to filter
orgId <- 'orgId_example' # character | The id of the organization that ignored notifications relate to

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPolicyMutesList(offset, limit, entityId=entityId, orgId=orgId)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationWebhookChannelTestsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
notificationWebhookChannelTestCreate <- NotificationWebhookChannelTestCreate$new() # NotificationWebhookChannelTestCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationWebhookChannelTestsCreate(notificationWebhookChannelTestCreate=notificationWebhookChannelTestCreate)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationWebhookChannelTestsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
notificationId <- 'notificationId_example' # character | The identifier of the notification.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationWebhookChannelTestsRetrieve(notificationId)
}

## ------------------------------------------------
## Method `NotificationsApi$NotificationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
notificationResend <- NotificationResend$new() # NotificationResend | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationsCreate(notificationResend=notificationResend)
}

## ------------------------------------------------
## Method `NotificationsApi$RemoteEventsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
remoteEventCreate <- RemoteEventCreate$new() # RemoteEventCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$RemoteEventsCreate(remoteEventCreate=remoteEventCreate)
}

## ------------------------------------------------
## Method `NotificationsApi$UserNotificationsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userNotificationId <- 'userNotificationId_example' # character | Unique identifier of the notification.

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsDelete(userNotificationId)
}

## ------------------------------------------------
## Method `NotificationsApi$UserNotificationsDeleteMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsDeleteMany()
}

## ------------------------------------------------
## Method `NotificationsApi$UserNotificationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over
limit <- 100 # integer | The number of records to return
isRead <- 'isRead_example' # character | When provided, returns only read or unread notifications

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsList(offset=offset, limit=limit, isRead=isRead)
}

## ------------------------------------------------
## Method `NotificationsApi$UserNotificationsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userNotificationId <- 'userNotificationId_example' # character | Unique identifier of the notification.

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsPatch(userNotificationId)
}

## ------------------------------------------------
## Method `NotificationsApi$UserNotificationsPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsPatchMany()
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-NotificationsApi-new}{\code{NotificationsApi$new()}}
\item \href{#method-NotificationsApi-NotificationChannelsCreate}{\code{NotificationsApi$NotificationChannelsCreate()}}
\item \href{#method-NotificationsApi-NotificationChannelsDelete}{\code{NotificationsApi$NotificationChannelsDelete()}}
\item \href{#method-NotificationsApi-NotificationChannelsList}{\code{NotificationsApi$NotificationChannelsList()}}
\item \href{#method-NotificationsApi-NotificationChannelsPut}{\code{NotificationsApi$NotificationChannelsPut()}}
\item \href{#method-NotificationsApi-NotificationChannelsRetrieve}{\code{NotificationsApi$NotificationChannelsRetrieve()}}
\item \href{#method-NotificationsApi-NotificationEmailChannelVerificationCreate}{\code{NotificationsApi$NotificationEmailChannelVerificationCreate()}}
\item \href{#method-NotificationsApi-NotificationEmailChannelVerificationStatusCreate}{\code{NotificationsApi$NotificationEmailChannelVerificationStatusCreate()}}
\item \href{#method-NotificationsApi-NotificationEventsList}{\code{NotificationsApi$NotificationEventsList()}}
\item \href{#method-NotificationsApi-NotificationLogsList}{\code{NotificationsApi$NotificationLogsList()}}
\item \href{#method-NotificationsApi-NotificationPoliciesCreate}{\code{NotificationsApi$NotificationPoliciesCreate()}}
\item \href{#method-NotificationsApi-NotificationPoliciesDelete}{\code{NotificationsApi$NotificationPoliciesDelete()}}
\item \href{#method-NotificationsApi-NotificationPoliciesList}{\code{NotificationsApi$NotificationPoliciesList()}}
\item \href{#method-NotificationsApi-NotificationPoliciesPut}{\code{NotificationsApi$NotificationPoliciesPut()}}
\item \href{#method-NotificationsApi-NotificationPoliciesRetrieve}{\code{NotificationsApi$NotificationPoliciesRetrieve()}}
\item \href{#method-NotificationsApi-NotificationPolicyMutesCreate}{\code{NotificationsApi$NotificationPolicyMutesCreate()}}
\item \href{#method-NotificationsApi-NotificationPolicyMutesDelete}{\code{NotificationsApi$NotificationPolicyMutesDelete()}}
\item \href{#method-NotificationsApi-NotificationPolicyMutesList}{\code{NotificationsApi$NotificationPolicyMutesList()}}
\item \href{#method-NotificationsApi-NotificationWebhookChannelTestsCreate}{\code{NotificationsApi$NotificationWebhookChannelTestsCreate()}}
\item \href{#method-NotificationsApi-NotificationWebhookChannelTestsRetrieve}{\code{NotificationsApi$NotificationWebhookChannelTestsRetrieve()}}
\item \href{#method-NotificationsApi-NotificationsCreate}{\code{NotificationsApi$NotificationsCreate()}}
\item \href{#method-NotificationsApi-RemoteEventsCreate}{\code{NotificationsApi$RemoteEventsCreate()}}
\item \href{#method-NotificationsApi-UserNotificationsDelete}{\code{NotificationsApi$UserNotificationsDelete()}}
\item \href{#method-NotificationsApi-UserNotificationsDeleteMany}{\code{NotificationsApi$UserNotificationsDeleteMany()}}
\item \href{#method-NotificationsApi-UserNotificationsList}{\code{NotificationsApi$UserNotificationsList()}}
\item \href{#method-NotificationsApi-UserNotificationsPatch}{\code{NotificationsApi$UserNotificationsPatch()}}
\item \href{#method-NotificationsApi-UserNotificationsPatchMany}{\code{NotificationsApi$UserNotificationsPatchMany()}}
\item \href{#method-NotificationsApi-clone}{\code{NotificationsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationChannelsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationChannelsCreate}{}}}
\subsection{Method \code{NotificationChannelsCreate()}}{
Create notification channel
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationChannelsCreate(
  notificationChannelCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notificationChannelCreate}}{\link{NotificationChannelCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new notification channel.


This method invokes \verb{POST /notificationChannels/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Notification channel created successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationChannelResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
notificationChannelCreate <- NotificationChannelCreate$new() # NotificationChannelCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsCreate(notificationChannelCreate=notificationChannelCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationChannelsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationChannelsDelete}{}}}
\subsection{Method \code{NotificationChannelsDelete()}}{
Delete notification channel
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationChannelsDelete(channelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{channelId}}{character. The id of the notification channel.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the notification channel.


This method invokes \verb{DELETE /notificationChannels/\{channelId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Notification channel deleted successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
channelId <- 'channelId_example' # character | The id of the notification channel.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsDelete(channelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationChannelsList"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationChannelsList}{}}}
\subsection{Method \code{NotificationChannelsList()}}{
List notification channels
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationChannelsList(offset, limit, namePart = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. How many notification channels to skip.}

\item{\code{limit}}{integer. At most this many notification channels to return.}

\item{\code{namePart}}{character. Only return the notification channels whose names contain the given substring.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the notification channels according to the query.


This method invokes \verb{GET /notificationChannels/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Notification channels listed successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationChannelsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | How many notification channels to skip.
limit <- 100 # integer | At most this many notification channels to return.
namePart <- 'namePart_example' # character | Only return the notification channels whose names contain the given substring.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsList(offset, limit, namePart=namePart)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationChannelsPut"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationChannelsPut}{}}}
\subsection{Method \code{NotificationChannelsPut()}}{
Update notification channel
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationChannelsPut(
  channelId,
  notificationChannelUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{channelId}}{character. The id of the notification channel.}

\item{\code{notificationChannelUpdate}}{\link{NotificationChannelUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the notification channel.


This method invokes \verb{PUT /notificationChannels/\{channelId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Notification channel updated successfully.
\itemize{
}
\item \strong{\code{400}} Email verification code is invalid.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
channelId <- 'channelId_example' # character | The id of the notification channel.
notificationChannelUpdate <- NotificationChannelUpdate$new() # NotificationChannelUpdate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsPut(channelId, notificationChannelUpdate=notificationChannelUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationChannelsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationChannelsRetrieve}{}}}
\subsection{Method \code{NotificationChannelsRetrieve()}}{
Retrieve notification channel
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationChannelsRetrieve(channelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{channelId}}{character. The id of the notification channel.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the notification channel.


This method invokes \verb{GET /notificationChannels/\{channelId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Notification channel retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationChannelResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
channelId <- 'channelId_example' # character | The id of the notification channel.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationChannelsRetrieve(channelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationEmailChannelVerificationCreate"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationEmailChannelVerificationCreate}{}}}
\subsection{Method \code{NotificationEmailChannelVerificationCreate()}}{
Sending a 6 digit verification code to user's email
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationEmailChannelVerificationCreate(
  notificationEmailChannelVerification = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notificationEmailChannelVerification}}{\link{NotificationEmailChannelVerification}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Sending a 6 digit verification code to user's email


This method invokes \verb{POST /notificationEmailChannelVerification/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationEmailChannelVerificationResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
notificationEmailChannelVerification <- NotificationEmailChannelVerification$new() # NotificationEmailChannelVerification | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationEmailChannelVerificationCreate(notificationEmailChannelVerification=notificationEmailChannelVerification)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationEmailChannelVerificationStatusCreate"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationEmailChannelVerificationStatusCreate}{}}}
\subsection{Method \code{NotificationEmailChannelVerificationStatusCreate()}}{
Retrieve the status of whether admin enter code correctly
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationEmailChannelVerificationStatusCreate(
  notificationEmailChannelVerificationStatus = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notificationEmailChannelVerificationStatus}}{\link{NotificationEmailChannelVerificationStatus}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the status of whether admin enter code correctly


This method invokes \verb{POST /notificationEmailChannelVerificationStatus/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationEmailChannelVerificationStatusResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
notificationEmailChannelVerificationStatus <- NotificationEmailChannelVerificationStatus$new() # NotificationEmailChannelVerificationStatus | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationEmailChannelVerificationStatusCreate(notificationEmailChannelVerificationStatus=notificationEmailChannelVerificationStatus)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationEventsList"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationEventsList}{}}}
\subsection{Method \code{NotificationEventsList()}}{
List event types and groups the user can include in notification policies.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationEventsList(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List event types and groups the user can include in notification policies. Events and groups are filtered by user permissions and event properties. It is not a complete list of all defined events; instead, it is a list of the events available to the user.


This method invokes \verb{GET /notificationEvents/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Event types and groups selectable for notification policies
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationEventListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationEventsList()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationLogsList"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationLogsList}{}}}
\subsection{Method \code{NotificationLogsList()}}{
List the notification logs
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationLogsList(
  offset,
  limit,
  policyId = NULL,
  channelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of records to skip over. Default 0}

\item{\code{limit}}{integer. The number of records to return. Default to 100, minimum to 1, maximum to 1000}

\item{\code{policyId}}{character. The id of the policy to filter notification logs}

\item{\code{channelId}}{character. The id of the channel to filter notification logs}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the notification logs that correspond to provided conditions. Default ordering is desc by notification log timestamp


This method invokes \verb{GET /notificationLogs/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationLogListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Default 0
limit <- 100 # integer | The number of records to return. Default to 100, minimum to 1, maximum to 1000
policyId <- 'policyId_example' # character | The id of the policy to filter notification logs
channelId <- 'channelId_example' # character | The id of the channel to filter notification logs

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationLogsList(offset, limit, policyId=policyId, channelId=channelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationPoliciesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationPoliciesCreate}{}}}
\subsection{Method \code{NotificationPoliciesCreate()}}{
Create notification policy
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationPoliciesCreate(
  notificationPolicyCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notificationPolicyCreate}}{\link{NotificationPolicyCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new notification policy.


This method invokes \verb{POST /notificationPolicies/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Notification policy created successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationPolicyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
notificationPolicyCreate <- NotificationPolicyCreate$new() # NotificationPolicyCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesCreate(notificationPolicyCreate=notificationPolicyCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationPoliciesDelete"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationPoliciesDelete}{}}}
\subsection{Method \code{NotificationPoliciesDelete()}}{
Delete notification policy
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationPoliciesDelete(policyId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{policyId}}{character. The id of the notification policy}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the notification policy.


This method invokes \verb{DELETE /notificationPolicies/\{policyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Notification policy deleted successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
policyId <- 'policyId_example' # character | The id of the notification policy

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesDelete(policyId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationPoliciesList"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationPoliciesList}{}}}
\subsection{Method \code{NotificationPoliciesList()}}{
List notification policies
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationPoliciesList(
  offset,
  limit,
  channelId = NULL,
  namePart = NULL,
  eventGroup = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. How many notification channels to skip.}

\item{\code{limit}}{integer. At most this many notification channels to return.}

\item{\code{channelId}}{character. Return policies with this channel.}

\item{\code{namePart}}{character. Only return the notification channels whose names contain the given substring.}

\item{\code{eventGroup}}{Enum < \link{project.all, dataset.all, model_deployments.critical_health, model_deployments.health, model_deployments.management_agent, model_deployments.management_agent_health, prediction_request.all, challenger_management.all, challenger_replay.all, model_deployments.all, comment.all, perma_delete_project.all, users_delete.all, batch_predictions.all, applications.all, change_requests.all, monitoring.all} > Return policies with this event group.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the notification policies that satisfy the query condition.


This method invokes \verb{GET /notificationPolicies/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Notification policies listed successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationPoliciesListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | How many notification channels to skip.
limit <- 100 # integer | At most this many notification channels to return.
channelId <- 'channelId_example' # character | Return policies with this channel.
namePart <- 'namePart_example' # character | Only return the notification channels whose names contain the given substring.
eventGroup <- 'eventGroup_example' # character | Return policies with this event group.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesList(offset, limit, channelId=channelId, namePart=namePart, eventGroup=eventGroup)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationPoliciesPut"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationPoliciesPut}{}}}
\subsection{Method \code{NotificationPoliciesPut()}}{
Update notification policy
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationPoliciesPut(
  policyId,
  notificationPolicyUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{policyId}}{character. The id of the notification policy}

\item{\code{notificationPolicyUpdate}}{\link{NotificationPolicyUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the notification policy.


This method invokes \verb{PUT /notificationPolicies/\{policyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Notification policy updated successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
policyId <- 'policyId_example' # character | The id of the notification policy
notificationPolicyUpdate <- NotificationPolicyUpdate$new() # NotificationPolicyUpdate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesPut(policyId, notificationPolicyUpdate=notificationPolicyUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationPoliciesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationPoliciesRetrieve}{}}}
\subsection{Method \code{NotificationPoliciesRetrieve()}}{
Retrieve notification policy
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationPoliciesRetrieve(policyId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{policyId}}{character. The id of the notification policy}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the notification policy.


This method invokes \verb{GET /notificationPolicies/\{policyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Notification policy retrieved successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationPolicyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
policyId <- 'policyId_example' # character | The id of the notification policy

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPoliciesRetrieve(policyId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationPolicyMutesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationPolicyMutesCreate}{}}}
\subsection{Method \code{NotificationPolicyMutesCreate()}}{
Create a new ignored notification
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationPolicyMutesCreate(
  notificationPolicyMuteCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notificationPolicyMuteCreate}}{\link{NotificationPolicyMuteCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new ignored notification


This method invokes \verb{POST /notificationPolicyMutes/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationPolicyMuteResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
notificationPolicyMuteCreate <- NotificationPolicyMuteCreate$new() # NotificationPolicyMuteCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPolicyMutesCreate(notificationPolicyMuteCreate=notificationPolicyMuteCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationPolicyMutesDelete"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationPolicyMutesDelete}{}}}
\subsection{Method \code{NotificationPolicyMutesDelete()}}{
Delete the existing notification policy mute
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationPolicyMutesDelete(muteId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{muteId}}{character. The id of the notification policy mute to delete}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the existing notification policy mute


This method invokes \verb{DELETE /notificationPolicyMutes/\{muteId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
muteId <- 'muteId_example' # character | The id of the notification policy mute to delete

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPolicyMutesDelete(muteId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationPolicyMutesList"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationPolicyMutesList}{}}}
\subsection{Method \code{NotificationPolicyMutesList()}}{
List the ignored notifications filtered by orgId if provided
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationPolicyMutesList(
  offset,
  limit,
  entityId = NULL,
  orgId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of records to skip over. Default 0}

\item{\code{limit}}{integer. The number of records to return. Default to 100, minimum to 1, maximum to 1000}

\item{\code{entityId}}{character. The id of the entity to filter}

\item{\code{orgId}}{character. The id of the organization that ignored notifications relate to}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List the ignored notifications filtered by orgId if provided


This method invokes \verb{GET /notificationPolicyMutes/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationPolicyMuteListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Default 0
limit <- 100 # integer | The number of records to return. Default to 100, minimum to 1, maximum to 1000
entityId <- 'entityId_example' # character | The id of the entity to filter
orgId <- 'orgId_example' # character | The id of the organization that ignored notifications relate to

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationPolicyMutesList(offset, limit, entityId=entityId, orgId=orgId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationWebhookChannelTestsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationWebhookChannelTestsCreate}{}}}
\subsection{Method \code{NotificationWebhookChannelTestsCreate()}}{
Test webhook notification channel
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationWebhookChannelTestsCreate(
  notificationWebhookChannelTestCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notificationWebhookChannelTestCreate}}{\link{NotificationWebhookChannelTestCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Test the webhook notification channel.


This method invokes \verb{POST /notificationWebhookChannelTests/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} The test for the webhook notification channel was created.
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationWebhookChannelTestId}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
notificationWebhookChannelTestCreate <- NotificationWebhookChannelTestCreate$new() # NotificationWebhookChannelTestCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationWebhookChannelTestsCreate(notificationWebhookChannelTestCreate=notificationWebhookChannelTestCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationWebhookChannelTestsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationWebhookChannelTestsRetrieve}{}}}
\subsection{Method \code{NotificationWebhookChannelTestsRetrieve()}}{
Retrieve status of notification channel test
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationWebhookChannelTestsRetrieve(notificationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notificationId}}{character. The identifier of the notification.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the status of the notification channel test.


This method invokes \verb{GET /notificationWebhookChannelTests/\{notificationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The notification status was retrieved.
\itemize{
}
}
}

\subsection{Returns}{
\link{NotificationWebhookChannelStatusResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
notificationId <- 'notificationId_example' # character | The identifier of the notification.

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationWebhookChannelTestsRetrieve(notificationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-NotificationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-NotificationsCreate}{}}}
\subsection{Method \code{NotificationsCreate()}}{
Resends the notification
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$NotificationsCreate(notificationResend = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notificationResend}}{\link{NotificationResend}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Resends the notification


This method invokes \verb{POST /notifications/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
notificationResend <- NotificationResend$new() # NotificationResend | 

api.instance <- NotificationsApi$new()
result <- api.instance$NotificationsCreate(notificationResend=notificationResend)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-RemoteEventsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-RemoteEventsCreate}{}}}
\subsection{Method \code{RemoteEventsCreate()}}{
Post a remote deployment event
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$RemoteEventsCreate(remoteEventCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{remoteEventCreate}}{\link{RemoteEventCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Post an event from a remote deployment.


This method invokes \verb{POST /remoteEvents/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} The event was created.
\itemize{
}
\item \strong{\code{404}} The deployment was not found.
\itemize{
}
\item \strong{\code{422}} Unable to process the request instructions or failed to post the event.
\itemize{
}
}
}

\subsection{Returns}{
\link{CreateRemoteEventResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
remoteEventCreate <- RemoteEventCreate$new() # RemoteEventCreate | 

api.instance <- NotificationsApi$new()
result <- api.instance$RemoteEventsCreate(remoteEventCreate=remoteEventCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-UserNotificationsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-UserNotificationsDelete}{}}}
\subsection{Method \code{UserNotificationsDelete()}}{
Delete user notification
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$UserNotificationsDelete(userNotificationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userNotificationId}}{character. Unique identifier of the notification.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete one notification associated with the user.


This method invokes \verb{DELETE /userNotifications/\{userNotificationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Notification was deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userNotificationId <- 'userNotificationId_example' # character | Unique identifier of the notification.

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsDelete(userNotificationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-UserNotificationsDeleteMany"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-UserNotificationsDeleteMany}{}}}
\subsection{Method \code{UserNotificationsDeleteMany()}}{
Delete all user notifications
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$UserNotificationsDeleteMany(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete all notifications associated with the user.


This method invokes \verb{DELETE /userNotifications/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Notifications were deleted.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsDeleteMany()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-UserNotificationsList"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-UserNotificationsList}{}}}
\subsection{Method \code{UserNotificationsList()}}{
List user notifications
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$UserNotificationsList(
  offset = 0,
  limit = 100,
  isRead = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of records to skip over}

\item{\code{limit}}{integer. The number of records to return}

\item{\code{isRead}}{character. When provided, returns only read or unread notifications}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Returns list of user's notifications from latest to oldest.


This method invokes \verb{GET /userNotifications/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A paginated list of notifications.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserNotificationListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over
limit <- 100 # integer | The number of records to return
isRead <- 'isRead_example' # character | When provided, returns only read or unread notifications

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsList(offset=offset, limit=limit, isRead=isRead)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-UserNotificationsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-UserNotificationsPatch}{}}}
\subsection{Method \code{UserNotificationsPatch()}}{
Mark as read
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$UserNotificationsPatch(userNotificationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userNotificationId}}{character. Unique identifier of the notification.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Mark one associated notification with the user as read.


This method invokes \verb{PATCH /userNotifications/\{userNotificationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Notification was marked as read.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userNotificationId <- 'userNotificationId_example' # character | Unique identifier of the notification.

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsPatch(userNotificationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-UserNotificationsPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-UserNotificationsPatchMany}{}}}
\subsection{Method \code{UserNotificationsPatchMany()}}{
Mark all as read
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$UserNotificationsPatchMany(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Mark all associated notifications with the user as read.


This method invokes \verb{PATCH /userNotifications/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} All notification were marked as read.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- NotificationsApi$new()
result <- api.instance$UserNotificationsPatchMany()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NotificationsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-NotificationsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NotificationsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
