% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predictions_api.R
\docType{class}
\name{PredictionsApi}
\alias{PredictionsApi}
\title{Predictions operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Predictions
}
\examples{

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionJobDefinitionsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
batchPredictionJobDefinitionsCreate <- BatchPredictionJobDefinitionsCreate$new() # BatchPredictionJobDefinitionsCreate |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsCreate(batchPredictionJobDefinitionsCreate=batchPredictionJobDefinitionsCreate)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionJobDefinitionsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
jobDefinitionId <- 'jobDefinitionId_example' # character | ID of the Batch Prediction job definition

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsDelete(jobDefinitionId)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionJobDefinitionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 100 # integer | At most this many results are returned
deploymentId <- 'deploymentId_example' # character | Includes only definitions for this particular deployment

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsList(offset, limit, deploymentId=deploymentId)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionJobDefinitionsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
jobDefinitionId <- 'jobDefinitionId_example' # character | ID of the Batch Prediction job definition
batchPredictionJobDefinitionsUpdate <- BatchPredictionJobDefinitionsUpdate$new() # BatchPredictionJobDefinitionsUpdate |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsPatch(jobDefinitionId, batchPredictionJobDefinitionsUpdate=batchPredictionJobDefinitionsUpdate)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionJobDefinitionsPortableList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
jobDefinitionId <- 'jobDefinitionId_example' # character | ID of the Batch Prediction job definition

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsPortableList(jobDefinitionId)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionJobDefinitionsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
jobDefinitionId <- 'jobDefinitionId_example' # character | ID of the Batch Prediction job definition

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsRetrieve(jobDefinitionId)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
batchPredictionJobCreate <- BatchPredictionJobCreate$new() # BatchPredictionJobCreate |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsCreate(batchPredictionJobCreate=batchPredictionJobCreate)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsCsvUploadFinalizeMultipartCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsCsvUploadFinalizeMultipartCreate(predictionJobId, partNumber)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsCsvUploadPartPut`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsCsvUploadPartPut(predictionJobId, partNumber)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsCsvUploadPutMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsCsvUploadPutMany(predictionJobId, partNumber)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsDelete(predictionJobId, partNumber)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsDownloadList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsDownloadList(predictionJobId, partNumber)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsFromExistingCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
batchPredictionJobId <- BatchPredictionJobId$new() # BatchPredictionJobId |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsFromExistingCreate(batchPredictionJobId=batchPredictionJobId)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsFromJobDefinitionCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
batchPredictionJobDefinitionId <- BatchPredictionJobDefinitionId$new() # BatchPredictionJobDefinitionId |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsFromJobDefinitionCreate(batchPredictionJobDefinitionId=batchPredictionJobDefinitionId)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 100 # integer | At most this many results are returned
allJobs <- FALSE # character | (For organization admins) Include jobs for all users in the organization.
status <- OneOfstringarray$new() # OneOfstringarray | Includes only jobs that have the status value that matches this flag. Repeat the parameter for filtering on multiple statuses.
source <- OneOfstringarray$new() # OneOfstringarray | Includes only jobs that have the source value that matches this flag. Repeat the parameter for filtering on multiple statuses.
deploymentId <- 'deploymentId_example' # character | Includes only jobs for this particular deployment
jobId <- 'jobId_example' # character | Includes only job by specific id
orderBy <- 'orderBy_example' # character | Sort order which will be applied to batch prediction list. Prefix the attribute name with a dash to sort in descending order, e.g. \"-created\".
cutoffHours <- 56 # integer | Only list jobs created at most this amount of hours ago.
startDateTime <- 'startDateTime_example' # character | ISO-formatted datetime of the earliest time the job was added (inclusive). For example \"2008-08-24T12:00:00Z\". Will ignore cutoffHours if set.
endDateTime <- 'endDateTime_example' # character | ISO-formatted datetime of the latest time the job was added (inclusive). For example \"2008-08-24T12:00:00Z\".
batchPredictionJobDefinitionId <- 'batchPredictionJobDefinitionId_example' # character | Includes only jobs for this particular definition
hostname <- OneOfstringarray$new() # OneOfstringarray | Includes only jobs for this particular prediction instance hostname
intakeType <- 'intakeType_example' # character | Includes only jobs for this particular intake type
outputType <- 'outputType_example' # character | Includes only jobs for this particular output type

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsList(offset, limit, allJobs, status=status, source=source, deploymentId=deploymentId, jobId=jobId, orderBy=orderBy, cutoffHours=cutoffHours, startDateTime=startDateTime, endDateTime=endDateTime, batchPredictionJobDefinitionId=batchPredictionJobDefinitionId, hostname=hostname, intakeType=intakeType, outputType=outputType)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload
batchPredictionJobUpdate <- BatchPredictionJobUpdate$new() # BatchPredictionJobUpdate |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsPatch(predictionJobId, partNumber, batchPredictionJobUpdate=batchPredictionJobUpdate)
}

## ------------------------------------------------
## Method `PredictionsApi$BatchPredictionsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsRetrieve(predictionJobId, partNumber)
}

## ------------------------------------------------
## Method `PredictionsApi$ComputedTrainingPredictionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
projectId <- 'projectId_example' # character | Project ID to retrieve training predictions for
predictionId <- 'predictionId_example' # character | Prediction ID to retrieve training predictions for
accept <- 'accept_example' # character | Requested MIME type for the returned data

api.instance <- PredictionsApi$new()
result <- api.instance$ComputedTrainingPredictionsList(offset, limit, projectId, predictionId, accept=accept)
}

## ------------------------------------------------
## Method `PredictionsApi$ImportedModelsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
singleModelFilePayload <- SingleModelFilePayload$new() # SingleModelFilePayload |

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsCreate(singleModelFilePayload=singleModelFilePayload)
}

## ------------------------------------------------
## Method `PredictionsApi$ImportedModelsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
importId <- 'importId_example' # character | Unique identifier of the imported model

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsDelete(importId)
}

## ------------------------------------------------
## Method `PredictionsApi$ImportedModelsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Non-negative, defaults to 0
limit <- 100 # integer | The number of records to return. Positive, defaults to 100
query <- 'query_example' # character | A case-insensitive search term to filter returned models. The searchable fields are: `model_id`, `model_name`, `display_name`, `dataset_name`, `project_id`, `project_name`, `target`, `note`, `featurelist_name`, `created_by_id`, `created_by_username`. Search also looks at the first and last name of the user who imported the model. The partially matched models are counted, so for example the search term `train` would find models with name `TuesdayTrainingData`

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsList(offset, limit, query=query)
}

## ------------------------------------------------
## Method `PredictionsApi$ImportedModelsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
importId <- 'importId_example' # character | Unique identifier of the imported model
imortedModelUpdatePayload <- ImortedModelUpdatePayload$new() # ImortedModelUpdatePayload |

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsPatch(importId, imortedModelUpdatePayload=imortedModelUpdatePayload)
}

## ------------------------------------------------
## Method `PredictionsApi$ImportedModelsPut`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
importId <- 'importId_example' # character | Unique identifier of the imported model
singleModelFilePayload <- SingleModelFilePayload$new() # SingleModelFilePayload |

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsPut(importId, singleModelFilePayload=singleModelFilePayload)
}

## ------------------------------------------------
## Method `PredictionsApi$ImportedModelsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
importId <- 'importId_example' # character | Unique identifier of the imported model

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsRetrieve(importId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsModelsPredictionExplanationsInitializationCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
predictionExplanationsInitializationCreate <- PredictionExplanationsInitializationCreate$new() # PredictionExplanationsInitializationCreate |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationCreate(projectId, modelId, predictionExplanationsInitializationCreate=predictionExplanationsInitializationCreate)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsModelsPredictionExplanationsInitializationDeleteMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationDeleteMany(projectId, modelId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsModelsPredictionExplanationsInitializationList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
excludeAdjustedPredictions <- "true" # character | Whether to include adjusted prediction in the PredictionExplanationsSample response.
predictionExplanationsInitializationRetrieve <- PredictionExplanationsInitializationRetrieve$new() # PredictionExplanationsInitializationRetrieve |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationList(projectId, modelId, excludeAdjustedPredictions=excludeAdjustedPredictions, predictionExplanationsInitializationRetrieve=predictionExplanationsInitializationRetrieve)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictJobsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
jobId <- 'jobId_example' # character | The job ID

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictJobsDelete(projectId, jobId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictJobsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
status <- 'status_example' # character | If provided, only jobs with the same status will be included in the results; otherwise, queued and inprogress jobs (but not errored jobs) will be returned.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictJobsList(projectId, status=status)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictJobsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
jobId <- 'jobId_example' # character | The job ID

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictJobsRetrieve(projectId, jobId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionDatasetsDataSourceUploadsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID to which the data source will be uploaded to.
predictionDataSource <- PredictionDataSource$new() # PredictionDataSource |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsDataSourceUploadsCreate(projectId, predictionDataSource=predictionDataSource)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionDatasetsDatasetUploadsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
predictionFromCatalogDataset <- PredictionFromCatalogDataset$new() # PredictionFromCatalogDataset |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsDatasetUploadsCreate(projectId, predictionFromCatalogDataset=predictionFromCatalogDataset)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionDatasetsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID that owns the data.
datasetId <- 'datasetId_example' # character | The dataset ID to delete.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsDelete(projectId, datasetId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionDatasetsFileUploadsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID to which the data will be uploaded for prediction.
predictionFileUpload <- PredictionFileUpload$new() # PredictionFileUpload |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsFileUploadsCreate(projectId, predictionFileUpload=predictionFileUpload)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionDatasetsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
projectId <- 'projectId_example' # character | The project ID to query.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsList(offset, limit, projectId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionDatasetsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID that owns the data.
datasetId <- 'datasetId_example' # character | The dataset ID to query for.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsRetrieve(projectId, datasetId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionDatasetsUrlUploadsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID to which the data will be uploaded for prediction.
predictionUrlUpload <- PredictionURLUpload$new() # PredictionURLUpload |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsUrlUploadsCreate(projectId, predictionUrlUpload=predictionUrlUpload)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionExplanationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsCreate <- PredictionExplanationsCreate$new() # PredictionExplanationsCreate |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsCreate(projectId, predictionExplanationsCreate=predictionExplanationsCreate)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionExplanationsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
limit <- 3000 # integer | At most this many results are returned. The default may change and a new maximum limit may be imposed without notice.
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.
offset <- 0 # integer | This many results will be skipped.
excludeAdjustedPredictions <- "true" # character | Whether to include adjusted prediction in PredictionExplanationsRow response.
predictionExplanationsRetrieve <- PredictionExplanationsRetrieve$new() # PredictionExplanationsRetrieve |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsList(limit, projectId, predictionExplanationsId, offset=offset, excludeAdjustedPredictions=excludeAdjustedPredictions, predictionExplanationsRetrieve=predictionExplanationsRetrieve)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionExplanationsRecordsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsDelete(projectId, predictionExplanationsId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionExplanationsRecordsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
modelId <- 'modelId_example' # character | If specified, only prediction explanations records computed for this model will be returned.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsList(projectId, offset=offset, limit=limit, modelId=modelId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionExplanationsRecordsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.
predictionExplanationsRecord <- PredictionExplanationsRecord$new() # PredictionExplanationsRecord |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsRetrieve(projectId, predictionExplanationsId, predictionExplanationsRecord=predictionExplanationsRecord)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to make predictions within.
contentType <- 'contentType_example' # character | Content types available for making request. `multipart/form-data` is the legacy deprecated method to send the small file with the prediction request.
createPredictionFromDataset <- CreatePredictionFromDataset$new() # CreatePredictionFromDataset |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsCreate(projectId, contentType, createPredictionFromDataset=createPredictionFromDataset)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 1000 # integer | At most this many results are returned. To specify no limit, use 0. The default may change and a maximum limit may be imposed without notice.
projectId <- 'projectId_example' # character | The project of the predictions.
datasetId <- 'datasetId_example' # character | Dataset id used to create the predictions
modelId <- 'modelId_example' # character | Model id

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsList(offset, limit, projectId, datasetId=datasetId, modelId=modelId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionsMetadataList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 1000 # integer | At most this many results are returned. To specify no limit, use 0. The default may change and a maximum limit may be imposed without notice.
projectId <- 'projectId_example' # character | The project of the predictions.
predictionDatasetId <- 'predictionDatasetId_example' # character | Dataset id used to create the predictions
modelId <- 'modelId_example' # character | Model id

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsMetadataList(offset, limit, projectId, predictionDatasetId=predictionDatasetId, modelId=modelId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionsMetadataRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionId <- 'predictionId_example' # character | The id of the prediction record to retrieve. If you have the jobId, you can retrieve the predictionId using :http:get:`/api/v2/projects/(projectId)/predictJobs/(jobId)/`.
projectId <- 'projectId_example' # character | The id of the project the prediction belongs to.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsMetadataRetrieve(predictionId, projectId)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsPredictionsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
predictionId <- 'predictionId_example' # character | The id of the prediction record to retrieve. If you have the jobId, you can retrieve the predictionId using :http:get:`/api/v2/projects/(projectId)/predictJobs/(jobId)/`.
projectId <- 'projectId_example' # character | The id of the project the prediction belongs to.
shapMulticlassLevel <- 'shapMulticlassLevel_example' # character | Required in multiclass projects with SHAP prediction explanations. This parameter specifies which of the target classes (levels) you would like to retrieve explanations for. This will NOT affect a non-multiclass project.
accept <- 'accept_example' # character | Requested MIME type for the returned data

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsRetrieve(predictionId, projectId, shapMulticlassLevel=shapMulticlassLevel, accept=accept)
}

## ------------------------------------------------
## Method `PredictionsApi$ProjectsTrainingPredictionsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project ID to compute training predictions for
createTrainingPrediction <- CreateTrainingPrediction$new() # CreateTrainingPrediction |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsTrainingPredictionsCreate(projectId, createTrainingPrediction=createTrainingPrediction)
}

## ------------------------------------------------
## Method `PredictionsApi$ScheduledJobsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
jobId <- 'jobId_example' # character | The ID of the job being requested.

api.instance <- PredictionsApi$new()
result <- api.instance$ScheduledJobsDelete(jobId)
}

## ------------------------------------------------
## Method `PredictionsApi$ScheduledJobsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of scheduled jobs to skip. Defaults to 0.
limit <- 20 # integer | The number of scheduled jobs (max 100) to return. Defaults to 20
orderBy <- "name" # character | The order to sort the scheduled jobs. Defaults to order by last successful run timestamp in descending order.
search <- "" # character | Case insensitive search against scheduled jobs name or type name.
deploymentId <- 'deploymentId_example' # character | Filter by the prediction integration deployment ID. Ignored for non prediction integration type ID.
typeId <- "predictionIntegration" # character | filter by scheduled job type ID.
integrationTypeName <- 'integrationTypeName_example' # character | filter by integration type name.
queryByUser <- "createdBy" # character | Which user field to filter with.
filterEnabled <- 'filterEnabled_example' # character | Filter jobs using the enabled field. If `true`, only enabled jobs are returned, otherwise if `false`, only disabled jobs are returned. The default returns both enabled and disabled jobs.

api.instance <- PredictionsApi$new()
result <- api.instance$ScheduledJobsList(offset, limit, orderBy=orderBy, search=search, deploymentId=deploymentId, typeId=typeId, integrationTypeName=integrationTypeName, queryByUser=queryByUser, filterEnabled=filterEnabled)
}

## ------------------------------------------------
## Method `PredictionsApi$ScheduledJobsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
jobId <- 'jobId_example' # character | The ID of the job being requested.
scheduledJobRunStop <- ScheduledJobRunStop$new() # ScheduledJobRunStop |

api.instance <- PredictionsApi$new()
result <- api.instance$ScheduledJobsPatch(jobId, scheduledJobRunStop=scheduledJobRunStop)
}

## ------------------------------------------------
## Method `PredictionsApi$ScheduledJobsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
jobId <- 'jobId_example' # character | The ID of the job being requested.

api.instance <- PredictionsApi$new()
result <- api.instance$ScheduledJobsRetrieve(jobId)
}

## ------------------------------------------------
## Method `PredictionsApi$TrainingPredictionsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
projectId <- 'projectId_example' # character | Project ID to retrieve training predictions for

api.instance <- PredictionsApi$new()
result <- api.instance$TrainingPredictionsList(offset, limit, projectId)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{PredictionsApi$new()}}
\item \href{#method-BatchPredictionJobDefinitionsCreate}{\code{PredictionsApi$BatchPredictionJobDefinitionsCreate()}}
\item \href{#method-BatchPredictionJobDefinitionsDelete}{\code{PredictionsApi$BatchPredictionJobDefinitionsDelete()}}
\item \href{#method-BatchPredictionJobDefinitionsList}{\code{PredictionsApi$BatchPredictionJobDefinitionsList()}}
\item \href{#method-BatchPredictionJobDefinitionsPatch}{\code{PredictionsApi$BatchPredictionJobDefinitionsPatch()}}
\item \href{#method-BatchPredictionJobDefinitionsPortableList}{\code{PredictionsApi$BatchPredictionJobDefinitionsPortableList()}}
\item \href{#method-BatchPredictionJobDefinitionsRetrieve}{\code{PredictionsApi$BatchPredictionJobDefinitionsRetrieve()}}
\item \href{#method-BatchPredictionsCreate}{\code{PredictionsApi$BatchPredictionsCreate()}}
\item \href{#method-BatchPredictionsCsvUploadFinalizeMultipartCreate}{\code{PredictionsApi$BatchPredictionsCsvUploadFinalizeMultipartCreate()}}
\item \href{#method-BatchPredictionsCsvUploadPartPut}{\code{PredictionsApi$BatchPredictionsCsvUploadPartPut()}}
\item \href{#method-BatchPredictionsCsvUploadPutMany}{\code{PredictionsApi$BatchPredictionsCsvUploadPutMany()}}
\item \href{#method-BatchPredictionsDelete}{\code{PredictionsApi$BatchPredictionsDelete()}}
\item \href{#method-BatchPredictionsDownloadList}{\code{PredictionsApi$BatchPredictionsDownloadList()}}
\item \href{#method-BatchPredictionsFromExistingCreate}{\code{PredictionsApi$BatchPredictionsFromExistingCreate()}}
\item \href{#method-BatchPredictionsFromJobDefinitionCreate}{\code{PredictionsApi$BatchPredictionsFromJobDefinitionCreate()}}
\item \href{#method-BatchPredictionsList}{\code{PredictionsApi$BatchPredictionsList()}}
\item \href{#method-BatchPredictionsPatch}{\code{PredictionsApi$BatchPredictionsPatch()}}
\item \href{#method-BatchPredictionsRetrieve}{\code{PredictionsApi$BatchPredictionsRetrieve()}}
\item \href{#method-ComputedTrainingPredictionsList}{\code{PredictionsApi$ComputedTrainingPredictionsList()}}
\item \href{#method-ImportedModelsCreate}{\code{PredictionsApi$ImportedModelsCreate()}}
\item \href{#method-ImportedModelsDelete}{\code{PredictionsApi$ImportedModelsDelete()}}
\item \href{#method-ImportedModelsList}{\code{PredictionsApi$ImportedModelsList()}}
\item \href{#method-ImportedModelsPatch}{\code{PredictionsApi$ImportedModelsPatch()}}
\item \href{#method-ImportedModelsPut}{\code{PredictionsApi$ImportedModelsPut()}}
\item \href{#method-ImportedModelsRetrieve}{\code{PredictionsApi$ImportedModelsRetrieve()}}
\item \href{#method-ProjectsModelsPredictionExplanationsInitializationCreate}{\code{PredictionsApi$ProjectsModelsPredictionExplanationsInitializationCreate()}}
\item \href{#method-ProjectsModelsPredictionExplanationsInitializationDeleteMany}{\code{PredictionsApi$ProjectsModelsPredictionExplanationsInitializationDeleteMany()}}
\item \href{#method-ProjectsModelsPredictionExplanationsInitializationList}{\code{PredictionsApi$ProjectsModelsPredictionExplanationsInitializationList()}}
\item \href{#method-ProjectsPredictJobsDelete}{\code{PredictionsApi$ProjectsPredictJobsDelete()}}
\item \href{#method-ProjectsPredictJobsList}{\code{PredictionsApi$ProjectsPredictJobsList()}}
\item \href{#method-ProjectsPredictJobsRetrieve}{\code{PredictionsApi$ProjectsPredictJobsRetrieve()}}
\item \href{#method-ProjectsPredictionDatasetsDataSourceUploadsCreate}{\code{PredictionsApi$ProjectsPredictionDatasetsDataSourceUploadsCreate()}}
\item \href{#method-ProjectsPredictionDatasetsDatasetUploadsCreate}{\code{PredictionsApi$ProjectsPredictionDatasetsDatasetUploadsCreate()}}
\item \href{#method-ProjectsPredictionDatasetsDelete}{\code{PredictionsApi$ProjectsPredictionDatasetsDelete()}}
\item \href{#method-ProjectsPredictionDatasetsFileUploadsCreate}{\code{PredictionsApi$ProjectsPredictionDatasetsFileUploadsCreate()}}
\item \href{#method-ProjectsPredictionDatasetsList}{\code{PredictionsApi$ProjectsPredictionDatasetsList()}}
\item \href{#method-ProjectsPredictionDatasetsRetrieve}{\code{PredictionsApi$ProjectsPredictionDatasetsRetrieve()}}
\item \href{#method-ProjectsPredictionDatasetsUrlUploadsCreate}{\code{PredictionsApi$ProjectsPredictionDatasetsUrlUploadsCreate()}}
\item \href{#method-ProjectsPredictionExplanationsCreate}{\code{PredictionsApi$ProjectsPredictionExplanationsCreate()}}
\item \href{#method-ProjectsPredictionExplanationsList}{\code{PredictionsApi$ProjectsPredictionExplanationsList()}}
\item \href{#method-ProjectsPredictionExplanationsRecordsDelete}{\code{PredictionsApi$ProjectsPredictionExplanationsRecordsDelete()}}
\item \href{#method-ProjectsPredictionExplanationsRecordsList}{\code{PredictionsApi$ProjectsPredictionExplanationsRecordsList()}}
\item \href{#method-ProjectsPredictionExplanationsRecordsRetrieve}{\code{PredictionsApi$ProjectsPredictionExplanationsRecordsRetrieve()}}
\item \href{#method-ProjectsPredictionsCreate}{\code{PredictionsApi$ProjectsPredictionsCreate()}}
\item \href{#method-ProjectsPredictionsList}{\code{PredictionsApi$ProjectsPredictionsList()}}
\item \href{#method-ProjectsPredictionsMetadataList}{\code{PredictionsApi$ProjectsPredictionsMetadataList()}}
\item \href{#method-ProjectsPredictionsMetadataRetrieve}{\code{PredictionsApi$ProjectsPredictionsMetadataRetrieve()}}
\item \href{#method-ProjectsPredictionsRetrieve}{\code{PredictionsApi$ProjectsPredictionsRetrieve()}}
\item \href{#method-ProjectsTrainingPredictionsCreate}{\code{PredictionsApi$ProjectsTrainingPredictionsCreate()}}
\item \href{#method-ScheduledJobsDelete}{\code{PredictionsApi$ScheduledJobsDelete()}}
\item \href{#method-ScheduledJobsList}{\code{PredictionsApi$ScheduledJobsList()}}
\item \href{#method-ScheduledJobsPatch}{\code{PredictionsApi$ScheduledJobsPatch()}}
\item \href{#method-ScheduledJobsRetrieve}{\code{PredictionsApi$ScheduledJobsRetrieve()}}
\item \href{#method-TrainingPredictionsList}{\code{PredictionsApi$TrainingPredictionsList()}}
\item \href{#method-clone}{\code{PredictionsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionJobDefinitionsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionJobDefinitionsCreate}{}}}
\subsection{Method \code{BatchPredictionJobDefinitionsCreate()}}{
Creates a new Batch Prediction job definition
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionJobDefinitionsCreate(
  batchPredictionJobDefinitionsCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{batchPredictionJobDefinitionsCreate}}{\link{BatchPredictionJobDefinitionsCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a Batch Prediction Job definition. A configuration for a Batch Prediction job which can either be executed manually upon request or on scheduled intervals, if enabled. The API payload is the same as for `/batchPredictions` along with optional ``enabled`` and ``schedule`` items.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job details for the created Batch Prediction job definition
\itemize{
}
\item \strong{\code{403}} You are not authorized to create a job definition on this deployment due to your permissions role
\itemize{
}
\item \strong{\code{422}} You tried to create a job definition with uncompatible or missing parameters to create a fully functioning job definition
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobDefinitionsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
batchPredictionJobDefinitionsCreate <- BatchPredictionJobDefinitionsCreate$new() # BatchPredictionJobDefinitionsCreate |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsCreate(batchPredictionJobDefinitionsCreate=batchPredictionJobDefinitionsCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionJobDefinitionsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionJobDefinitionsDelete}{}}}
\subsection{Method \code{BatchPredictionJobDefinitionsDelete()}}{
Delete Batch Prediction job definition
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionJobDefinitionsDelete(jobDefinitionId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{jobDefinitionId}}{character. ID of the Batch Prediction job definition}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a Batch Prediction job definition


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}}
\itemize{
}
\item \strong{\code{403}} You are not authorized to delete this job definition due to your permissions role
\itemize{
}
\item \strong{\code{404}} Job was deleted, never existed or you do not have access to it
\itemize{
}
\item \strong{\code{409}} Job could not be deleted, as there are currently running jobs in the queue.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
jobDefinitionId <- 'jobDefinitionId_example' # character | ID of the Batch Prediction job definition

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsDelete(jobDefinitionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionJobDefinitionsList"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionJobDefinitionsList}{}}}
\subsection{Method \code{BatchPredictionJobDefinitionsList()}}{
List Batch Prediction job definitions
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionJobDefinitionsList(
  offset,
  limit,
  deploymentId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{deploymentId}}{character. Includes only definitions for this particular deployment}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all Batch Prediction jobs definitions available


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of all available jobs
\itemize{
}
\item \strong{\code{422}} Your input data or query arguments did not work together
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobDefinitionsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 100 # integer | At most this many results are returned
deploymentId <- 'deploymentId_example' # character | Includes only definitions for this particular deployment

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsList(offset, limit, deploymentId=deploymentId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionJobDefinitionsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionJobDefinitionsPatch}{}}}
\subsection{Method \code{BatchPredictionJobDefinitionsPatch()}}{
Update Batch Prediction job definition
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionJobDefinitionsPatch(
  jobDefinitionId,
  batchPredictionJobDefinitionsUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{jobDefinitionId}}{character. ID of the Batch Prediction job definition}

\item{\code{batchPredictionJobDefinitionsUpdate}}{\link{BatchPredictionJobDefinitionsUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a Batch Prediction job definition


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Job details for the updated Batch Prediction job definition
\itemize{
}
\item \strong{\code{403}} You are not authorized to alter the contents of this job definition due to your permissions role
\itemize{
}
\item \strong{\code{404}} Job was deleted, never existed or you do not have access to it
\itemize{
}
\item \strong{\code{409}} You chose a name of your job definition that was already existing within your organization
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobDefinitionsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
jobDefinitionId <- 'jobDefinitionId_example' # character | ID of the Batch Prediction job definition
batchPredictionJobDefinitionsUpdate <- BatchPredictionJobDefinitionsUpdate$new() # BatchPredictionJobDefinitionsUpdate |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsPatch(jobDefinitionId, batchPredictionJobDefinitionsUpdate=batchPredictionJobDefinitionsUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionJobDefinitionsPortableList"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionJobDefinitionsPortableList}{}}}
\subsection{Method \code{BatchPredictionJobDefinitionsPortableList()}}{
Retrieve job definition snippet for PBP
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionJobDefinitionsPortableList(jobDefinitionId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{jobDefinitionId}}{character. ID of the Batch Prediction job definition}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a Batch Prediction job definition for Portable Batch Predictions


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Snippet for Portable Batch Predictions
\itemize{
}
\item \strong{\code{404}} Job was deleted, never existed or you do not have access to it
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
jobDefinitionId <- 'jobDefinitionId_example' # character | ID of the Batch Prediction job definition

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsPortableList(jobDefinitionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionJobDefinitionsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionJobDefinitionsRetrieve}{}}}
\subsection{Method \code{BatchPredictionJobDefinitionsRetrieve()}}{
Retrieve Batch Prediction job definition
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionJobDefinitionsRetrieve(jobDefinitionId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{jobDefinitionId}}{character. ID of the Batch Prediction job definition}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a Batch Prediction job definition


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Job details for the requested Batch Prediction job definition
\itemize{
}
\item \strong{\code{404}} Job was deleted, never existed or you do not have access to it
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobDefinitionsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
jobDefinitionId <- 'jobDefinitionId_example' # character | ID of the Batch Prediction job definition

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionJobDefinitionsRetrieve(jobDefinitionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsCreate}{}}}
\subsection{Method \code{BatchPredictionsCreate()}}{
Creates a new Batch Prediction job
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsCreate(batchPredictionJobCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{batchPredictionJobCreate}}{\link{BatchPredictionJobCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Submit the configuration for the job and it will be submitted to the queue


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job details for the created Batch Prediction job
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
batchPredictionJobCreate <- BatchPredictionJobCreate$new() # BatchPredictionJobCreate |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsCreate(batchPredictionJobCreate=batchPredictionJobCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsCsvUploadFinalizeMultipartCreate"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsCsvUploadFinalizeMultipartCreate}{}}}
\subsection{Method \code{BatchPredictionsCsvUploadFinalizeMultipartCreate()}}{
Finalize a multipart upload
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsCsvUploadFinalizeMultipartCreate(
  predictionJobId,
  partNumber,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionJobId}}{character. ID of the Batch Prediction job}

\item{\code{partNumber}}{integer. The number of which csv part is being uploaded when using multipart upload}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Finalize a multipart upload, indicating that no further chunks will be sent


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Acknowledgement that the request was accepted or an error message
\itemize{
}
\item \strong{\code{404}} Job was deleted, never existed or you do not have access to it
\itemize{
}
\item \strong{\code{409}} Only multipart jobs can be finalized.
\itemize{
}
\item \strong{\code{422}} No data was uploaded
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsCsvUploadFinalizeMultipartCreate(predictionJobId, partNumber)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsCsvUploadPartPut"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsCsvUploadPartPut}{}}}
\subsection{Method \code{BatchPredictionsCsvUploadPartPut()}}{
Upload CSV data in multiple parts
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsCsvUploadPartPut(
  predictionJobId,
  partNumber,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionJobId}}{character. ID of the Batch Prediction job}

\item{\code{partNumber}}{integer. The number of which csv part is being uploaded when using multipart upload}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Stream CSV data to the prediction job in many parts.Only available for jobs that uses the localFile intake option.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job data was successfully submitted
\itemize{
}
\item \strong{\code{404}} Job does not exist or does not require data
\itemize{
}
\item \strong{\code{406}} Not acceptable MIME type
\itemize{
}
\item \strong{\code{409}} Dataset upload has already begun
\itemize{
}
\item \strong{\code{422}} Job was \"ABORTED\" due to too many errors in the data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsCsvUploadPartPut(predictionJobId, partNumber)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsCsvUploadPutMany"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsCsvUploadPutMany}{}}}
\subsection{Method \code{BatchPredictionsCsvUploadPutMany()}}{
Creates a new_model_id Batch Prediction job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsCsvUploadPutMany(
  predictionJobId,
  partNumber,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionJobId}}{character. ID of the Batch Prediction job}

\item{\code{partNumber}}{integer. The number of which csv part is being uploaded when using multipart upload}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Stream CSV data to the prediction job. Only available for jobs thatuses the localFile intake option.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job data was successfully submitted
\itemize{
}
\item \strong{\code{404}} Job does not exist or does not require data
\itemize{
}
\item \strong{\code{406}} Not acceptable MIME type
\itemize{
}
\item \strong{\code{409}} Dataset upload has already begun
\itemize{
}
\item \strong{\code{422}} Job was \"ABORTED\" due to too many errors in the data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsCsvUploadPutMany(predictionJobId, partNumber)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsDelete}{}}}
\subsection{Method \code{BatchPredictionsDelete()}}{
Cancel a Batch Prediction job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsDelete(predictionJobId, partNumber, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionJobId}}{character. ID of the Batch Prediction job}

\item{\code{partNumber}}{integer. The number of which csv part is being uploaded when using multipart upload}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If the job is running, it will be aborted. Then it will be removed, meaning all underlying data will be deleted and the job is removed from the list of jobs.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job cancelled
\itemize{
}
\item \strong{\code{404}} Job does not exist or was not submitted to the queue.
\itemize{
}
\item \strong{\code{409}} Job cannot be aborted for some reason. Possible reasons: job is already aborted or completed.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsDelete(predictionJobId, partNumber)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsDownloadList"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsDownloadList}{}}}
\subsection{Method \code{BatchPredictionsDownloadList()}}{
Download the scored data set of a batch prediction job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsDownloadList(predictionJobId, partNumber, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionJobId}}{character. ID of the Batch Prediction job}

\item{\code{partNumber}}{integer. The number of which csv part is being uploaded when using multipart upload}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This is only valid for jobs scored using the \"localFile\" output option


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Job was downloaded correctly
\itemize{
\item \strong{\code{ContentMinusDisposition}} Contains an auto generated filename for this download (\"attachment;filename=result-<id>.csv\").
\item \strong{\code{ContentMinusType}} MIME type of the returned data
}
\item \strong{\code{404}} Job does not exist or is not completed
\itemize{
}
\item \strong{\code{406}} Not acceptable MIME type
\itemize{
}
\item \strong{\code{422}} Job was \"ABORTED\" due to too many errors in the data
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsDownloadList(predictionJobId, partNumber)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsFromExistingCreate"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsFromExistingCreate}{}}}
\subsection{Method \code{BatchPredictionsFromExistingCreate()}}{
Create a new a Batch Prediction job based on an existing Batch Prediction job.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsFromExistingCreate(
  batchPredictionJobId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{batchPredictionJobId}}{\link{BatchPredictionJobId}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Copies an existing job and submits it to the queue.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job details for the created Batch Prediction job
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
batchPredictionJobId <- BatchPredictionJobId$new() # BatchPredictionJobId |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsFromExistingCreate(batchPredictionJobId=batchPredictionJobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsFromJobDefinitionCreate"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsFromJobDefinitionCreate}{}}}
\subsection{Method \code{BatchPredictionsFromJobDefinitionCreate()}}{
Launch a Batch Prediction job for scoring
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsFromJobDefinitionCreate(
  batchPredictionJobDefinitionId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{batchPredictionJobDefinitionId}}{\link{BatchPredictionJobDefinitionId}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Launches a one-time batch prediction job based off of the previously supplied definition referring to the job definition ID and puts it on the queue.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Job details for the created Batch Prediction job
\itemize{
}
\item \strong{\code{404}} Job was deleted, never existed or you do not have access to it
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
batchPredictionJobDefinitionId <- BatchPredictionJobDefinitionId$new() # BatchPredictionJobDefinitionId |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsFromJobDefinitionCreate(batchPredictionJobDefinitionId=batchPredictionJobDefinitionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsList"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsList}{}}}
\subsection{Method \code{BatchPredictionsList()}}{
List batch prediction jobs
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsList(
  offset,
  limit,
  allJobs,
  status = NULL,
  source = NULL,
  deploymentId = NULL,
  jobId = NULL,
  orderBy = NULL,
  cutoffHours = NULL,
  startDateTime = NULL,
  endDateTime = NULL,
  batchPredictionJobDefinitionId = NULL,
  hostname = NULL,
  intakeType = NULL,
  outputType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{allJobs}}{character. (For organization admins) Include jobs for all users in the organization.}

\item{\code{status}}{\link{OneOfstringarray}. Includes only jobs that have the status value that matches this flag. Repeat the parameter for filtering on multiple statuses.}

\item{\code{source}}{\link{OneOfstringarray}. Includes only jobs that have the source value that matches this flag. Repeat the parameter for filtering on multiple statuses.}

\item{\code{deploymentId}}{character. Includes only jobs for this particular deployment}

\item{\code{jobId}}{character. Includes only job by specific id}

\item{\code{orderBy}}{Enum < \link{created, -created, status, -status} > Sort order which will be applied to batch prediction list. Prefix the attribute name with a dash to sort in descending order, e.g. \"-created\".}

\item{\code{cutoffHours}}{integer. Only list jobs created at most this amount of hours ago.}

\item{\code{startDateTime}}{character. ISO-formatted datetime of the earliest time the job was added (inclusive). For example \"2008-08-24T12:00:00Z\". Will ignore cutoffHours if set.}

\item{\code{endDateTime}}{character. ISO-formatted datetime of the latest time the job was added (inclusive). For example \"2008-08-24T12:00:00Z\".}

\item{\code{batchPredictionJobDefinitionId}}{character. Includes only jobs for this particular definition}

\item{\code{hostname}}{\link{OneOfstringarray}. Includes only jobs for this particular prediction instance hostname}

\item{\code{intakeType}}{Enum < \link{local_file, azure, bigquery, dataStage, dataset, dss, gcp, http, jdbc, localFile, s3, snowflake, synapse} > Includes only jobs for this particular intake type}

\item{\code{outputType}}{Enum < \link{local_file, azure, bigquery, gcp, http, jdbc, localFile, s3, snowflake, synapse, tableau} > Includes only jobs for this particular output type}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a collection of batch prediction jobs by statuses


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of Batch Prediction job objects
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 100 # integer | At most this many results are returned
allJobs <- FALSE # character | (For organization admins) Include jobs for all users in the organization.
status <- OneOfstringarray$new() # OneOfstringarray | Includes only jobs that have the status value that matches this flag. Repeat the parameter for filtering on multiple statuses.
source <- OneOfstringarray$new() # OneOfstringarray | Includes only jobs that have the source value that matches this flag. Repeat the parameter for filtering on multiple statuses.
deploymentId <- 'deploymentId_example' # character | Includes only jobs for this particular deployment
jobId <- 'jobId_example' # character | Includes only job by specific id
orderBy <- 'orderBy_example' # character | Sort order which will be applied to batch prediction list. Prefix the attribute name with a dash to sort in descending order, e.g. \"-created\".
cutoffHours <- 56 # integer | Only list jobs created at most this amount of hours ago.
startDateTime <- 'startDateTime_example' # character | ISO-formatted datetime of the earliest time the job was added (inclusive). For example \"2008-08-24T12:00:00Z\". Will ignore cutoffHours if set.
endDateTime <- 'endDateTime_example' # character | ISO-formatted datetime of the latest time the job was added (inclusive). For example \"2008-08-24T12:00:00Z\".
batchPredictionJobDefinitionId <- 'batchPredictionJobDefinitionId_example' # character | Includes only jobs for this particular definition
hostname <- OneOfstringarray$new() # OneOfstringarray | Includes only jobs for this particular prediction instance hostname
intakeType <- 'intakeType_example' # character | Includes only jobs for this particular intake type
outputType <- 'outputType_example' # character | Includes only jobs for this particular output type

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsList(offset, limit, allJobs, status=status, source=source, deploymentId=deploymentId, jobId=jobId, orderBy=orderBy, cutoffHours=cutoffHours, startDateTime=startDateTime, endDateTime=endDateTime, batchPredictionJobDefinitionId=batchPredictionJobDefinitionId, hostname=hostname, intakeType=intakeType, outputType=outputType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsPatch}{}}}
\subsection{Method \code{BatchPredictionsPatch()}}{
Update a Batch Prediction job
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsPatch(
  predictionJobId,
  partNumber,
  batchPredictionJobUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionJobId}}{character. ID of the Batch Prediction job}

\item{\code{partNumber}}{integer. The number of which csv part is being uploaded when using multipart upload}

\item{\code{batchPredictionJobUpdate}}{\link{BatchPredictionJobUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If a job has finished execution regardless of the result, it can have parameters changed to ensure better filtering in the job list upon retrieval. Another case: updating job scoring status externally.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Job updated
\itemize{
}
\item \strong{\code{404}} Job does not exist or was not submitted to the queue.
\itemize{
}
\item \strong{\code{409}} Job cannot be hidden for some reason. Possible reasons: job is not in a deletable state.
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload
batchPredictionJobUpdate <- BatchPredictionJobUpdate$new() # BatchPredictionJobUpdate |

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsPatch(predictionJobId, partNumber, batchPredictionJobUpdate=batchPredictionJobUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchPredictionsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-BatchPredictionsRetrieve}{}}}
\subsection{Method \code{BatchPredictionsRetrieve()}}{
Retrieve Batch Prediction job
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$BatchPredictionsRetrieve(predictionJobId, partNumber, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionJobId}}{character. ID of the Batch Prediction job}

\item{\code{partNumber}}{integer. The number of which csv part is being uploaded when using multipart upload}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a Batch Prediction job.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Job details for the requested Batch Prediction job
\itemize{
}
}
}

\subsection{Returns}{
\link{BatchPredictionJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionJobId <- 'predictionJobId_example' # character | ID of the Batch Prediction job
partNumber <- 0 # integer | The number of which csv part is being uploaded when using multipart upload

api.instance <- PredictionsApi$new()
result <- api.instance$BatchPredictionsRetrieve(predictionJobId, partNumber)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputedTrainingPredictionsList"></a>}}
\if{latex}{\out{\hypertarget{method-ComputedTrainingPredictionsList}{}}}
\subsection{Method \code{ComputedTrainingPredictionsList()}}{
Retrieve training predictions
Produces: "application/json", "text/csv"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ComputedTrainingPredictionsList(
  offset,
  limit,
  projectId,
  predictionId,
  accept = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{projectId}}{character. Project ID to retrieve training predictions for}

\item{\code{predictionId}}{character. Prediction ID to retrieve training predictions for}

\item{\code{accept}}{Enum < \link{application/json, text/csv} > Requested MIME type for the returned data}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve training predictions that have previously been computed


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Training predictions encoded either as JSON or CSV
\itemize{
\item \strong{\code{ContentMinusType}} MIME type of the returned data
}
\item \strong{\code{404}} Job does not exist or is not completed
\itemize{
}
}
}

\subsection{Returns}{
\link{TrainingPredictionsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
projectId <- 'projectId_example' # character | Project ID to retrieve training predictions for
predictionId <- 'predictionId_example' # character | Prediction ID to retrieve training predictions for
accept <- 'accept_example' # character | Requested MIME type for the returned data

api.instance <- PredictionsApi$new()
result <- api.instance$ComputedTrainingPredictionsList(offset, limit, projectId, predictionId, accept=accept)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImportedModelsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ImportedModelsCreate}{}}}
\subsection{Method \code{ImportedModelsCreate()}}{
Import a previously exported DRX model to be served by SSE
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ImportedModelsCreate(singleModelFilePayload = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{singleModelFilePayload}}{\link{SingleModelFilePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This route can be used on-prem to put a given DRX model into file storage so that it can be served by a Standalone Scoring Engine (SSE). Please note however that for this to work SSE needs to be configured to use the same file storage as the main Datarbot application (namely, Public API).


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{400}} Submitted DRX file is missing or invalid
\itemize{
}
\item \strong{\code{403}} Admin permissions required
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
singleModelFilePayload <- SingleModelFilePayload$new() # SingleModelFilePayload |

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsCreate(singleModelFilePayload=singleModelFilePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImportedModelsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ImportedModelsDelete}{}}}
\subsection{Method \code{ImportedModelsDelete()}}{
Delete imported by from storage along with all its metadata
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ImportedModelsDelete(importId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{importId}}{character. Unique identifier of the imported model}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete previously imported DRX models from storage along with all its metadata. This deletion is permanent and cannot be reverted, but the one can export the original model and import it again.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Empty response means the model metadata was deleted successfully
\itemize{
}
\item \strong{\code{403}} Admin permissions required
\itemize{
}
\item \strong{\code{404}} Model does not exist or \"ENABLE_BINARY_MODEL_IMPORT\" is not enabled
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
importId <- 'importId_example' # character | Unique identifier of the imported model

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsDelete(importId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImportedModelsList"></a>}}
\if{latex}{\out{\hypertarget{method-ImportedModelsList}{}}}
\subsection{Method \code{ImportedModelsList()}}{
Lists imported models optionally filtering them by a string query
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ImportedModelsList(offset, limit, query = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of records to skip over. Non-negative, defaults to 0}

\item{\code{limit}}{integer. The number of records to return. Positive, defaults to 100}

\item{\code{query}}{character. A case-insensitive search term to filter returned models. The searchable fields are: `model_id`, `model_name`, `display_name`, `dataset_name`, `project_id`, `project_name`, `target`, `note`, `featurelist_name`, `created_by_id`, `created_by_username`. Search also looks at the first and last name of the user who imported the model. The partially matched models are counted, so for example the search term `train` would find models with name `TuesdayTrainingData`}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Lists imported models optionally filtering them by a string query.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of imported models matching query (if any)
\itemize{
}
\item \strong{\code{400}} Invalid argument
\itemize{
}
\item \strong{\code{403}} Admin permissions required
\itemize{
}
\item \strong{\code{404}} Model does not exist or \"ENABLE_BINARY_MODEL_IMPORT\" is not enabled
\itemize{
}
}
}

\subsection{Returns}{
\link{ImportedModelListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of records to skip over. Non-negative, defaults to 0
limit <- 100 # integer | The number of records to return. Positive, defaults to 100
query <- 'query_example' # character | A case-insensitive search term to filter returned models. The searchable fields are: `model_id`, `model_name`, `display_name`, `dataset_name`, `project_id`, `project_name`, `target`, `note`, `featurelist_name`, `created_by_id`, `created_by_username`. Search also looks at the first and last name of the user who imported the model. The partially matched models are counted, so for example the search term `train` would find models with name `TuesdayTrainingData`

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsList(offset, limit, query=query)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImportedModelsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ImportedModelsPatch}{}}}
\subsection{Method \code{ImportedModelsPatch()}}{
Allows updating some of the imported DRX model metadata fields
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ImportedModelsPatch(
  importId,
  imortedModelUpdatePayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{importId}}{character. Unique identifier of the imported model}

\item{\code{imortedModelUpdatePayload}}{\link{ImortedModelUpdatePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update some of the imported DRX model metadata fields.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Empty response means the model metadata was updated successfully
\itemize{
}
\item \strong{\code{403}} Admin permissions required
\itemize{
}
\item \strong{\code{404}} Model does not exist or \"ENABLE_BINARY_MODEL_IMPORT\" is not enabled
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
importId <- 'importId_example' # character | Unique identifier of the imported model
imortedModelUpdatePayload <- ImortedModelUpdatePayload$new() # ImortedModelUpdatePayload |

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsPatch(importId, imortedModelUpdatePayload=imortedModelUpdatePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImportedModelsPut"></a>}}
\if{latex}{\out{\hypertarget{method-ImportedModelsPut}{}}}
\subsection{Method \code{ImportedModelsPut()}}{
Replace an already imported DRX model with a new one
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ImportedModelsPut(importId, singleModelFilePayload = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{importId}}{character. Unique identifier of the imported model}

\item{\code{singleModelFilePayload}}{\link{SingleModelFilePayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Replace an already imported model. The model specified by `importId` will be replaced with the model binary provided and the old model will no longer be available at this location.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{400}} Submitted DRX file is missing or invalid
\itemize{
}
\item \strong{\code{403}} Admin permissions required
\itemize{
}
\item \strong{\code{404}} Model does not exist or \"ENABLE_BINARY_MODEL_IMPORT\" is not enabled
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
importId <- 'importId_example' # character | Unique identifier of the imported model
singleModelFilePayload <- SingleModelFilePayload$new() # SingleModelFilePayload |

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsPut(importId, singleModelFilePayload=singleModelFilePayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImportedModelsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ImportedModelsRetrieve}{}}}
\subsection{Method \code{ImportedModelsRetrieve()}}{
Get imported DRX model details
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ImportedModelsRetrieve(importId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{importId}}{character. Unique identifier of the imported model}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve imported model metadata.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Imported DRX details
\itemize{
}
\item \strong{\code{403}} Admin permissions required
\itemize{
}
\item \strong{\code{404}} Model does not exist or \"ENABLE_BINARY_MODEL_IMPORT\" is not enabled
\itemize{
}
}
}

\subsection{Returns}{
\link{ImportedModelRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
importId <- 'importId_example' # character | Unique identifier of the imported model

api.instance <- PredictionsApi$new()
result <- api.instance$ImportedModelsRetrieve(importId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsPredictionExplanationsInitializationCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsPredictionExplanationsInitializationCreate}{}}}
\subsection{Method \code{ProjectsModelsPredictionExplanationsInitializationCreate()}}{
Create a new prediction explanations initialization.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsModelsPredictionExplanationsInitializationCreate(
  projectId,
  modelId,
  predictionExplanationsInitializationCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{predictionExplanationsInitializationCreate}}{\link{PredictionExplanationsInitializationCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new prediction explanations initialization. This is a necessary prerequisite for generating prediction explanations.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The request was accepted and will be worked on.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
predictionExplanationsInitializationCreate <- PredictionExplanationsInitializationCreate$new() # PredictionExplanationsInitializationCreate |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationCreate(projectId, modelId, predictionExplanationsInitializationCreate=predictionExplanationsInitializationCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsPredictionExplanationsInitializationDeleteMany"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsPredictionExplanationsInitializationDeleteMany}{}}}
\subsection{Method \code{ProjectsModelsPredictionExplanationsInitializationDeleteMany()}}{
Delete an existing PredictionExplanationsInitialization.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsModelsPredictionExplanationsInitializationDeleteMany(
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete an existing PredictionExplanationsInitialization.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The deletion was successful.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationDeleteMany(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsPredictionExplanationsInitializationList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsPredictionExplanationsInitializationList}{}}}
\subsection{Method \code{ProjectsModelsPredictionExplanationsInitializationList()}}{
Retrieve the current PredictionExplanationsInitialization.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsModelsPredictionExplanationsInitializationList(
  projectId,
  modelId,
  excludeAdjustedPredictions = "true",
  predictionExplanationsInitializationRetrieve = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{excludeAdjustedPredictions}}{Enum < \link{false, False, true, True} > Whether to include adjusted prediction in the PredictionExplanationsSample response.}

\item{\code{predictionExplanationsInitializationRetrieve}}{\link{PredictionExplanationsInitializationRetrieve}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the current PredictionExplanationsInitialization. A PredictionExplanationsInitialization is a pre-requisite for successfully computing prediction explanations using a particular model, and can be used to preview the prediction explanations that would be generated for a complete dataset.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID
excludeAdjustedPredictions <- "true" # character | Whether to include adjusted prediction in the PredictionExplanationsSample response.
predictionExplanationsInitializationRetrieve <- PredictionExplanationsInitializationRetrieve$new() # PredictionExplanationsInitializationRetrieve |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsModelsPredictionExplanationsInitializationList(projectId, modelId, excludeAdjustedPredictions=excludeAdjustedPredictions, predictionExplanationsInitializationRetrieve=predictionExplanationsInitializationRetrieve)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictJobsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictJobsDelete}{}}}
\subsection{Method \code{ProjectsPredictJobsDelete()}}{
Cancel a queued prediction job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictJobsDelete(projectId, jobId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{jobId}}{character. The job ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Cancel a queued prediction job


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The job has been successfully cancelled
\itemize{
}
\item \strong{\code{404}} Job was not found or the job has already completed
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
jobId <- 'jobId_example' # character | The job ID

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictJobsDelete(projectId, jobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictJobsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictJobsList}{}}}
\subsection{Method \code{ProjectsPredictJobsList()}}{
List all prediction jobs for a project
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictJobsList(projectId, status = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{status}}{Enum < \link{queue, inprogress, error} > If provided, only jobs with the same status will be included in the results; otherwise, queued and inprogress jobs (but not errored jobs) will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all prediction jobs for a project


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of prediction jobs for a project
\itemize{
}
\item \strong{\code{404}} Job was not found
\itemize{
}
}
}

\subsection{Returns}{
list( \link{PredictJobDetailsResponse} )
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
status <- 'status_example' # character | If provided, only jobs with the same status will be included in the results; otherwise, queued and inprogress jobs (but not errored jobs) will be returned.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictJobsList(projectId, status=status)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictJobsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictJobsRetrieve}{}}}
\subsection{Method \code{ProjectsPredictJobsRetrieve()}}{
Look up a particular prediction job
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictJobsRetrieve(projectId, jobId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{jobId}}{character. The job ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Look up a particular prediction job


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The job has been successfully retrieved and has not yet finished.
\itemize{
\item \strong{\code{Location}} present only when the requested job has finished - contains a url from which the completed predictions may be retrieved as with :http:get:`/api/v2/projects/(projectId)/predictions/(predictionId)/`
}
\item \strong{\code{303}} The job has been successfully retrieved and has been completed. See Location header. The response json is also included.
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictJobDetailsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
jobId <- 'jobId_example' # character | The job ID

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictJobsRetrieve(projectId, jobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionDatasetsDataSourceUploadsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionDatasetsDataSourceUploadsCreate}{}}}
\subsection{Method \code{ProjectsPredictionDatasetsDataSourceUploadsCreate()}}{
Upload a dataset for predictions from a ``DataSource``.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionDatasetsDataSourceUploadsCreate(
  projectId,
  predictionDataSource = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID to which the data source will be uploaded to.}

\item{\code{predictionDataSource}}{\link{PredictionDataSource}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Upload a dataset for predictions from a ``DataSource``.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Upload successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID to which the data source will be uploaded to.
predictionDataSource <- PredictionDataSource$new() # PredictionDataSource |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsDataSourceUploadsCreate(projectId, predictionDataSource=predictionDataSource)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionDatasetsDatasetUploadsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionDatasetsDatasetUploadsCreate}{}}}
\subsection{Method \code{ProjectsPredictionDatasetsDatasetUploadsCreate()}}{
Create prediction dataset
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionDatasetsDatasetUploadsCreate(
  projectId,
  predictionFromCatalogDataset = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{predictionFromCatalogDataset}}{\link{PredictionFromCatalogDataset}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a prediction dataset from a Dataset Item in the catalog.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Creation has successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
\item \strong{\code{422}} Target not set yet or cannot specify time series options with a non time series project.
\itemize{
}
}
}

\subsection{Returns}{
\link{CreatePredictionDatasetResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
predictionFromCatalogDataset <- PredictionFromCatalogDataset$new() # PredictionFromCatalogDataset |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsDatasetUploadsCreate(projectId, predictionFromCatalogDataset=predictionFromCatalogDataset)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionDatasetsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionDatasetsDelete}{}}}
\subsection{Method \code{ProjectsPredictionDatasetsDelete()}}{
Delete a dataset that was uploaded for prediction.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionDatasetsDelete(projectId, datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID that owns the data.}

\item{\code{datasetId}}{character. The dataset ID to delete.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a dataset that was uploaded for prediction.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The dataset has been successfully deleted.
\itemize{
}
\item \strong{\code{404}} No dataset with the specified `datasetId` found.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID that owns the data.
datasetId <- 'datasetId_example' # character | The dataset ID to delete.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsDelete(projectId, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionDatasetsFileUploadsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionDatasetsFileUploadsCreate}{}}}
\subsection{Method \code{ProjectsPredictionDatasetsFileUploadsCreate()}}{
Upload a file for predictions from an attached file.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionDatasetsFileUploadsCreate(
  projectId,
  predictionFileUpload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID to which the data will be uploaded for prediction.}

\item{\code{predictionFileUpload}}{\link{PredictionFileUpload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Upload a file for predictions from an attached file.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Upload successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID to which the data will be uploaded for prediction.
predictionFileUpload <- PredictionFileUpload$new() # PredictionFileUpload |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsFileUploadsCreate(projectId, predictionFileUpload=predictionFileUpload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionDatasetsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionDatasetsList}{}}}
\subsection{Method \code{ProjectsPredictionDatasetsList()}}{
List predictions datasets uploaded to a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionDatasetsList(offset, limit, projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned. If 0, all results.}

\item{\code{projectId}}{character. The project ID to query.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List predictions datasets uploaded to a project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Request to list the uploaded predictions datasets was successful.
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictionDatasetListControllerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped.
limit <- 0 # integer | At most this many results are returned. If 0, all results.
projectId <- 'projectId_example' # character | The project ID to query.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsList(offset, limit, projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionDatasetsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionDatasetsRetrieve}{}}}
\subsection{Method \code{ProjectsPredictionDatasetsRetrieve()}}{
Get the metadata of a specific dataset. This only works for datasets uploaded to an existing project for prediction.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionDatasetsRetrieve(projectId, datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID that owns the data.}

\item{\code{datasetId}}{character. The dataset ID to query for.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get the metadata of a specific dataset. This only works for datasets uploaded to an existing project for prediction.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Request to retrieve the metadata of a specified dataset was successful.
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictionDatasetRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID that owns the data.
datasetId <- 'datasetId_example' # character | The dataset ID to query for.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsRetrieve(projectId, datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionDatasetsUrlUploadsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionDatasetsUrlUploadsCreate}{}}}
\subsection{Method \code{ProjectsPredictionDatasetsUrlUploadsCreate()}}{
Upload a file for predictions from a URL.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionDatasetsUrlUploadsCreate(
  projectId,
  predictionUrlUpload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID to which the data will be uploaded for prediction.}

\item{\code{predictionUrlUpload}}{\link{PredictionURLUpload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Upload a file for predictions from a URL.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Upload successfully started. See the Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID to which the data will be uploaded for prediction.
predictionUrlUpload <- PredictionURLUpload$new() # PredictionURLUpload |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionDatasetsUrlUploadsCreate(projectId, predictionUrlUpload=predictionUrlUpload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsCreate}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsCreate()}}{
Create a new PredictionExplanations object (and its accompanying PredictionExplanationsRecord).
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionExplanationsCreate(
  projectId,
  predictionExplanationsCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{predictionExplanationsCreate}}{\link{PredictionExplanationsCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new PredictionExplanations object (and its accompanying PredictionExplanationsRecord). In order to successfully create PredictionExplanations for a particular model and dataset, you must first - Compute feature impact for the model via :http:post:`/api/v2/projects/(projectId)/models/(modelId)/featureImpact/` - Compute a PredictionExplanationsInitialization for the model via :http:post:`/api/v2/projects/(projectId)/models/(modelId)/predictionExplanationsInitialization/` - Compute predictions for the model and dataset via :http:post:`/api/v2/projects/(projectId)/predictions/` `thresholdHigh` and `thresholdLow` are optional filters applied to speed up computation. When at least one is specified, only the selected outlier rows will have prediction explanations computed. Rows are considered to be outliers if their predicted value (in case of regression projects) or probability of being the positive class (in case of classification projects) isless than `thresholdLow` or greater than `thresholdHigh`. If neither is specified, prediction explanations will be computed for all rows.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} The request was accepted and will be worked on.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsCreate <- PredictionExplanationsCreate$new() # PredictionExplanationsCreate |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsCreate(projectId, predictionExplanationsCreate=predictionExplanationsCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsList}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsList()}}{
Retrieve stored Prediction Explanations.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionExplanationsList(
  limit,
  projectId,
  predictionExplanationsId,
  offset = 0,
  excludeAdjustedPredictions = "true",
  predictionExplanationsRetrieve = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{integer. At most this many results are returned. The default may change and a new maximum limit may be imposed without notice.}

\item{\code{projectId}}{character. The project ID}

\item{\code{predictionExplanationsId}}{character. The ID of the PredictionExplanationsRecord to retrieve.}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{excludeAdjustedPredictions}}{Enum < \link{false, False, true, True} > Whether to include adjusted prediction in PredictionExplanationsRow response.}

\item{\code{predictionExplanationsRetrieve}}{\link{PredictionExplanationsRetrieve}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve stored Prediction Explanations. Each PredictionExplanationsRow retrieved corresponds to a row of the prediction dataset, although some rows may not have had prediction explanations computed depending on the thresholds selected.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
limit <- 3000 # integer | At most this many results are returned. The default may change and a new maximum limit may be imposed without notice.
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.
offset <- 0 # integer | This many results will be skipped.
excludeAdjustedPredictions <- "true" # character | Whether to include adjusted prediction in PredictionExplanationsRow response.
predictionExplanationsRetrieve <- PredictionExplanationsRetrieve$new() # PredictionExplanationsRetrieve |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsList(limit, projectId, predictionExplanationsId, offset=offset, excludeAdjustedPredictions=excludeAdjustedPredictions, predictionExplanationsRetrieve=predictionExplanationsRetrieve)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsRecordsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsRecordsDelete}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsRecordsDelete()}}{
Delete saved Prediction Explanations.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionExplanationsRecordsDelete(
  projectId,
  predictionExplanationsId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{predictionExplanationsId}}{character. The ID of the PredictionExplanationsRecord to retrieve.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete saved Prediction Explanations. Deletes both the actual prediction explanations and the corresponding PredictionExplanationsRecord.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The object was deleted successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsDelete(projectId, predictionExplanationsId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsRecordsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsRecordsList}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsRecordsList()}}{
List PredictionExplanationsRecord objects for a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionExplanationsRecordsList(
  projectId,
  offset = 0,
  limit = 100,
  modelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{modelId}}{character. If specified, only prediction explanations records computed for this model will be returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List PredictionExplanationsRecord objects for a project. These contain metadata about the computed prediction explanations and the location at which the PredictionExplanations can be retrieved.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The object was found and returned successfully.
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictionExplanationsRecordList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.
modelId <- 'modelId_example' # character | If specified, only prediction explanations records computed for this model will be returned.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsList(projectId, offset=offset, limit=limit, modelId=modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionExplanationsRecordsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionExplanationsRecordsRetrieve}{}}}
\subsection{Method \code{ProjectsPredictionExplanationsRecordsRetrieve()}}{
Retrieve a PredictionExplanationsRecord object.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionExplanationsRecordsRetrieve(
  projectId,
  predictionExplanationsId,
  predictionExplanationsRecord = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{predictionExplanationsId}}{character. The ID of the PredictionExplanationsRecord to retrieve.}

\item{\code{predictionExplanationsRecord}}{\link{PredictionExplanationsRecord}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a PredictionExplanationsRecord object. A PredictionExplanationsRecord contains metadata about the computed prediction explanations and the location at which the PredictionExplanations can be retrieved.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The object was found and returned successfully.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
predictionExplanationsId <- 'predictionExplanationsId_example' # character | The ID of the PredictionExplanationsRecord to retrieve.
predictionExplanationsRecord <- PredictionExplanationsRecord$new() # PredictionExplanationsRecord |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionExplanationsRecordsRetrieve(projectId, predictionExplanationsId, predictionExplanationsRecord=predictionExplanationsRecord)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionsCreate}{}}}
\subsection{Method \code{ProjectsPredictionsCreate()}}{
Make new predictions.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionsCreate(
  projectId,
  contentType,
  createPredictionFromDataset = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project to make predictions within.}

\item{\code{contentType}}{Enum < \link{application/json, multipart/form-data} > Content types available for making request. `multipart/form-data` is the legacy deprecated method to send the small file with the prediction request.}

\item{\code{createPredictionFromDataset}}{\link{CreatePredictionFromDataset}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
There are two ways of making predictions.  The recommended way is to first upload your dataset to the project, and then using the corresponding datasetId, predict against that dataset. To follow that pattern, send the json request body.  Note that requesting prediction intervals will automatically trigger backtesting if backtests were not already completed for this model.  The legacy method which is deprecated is to send the file directly with the predictions request.  If you need to predict against a file 10MB in size or larger, you will be required to use the above workflow for uploaded datasets. However, the following multipart/form-data can be used with small files:  :form file: a dataset to make predictions on :form modelId: the model to use to make predictions  .. note:: If using the legacy method of uploading data to this endpoint, a new dataset    will be created behind the scenes. For performance reasons, it would be much better    to utilize the workflow of creating the dataset first and using the supported method    of making predictions of this endpoint. However, to preserve the functionality of    existing workflows, the legacy method still exists.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Prediction has successfully been requested. See Location header.
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status of the predictions as with :http:get:`/api/v2/projects/(projectId)/predictJobs/(jobId)/`
}
\item \strong{\code{422}} The request cannot be processed.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project to make predictions within.
contentType <- 'contentType_example' # character | Content types available for making request. `multipart/form-data` is the legacy deprecated method to send the small file with the prediction request.
createPredictionFromDataset <- CreatePredictionFromDataset$new() # CreatePredictionFromDataset |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsCreate(projectId, contentType, createPredictionFromDataset=createPredictionFromDataset)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionsList}{}}}
\subsection{Method \code{ProjectsPredictionsList()}}{
Get a list of prediction records.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionsList(
  offset,
  limit,
  projectId,
  datasetId = NULL,
  modelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned. To specify no limit, use 0. The default may change and a maximum limit may be imposed without notice.}

\item{\code{projectId}}{character. The project of the predictions.}

\item{\code{datasetId}}{character. Dataset id used to create the predictions}

\item{\code{modelId}}{character. Model id}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of prediction records.  .. deprecated:: v2.21     Use :http:get:`/api/v2/projects/(projectId)/predictionsMetadata/` instead. The only     difference is that parameter `datasetId` is renamed to `predictionDatasetId`     both in request and response.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The json array of prediction metadata objects.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrieveListPredictionMetadataObjectsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 1000 # integer | At most this many results are returned. To specify no limit, use 0. The default may change and a maximum limit may be imposed without notice.
projectId <- 'projectId_example' # character | The project of the predictions.
datasetId <- 'datasetId_example' # character | Dataset id used to create the predictions
modelId <- 'modelId_example' # character | Model id

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsList(offset, limit, projectId, datasetId=datasetId, modelId=modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionsMetadataList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionsMetadataList}{}}}
\subsection{Method \code{ProjectsPredictionsMetadataList()}}{
Get a list of prediction metadata records.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionsMetadataList(
  offset,
  limit,
  projectId,
  predictionDatasetId = NULL,
  modelId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned. To specify no limit, use 0. The default may change and a maximum limit may be imposed without notice.}

\item{\code{projectId}}{character. The project of the predictions.}

\item{\code{predictionDatasetId}}{character. Dataset id used to create the predictions}

\item{\code{modelId}}{character. Model id}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Use the ID of a metadata object to get the complete set of predictions.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The json array of prediction metadata objects.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrieveListPredictionMetadataObjectsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 1000 # integer | At most this many results are returned. To specify no limit, use 0. The default may change and a maximum limit may be imposed without notice.
projectId <- 'projectId_example' # character | The project of the predictions.
predictionDatasetId <- 'predictionDatasetId_example' # character | Dataset id used to create the predictions
modelId <- 'modelId_example' # character | Model id

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsMetadataList(offset, limit, projectId, predictionDatasetId=predictionDatasetId, modelId=modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionsMetadataRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionsMetadataRetrieve}{}}}
\subsection{Method \code{ProjectsPredictionsMetadataRetrieve()}}{
Retrieve metadata for a set of predictions.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionsMetadataRetrieve(
  predictionId,
  projectId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionId}}{character. The id of the prediction record to retrieve. If you have the jobId, you can retrieve the predictionId using :http:get:`/api/v2/projects/(projectId)/predictJobs/(jobId)/`.}

\item{\code{projectId}}{character. The id of the project the prediction belongs to.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Use the ID of a metadata object to get the complete set of predictions.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Prediction metadata object.
\itemize{
}
\item \strong{\code{404}} Training predictions not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{RetrievePredictionMetadataObject}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionId <- 'predictionId_example' # character | The id of the prediction record to retrieve. If you have the jobId, you can retrieve the predictionId using :http:get:`/api/v2/projects/(projectId)/predictJobs/(jobId)/`.
projectId <- 'projectId_example' # character | The id of the project the prediction belongs to.

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsMetadataRetrieve(predictionId, projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsPredictionsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsPredictionsRetrieve}{}}}
\subsection{Method \code{ProjectsPredictionsRetrieve()}}{
Get a completed set of predictions.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsPredictionsRetrieve(
  predictionId,
  projectId,
  shapMulticlassLevel = NULL,
  accept = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{predictionId}}{character. The id of the prediction record to retrieve. If you have the jobId, you can retrieve the predictionId using :http:get:`/api/v2/projects/(projectId)/predictJobs/(jobId)/`.}

\item{\code{projectId}}{character. The id of the project the prediction belongs to.}

\item{\code{shapMulticlassLevel}}{character. Required in multiclass projects with SHAP prediction explanations. This parameter specifies which of the target classes (levels) you would like to retrieve explanations for. This will NOT affect a non-multiclass project.}

\item{\code{accept}}{Enum < \link{application/json, text/csv} > Requested MIME type for the returned data}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve predictions that have previously been computed. Training predictions encoded either as JSON or CSV. If CSV output was requested, the returned CSV data will contain the following columns:  * For regression projects: `row_id` and `prediction`. * For binary classification projects: `row_id`, `prediction`,   `class_<positive_class_label>` and `class_<negative_class_label>`. * For multiclass projects: `row_id`, `prediction` and a   `class_<class_label>` for each class. * For multilabel projects: `row_id` and for each class   `prediction_<class_label>` and `class_<class_label>`. * For time-series, these additional columns will be added: `forecast_point`,   `forecast_distance`, `timestamp`, and `series_id`.  .. minversion:: v2.21      * If `explanationAlgorithm` = 'shap', these additional columns will be added:       triplets of (`Explanation_<i>\emph{feature_name`,       `Explanation}<i>\emph{feature_value`, and `Explanation}<i>_strength`) for `i` ranging       from 1 to `maxExplanations`, `shap_remaining_total` and `shap_base_value`. Binary       classification projects will also have `explained_class`, the class for which       positive SHAP values imply an increased probability.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Predictions that have previously been computed.
\itemize{
\item \strong{\code{ContentMinusType}} MIME type of the returned data
}
\item \strong{\code{404}} No prediction data found.
\itemize{
}
}
}

\subsection{Returns}{
\link{PredictionRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
predictionId <- 'predictionId_example' # character | The id of the prediction record to retrieve. If you have the jobId, you can retrieve the predictionId using :http:get:`/api/v2/projects/(projectId)/predictJobs/(jobId)/`.
projectId <- 'projectId_example' # character | The id of the project the prediction belongs to.
shapMulticlassLevel <- 'shapMulticlassLevel_example' # character | Required in multiclass projects with SHAP prediction explanations. This parameter specifies which of the target classes (levels) you would like to retrieve explanations for. This will NOT affect a non-multiclass project.
accept <- 'accept_example' # character | Requested MIME type for the returned data

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsPredictionsRetrieve(predictionId, projectId, shapMulticlassLevel=shapMulticlassLevel, accept=accept)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsTrainingPredictionsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsTrainingPredictionsCreate}{}}}
\subsection{Method \code{ProjectsTrainingPredictionsCreate()}}{
Submits a job to compute predictions for training data
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ProjectsTrainingPredictionsCreate(
  projectId,
  createTrainingPrediction = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. Project ID to compute training predictions for}

\item{\code{createTrainingPrediction}}{\link{CreateTrainingPrediction}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create training data predictions


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Submitted successfully. See Location header.
\itemize{
\item \strong{\code{Location}} URL for tracking async job status.
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project ID to compute training predictions for
createTrainingPrediction <- CreateTrainingPrediction$new() # CreateTrainingPrediction |

api.instance <- PredictionsApi$new()
result <- api.instance$ProjectsTrainingPredictionsCreate(projectId, createTrainingPrediction=createTrainingPrediction)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScheduledJobsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ScheduledJobsDelete}{}}}
\subsection{Method \code{ScheduledJobsDelete()}}{
Delete scheduled job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ScheduledJobsDelete(jobId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{jobId}}{character. The ID of the job being requested.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete scheduled job


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Job deleted
\itemize{
}
\item \strong{\code{404}} Job was not found
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
jobId <- 'jobId_example' # character | The ID of the job being requested.

api.instance <- PredictionsApi$new()
result <- api.instance$ScheduledJobsDelete(jobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScheduledJobsList"></a>}}
\if{latex}{\out{\hypertarget{method-ScheduledJobsList}{}}}
\subsection{Method \code{ScheduledJobsList()}}{
List scheduled deployment batch prediction jobs a user can view
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ScheduledJobsList(
  offset,
  limit,
  orderBy = "name",
  search = "",
  deploymentId = NULL,
  typeId = "predictionIntegration",
  integrationTypeName = NULL,
  queryByUser = "createdBy",
  filterEnabled = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of scheduled jobs to skip. Defaults to 0.}

\item{\code{limit}}{integer. The number of scheduled jobs (max 100) to return. Defaults to 20}

\item{\code{orderBy}}{character. The order to sort the scheduled jobs. Defaults to order by last successful run timestamp in descending order.}

\item{\code{search}}{character. Case insensitive search against scheduled jobs name or type name.}

\item{\code{deploymentId}}{character. Filter by the prediction integration deployment ID. Ignored for non prediction integration type ID.}

\item{\code{typeId}}{Enum < \link{predictionIntegration, datasetRefresh} > filter by scheduled job type ID.}

\item{\code{integrationTypeName}}{Enum < \link{sql, tableau, snowflake, kdb} > filter by integration type name.}

\item{\code{queryByUser}}{Enum < \link{createdBy, updatedBy} > Which user field to filter with.}

\item{\code{filterEnabled}}{Enum < \link{false, False, true, True} > Filter jobs using the enabled field. If `true`, only enabled jobs are returned, otherwise if `false`, only disabled jobs are returned. The default returns both enabled and disabled jobs.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of scheduled batch prediction jobs a user can view


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of scheduled batch prediction jobs
\itemize{
}
}
}

\subsection{Returns}{
\link{ScheduledJobsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of scheduled jobs to skip. Defaults to 0.
limit <- 20 # integer | The number of scheduled jobs (max 100) to return. Defaults to 20
orderBy <- "name" # character | The order to sort the scheduled jobs. Defaults to order by last successful run timestamp in descending order.
search <- "" # character | Case insensitive search against scheduled jobs name or type name.
deploymentId <- 'deploymentId_example' # character | Filter by the prediction integration deployment ID. Ignored for non prediction integration type ID.
typeId <- "predictionIntegration" # character | filter by scheduled job type ID.
integrationTypeName <- 'integrationTypeName_example' # character | filter by integration type name.
queryByUser <- "createdBy" # character | Which user field to filter with.
filterEnabled <- 'filterEnabled_example' # character | Filter jobs using the enabled field. If `true`, only enabled jobs are returned, otherwise if `false`, only disabled jobs are returned. The default returns both enabled and disabled jobs.

api.instance <- PredictionsApi$new()
result <- api.instance$ScheduledJobsList(offset, limit, orderBy=orderBy, search=search, deploymentId=deploymentId, typeId=typeId, integrationTypeName=integrationTypeName, queryByUser=queryByUser, filterEnabled=filterEnabled)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScheduledJobsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ScheduledJobsPatch}{}}}
\subsection{Method \code{ScheduledJobsPatch()}}{
Run or stop a previously created scheduled integration job
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ScheduledJobsPatch(jobId, scheduledJobRunStop = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{jobId}}{character. The ID of the job being requested.}

\item{\code{scheduledJobRunStop}}{\link{ScheduledJobRunStop}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Run or stop a previously created scheduled integration job


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Job was either started or stopped
\itemize{
}
\item \strong{\code{403}} User does not have permission to run the job
\itemize{
}
\item \strong{\code{404}} Scheduled job does not exist
\itemize{
}
\item \strong{\code{422}} Scheduled job is already stopped or is already running
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
jobId <- 'jobId_example' # character | The ID of the job being requested.
scheduledJobRunStop <- ScheduledJobRunStop$new() # ScheduledJobRunStop |

api.instance <- PredictionsApi$new()
result <- api.instance$ScheduledJobsPatch(jobId, scheduledJobRunStop=scheduledJobRunStop)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScheduledJobsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ScheduledJobsRetrieve}{}}}
\subsection{Method \code{ScheduledJobsRetrieve()}}{
List a single deployment batch prediction job
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$ScheduledJobsRetrieve(jobId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{jobId}}{character. The ID of the job being requested.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a scheduled batch prediction job


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A scheduled batch prediction job
\itemize{
}
}
}

\subsection{Returns}{
\link{ScheduledJobResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
jobId <- 'jobId_example' # character | The ID of the job being requested.

api.instance <- PredictionsApi$new()
result <- api.instance$ScheduledJobsRetrieve(jobId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TrainingPredictionsList"></a>}}
\if{latex}{\out{\hypertarget{method-TrainingPredictionsList}{}}}
\subsection{Method \code{TrainingPredictionsList()}}{
List training prediction jobs
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$TrainingPredictionsList(offset, limit, projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{projectId}}{character. Project ID to retrieve training predictions for}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of training prediction records


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of training prediction jobs
\itemize{
}
}
}

\subsection{Returns}{
\link{TrainingPredictionsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 0 # integer | At most this many results are returned
projectId <- 'projectId_example' # character | Project ID to retrieve training predictions for

api.instance <- PredictionsApi$new()
result <- api.instance$TrainingPredictionsList(offset, limit, projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PredictionsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
