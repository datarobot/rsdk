% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/images_api.R
\docType{class}
\name{ImagesApi}
\alias{ImagesApi}
\title{Images operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Images
}
\examples{

## ------------------------------------------------
## Method `ImagesApi$DatasetsImagesDataQualityLogFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset

api.instance <- ImagesApi$new()
result <- api.instance$DatasetsImagesDataQualityLogFileList(datasetId)
}

## ------------------------------------------------
## Method `ImagesApi$DatasetsImagesDataQualityLogList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$DatasetsImagesDataQualityLogList(datasetId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationListsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
imageAugmentationCreateList <- ImageAugmentationCreateList$new() # ImageAugmentationCreateList | 

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsCreate(imageAugmentationCreateList=imageAugmentationCreateList)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationListsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list to fetch

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsDelete(augmentationId)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationListsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project ID to retrieve augmentation lists from
offset <- 0 # integer | This many results will be skipped
limit <- 100 # integer | At most this many results are returned. To specify no limit, use 0. The default may change without notice.
featureName <- 'featureName_example' # character | Name of the image feature that the augmentation list is associated with

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsList(projectId, offset, limit, featureName=featureName)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationListsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list to fetch
imageAugmentationListPatchParam <- ImageAugmentationListPatchParam$new() # ImageAugmentationListPatchParam | 

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsPatch(augmentationId, imageAugmentationListPatchParam=imageAugmentationListPatchParam)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationListsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list to fetch

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsRetrieve(augmentationId)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationListsSamplesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list
imageAugmentationListsCreateSamples <- ImageAugmentationListsCreateSamples$new() # ImageAugmentationListsCreateSamples | 

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsSamplesCreate(augmentationId, imageAugmentationListsCreateSamples=imageAugmentationListsCreateSamples)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationListsSamplesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsSamplesList(augmentationId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationOptionsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationOptionsRetrieve(projectId)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationSamplesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
imageAugmentationSamplesRequest <- ImageAugmentationSamplesRequest$new() # ImageAugmentationSamplesRequest | 

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationSamplesCreate(imageAugmentationSamplesRequest=imageAugmentationSamplesRequest)
}

## ------------------------------------------------
## Method `ImagesApi$ImageAugmentationSamplesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
samplesId <- 'samplesId_example' # character | Id of the augmentation sample
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationSamplesList(samplesId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsDuplicateImagesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
column <- 'column_example' # character | Column parameter to filter the list of duplicate images returned
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsDuplicateImagesList(projectId, column, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImageActivationMapsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | The number of items to skip over.
limit <- 100 # integer | The number of items to return.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImageActivationMapsList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImageBinsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the image feature
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImageBinsList(featureName, projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImageEmbeddingsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | The number of items to skip over.
limit <- 100 # integer | The number of items to return.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImageEmbeddingsList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImageSamplesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the image feature
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImageSamplesList(featureName, projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImagesDataQualityLogFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesDataQualityLogFileList(projectId)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImagesDataQualityLogList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesDataQualityLogList(projectId, offset=offset, limit=limit)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImagesFileList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
imageId <- 'imageId_example' # character | Id of the image

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesFileList(projectId, imageId)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImagesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 100 # integer | At most this many results are returned
projectId <- 'projectId_example' # character | The project ID
column <- 'column_example' # character | Name of the column to query
targetValue <- 'targetValue_example' # AnyOfnumberstring | For classification projects - when specified, only images corresponding to this target value will be returned. Mutually exclusive with targetBinStart/targetBinEnd.
targetBinStart <- 'targetBinStart_example' # AnyOfnumberstring | For regression projects - when specified, only images corresponding to the target values above this will be returned. Mutually exclusive with targetValue. Must be specified with targetBinEnd.
targetBinEnd <- 'targetBinEnd_example' # AnyOfnumberstring | For regression projects - when specified, only images corresponding to the target values below this will be returned. Mutually exclusive with targetValue. Must be specified with targetBinStart.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesList(offset, limit, projectId, column=column, targetValue=targetValue, targetBinStart=targetBinStart, targetBinEnd=targetBinEnd)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsImagesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
imageId <- 'imageId_example' # character | Id of the image

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesRetrieve(projectId, imageId)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsModelsImageActivationMapsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsModelsImageActivationMapsCreate(projectId, modelId)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsModelsImageActivationMapsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the feature to query
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsModelsImageActivationMapsList(featureName, projectId, modelId)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsModelsImageEmbeddingsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsModelsImageEmbeddingsCreate(projectId, modelId)
}

## ------------------------------------------------
## Method `ImagesApi$ProjectsModelsImageEmbeddingsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the feature to query
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsModelsImageEmbeddingsList(featureName, projectId, modelId)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ImagesApi-new}{\code{ImagesApi$new()}}
\item \href{#method-ImagesApi-DatasetsImagesDataQualityLogFileList}{\code{ImagesApi$DatasetsImagesDataQualityLogFileList()}}
\item \href{#method-ImagesApi-DatasetsImagesDataQualityLogList}{\code{ImagesApi$DatasetsImagesDataQualityLogList()}}
\item \href{#method-ImagesApi-ImageAugmentationListsCreate}{\code{ImagesApi$ImageAugmentationListsCreate()}}
\item \href{#method-ImagesApi-ImageAugmentationListsDelete}{\code{ImagesApi$ImageAugmentationListsDelete()}}
\item \href{#method-ImagesApi-ImageAugmentationListsList}{\code{ImagesApi$ImageAugmentationListsList()}}
\item \href{#method-ImagesApi-ImageAugmentationListsPatch}{\code{ImagesApi$ImageAugmentationListsPatch()}}
\item \href{#method-ImagesApi-ImageAugmentationListsRetrieve}{\code{ImagesApi$ImageAugmentationListsRetrieve()}}
\item \href{#method-ImagesApi-ImageAugmentationListsSamplesCreate}{\code{ImagesApi$ImageAugmentationListsSamplesCreate()}}
\item \href{#method-ImagesApi-ImageAugmentationListsSamplesList}{\code{ImagesApi$ImageAugmentationListsSamplesList()}}
\item \href{#method-ImagesApi-ImageAugmentationOptionsRetrieve}{\code{ImagesApi$ImageAugmentationOptionsRetrieve()}}
\item \href{#method-ImagesApi-ImageAugmentationSamplesCreate}{\code{ImagesApi$ImageAugmentationSamplesCreate()}}
\item \href{#method-ImagesApi-ImageAugmentationSamplesList}{\code{ImagesApi$ImageAugmentationSamplesList()}}
\item \href{#method-ImagesApi-ProjectsDuplicateImagesList}{\code{ImagesApi$ProjectsDuplicateImagesList()}}
\item \href{#method-ImagesApi-ProjectsImageActivationMapsList}{\code{ImagesApi$ProjectsImageActivationMapsList()}}
\item \href{#method-ImagesApi-ProjectsImageBinsList}{\code{ImagesApi$ProjectsImageBinsList()}}
\item \href{#method-ImagesApi-ProjectsImageEmbeddingsList}{\code{ImagesApi$ProjectsImageEmbeddingsList()}}
\item \href{#method-ImagesApi-ProjectsImageSamplesList}{\code{ImagesApi$ProjectsImageSamplesList()}}
\item \href{#method-ImagesApi-ProjectsImagesDataQualityLogFileList}{\code{ImagesApi$ProjectsImagesDataQualityLogFileList()}}
\item \href{#method-ImagesApi-ProjectsImagesDataQualityLogList}{\code{ImagesApi$ProjectsImagesDataQualityLogList()}}
\item \href{#method-ImagesApi-ProjectsImagesFileList}{\code{ImagesApi$ProjectsImagesFileList()}}
\item \href{#method-ImagesApi-ProjectsImagesList}{\code{ImagesApi$ProjectsImagesList()}}
\item \href{#method-ImagesApi-ProjectsImagesRetrieve}{\code{ImagesApi$ProjectsImagesRetrieve()}}
\item \href{#method-ImagesApi-ProjectsModelsImageActivationMapsCreate}{\code{ImagesApi$ProjectsModelsImageActivationMapsCreate()}}
\item \href{#method-ImagesApi-ProjectsModelsImageActivationMapsList}{\code{ImagesApi$ProjectsModelsImageActivationMapsList()}}
\item \href{#method-ImagesApi-ProjectsModelsImageEmbeddingsCreate}{\code{ImagesApi$ProjectsModelsImageEmbeddingsCreate()}}
\item \href{#method-ImagesApi-ProjectsModelsImageEmbeddingsList}{\code{ImagesApi$ProjectsModelsImageEmbeddingsList()}}
\item \href{#method-ImagesApi-clone}{\code{ImagesApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-DatasetsImagesDataQualityLogFileList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-DatasetsImagesDataQualityLogFileList}{}}}
\subsection{Method \code{DatasetsImagesDataQualityLogFileList()}}{
Retrieve a text file containing the images data quality log.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$DatasetsImagesDataQualityLogFileList(datasetId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a text file containing the images data quality log.


This method invokes \verb{GET /datasets/\{datasetId\}/imagesDataQualityLog/file/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The response will contain a text file with the contents of the images data quality log.
\itemize{
\item \strong{\code{ContentMinusDisposition}} `attachment;filename=<filename>.txt` The suggested filename is dynamically generated
\item \strong{\code{ContentMinusType}} MIME type of the returned data
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset

api.instance <- ImagesApi$new()
result <- api.instance$DatasetsImagesDataQualityLogFileList(datasetId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-DatasetsImagesDataQualityLogList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-DatasetsImagesDataQualityLogList}{}}}
\subsection{Method \code{DatasetsImagesDataQualityLogList()}}{
Retrieve the images data quality log content and log length as JSON
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$DatasetsImagesDataQualityLogList(
  datasetId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasetId}}{character. The ID of the dataset}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the images data quality log content and log length as JSON


This method invokes \verb{GET /datasets/\{datasetId\}/imagesDataQualityLog/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Paginated list of lines of the image data quality log
\itemize{
}
}
}

\subsection{Returns}{
\link{ImagesDataQualityLogLinesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
datasetId <- 'datasetId_example' # character | The ID of the dataset
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$DatasetsImagesDataQualityLogList(datasetId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationListsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationListsCreate}{}}}
\subsection{Method \code{ImageAugmentationListsCreate()}}{
Creates a new augmentation list based on the posted payload data.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationListsCreate(imageAugmentationCreateList = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{imageAugmentationCreateList}}{\link{ImageAugmentationCreateList}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Creates a new augmentation list based on the posted payload data.


This method invokes \verb{POST /imageAugmentationLists/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Augmentation list id
\itemize{
}
\item \strong{\code{422}} Unable to create image augmentation list with the given input
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageAugmentationListCreateResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
imageAugmentationCreateList <- ImageAugmentationCreateList$new() # ImageAugmentationCreateList | 

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsCreate(imageAugmentationCreateList=imageAugmentationCreateList)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationListsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationListsDelete}{}}}
\subsection{Method \code{ImageAugmentationListsDelete()}}{
Delete an existing augmentation lists by id
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationListsDelete(augmentationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{augmentationId}}{character. The id of the augmentation list to fetch}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete an existing augmentation lists by id


This method invokes \verb{DELETE /imageAugmentationLists/\{augmentationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The successful response is empty
\itemize{
}
\item \strong{\code{400}} Cannot delete an augmentation list that is marked as in_use.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list to fetch

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsDelete(augmentationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationListsList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationListsList}{}}}
\subsection{Method \code{ImageAugmentationListsList()}}{
List of augmentation lists that match the specified query.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationListsList(
  projectId,
  offset,
  limit,
  featureName = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. Project ID to retrieve augmentation lists from}

\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned. To specify no limit, use 0. The default may change without notice.}

\item{\code{featureName}}{character. Name of the image feature that the augmentation list is associated with}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List of augmentation lists that match the specified query.


This method invokes \verb{GET /imageAugmentationLists/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Augmentation Lists
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageAugmentationListsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | Project ID to retrieve augmentation lists from
offset <- 0 # integer | This many results will be skipped
limit <- 100 # integer | At most this many results are returned. To specify no limit, use 0. The default may change without notice.
featureName <- 'featureName_example' # character | Name of the image feature that the augmentation list is associated with

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsList(projectId, offset, limit, featureName=featureName)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationListsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationListsPatch}{}}}
\subsection{Method \code{ImageAugmentationListsPatch()}}{
Update and existing augmentation list, with passed in values.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationListsPatch(
  augmentationId,
  imageAugmentationListPatchParam = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{augmentationId}}{character. The id of the augmentation list to fetch}

\item{\code{imageAugmentationListPatchParam}}{\link{ImageAugmentationListPatchParam}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update and existing augmentation list, with passed in values.


This method invokes \verb{PATCH /imageAugmentationLists/\{augmentationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} The successful response is empty
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list to fetch
imageAugmentationListPatchParam <- ImageAugmentationListPatchParam$new() # ImageAugmentationListPatchParam | 

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsPatch(augmentationId, imageAugmentationListPatchParam=imageAugmentationListPatchParam)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationListsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationListsRetrieve}{}}}
\subsection{Method \code{ImageAugmentationListsRetrieve()}}{
Returns a single augmentation list with the specified id.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationListsRetrieve(augmentationId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{augmentationId}}{character. The id of the augmentation list to fetch}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Returns a single augmentation list with the specified id.


This method invokes \verb{GET /imageAugmentationLists/\{augmentationId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns an augmentation list object
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageAugmentationRetrieveList}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list to fetch

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsRetrieve(augmentationId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationListsSamplesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationListsSamplesCreate}{}}}
\subsection{Method \code{ImageAugmentationListsSamplesCreate()}}{
Requests the creation of sample augmentations based on the augmentation list passed in.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationListsSamplesCreate(
  augmentationId,
  imageAugmentationListsCreateSamples = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{augmentationId}}{character. The id of the augmentation list}

\item{\code{imageAugmentationListsCreateSamples}}{\link{ImageAugmentationListsCreateSamples}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This endpoint will schedule a job to augment the specified images from a project's dataset and return a link to monitor the status of the job, as well as a link to retrieve the resulting augmented images.


This method invokes \verb{POST /imageAugmentationLists/\{augmentationId\}/samples/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Image Augmentation Samples generation has been successfully requested
\itemize{
\item \strong{\code{Location}} URL that can be polled to check the status of the operation.
}
}
}

\subsection{Returns}{
\link{ImageAugmentationSamplesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list
imageAugmentationListsCreateSamples <- ImageAugmentationListsCreateSamples$new() # ImageAugmentationListsCreateSamples | 

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsSamplesCreate(augmentationId, imageAugmentationListsCreateSamples=imageAugmentationListsCreateSamples)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationListsSamplesList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationListsSamplesList}{}}}
\subsection{Method \code{ImageAugmentationListsSamplesList()}}{
Retrieve latest Augmentation Samples generated for list
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationListsSamplesList(
  augmentationId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{augmentationId}}{character. The id of the augmentation list}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve latest Augmentation Samples generated for list


This method invokes \verb{GET /imageAugmentationLists/\{augmentationId\}/samples/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} Augmentation Samples not found
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageAugmentationListsRetrieveSamplesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
augmentationId <- 'augmentationId_example' # character | The id of the augmentation list
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationListsSamplesList(augmentationId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationOptionsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationOptionsRetrieve}{}}}
\subsection{Method \code{ImageAugmentationOptionsRetrieve()}}{
Augmentation list of all available transformations that are supported in the system.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationOptionsRetrieve(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Augmentation list of all available transformations that are supported in the system.


This method invokes \verb{GET /imageAugmentationOptions/\{projectId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Augmentation list object
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageAugmentationOptionsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationOptionsRetrieve(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationSamplesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationSamplesCreate}{}}}
\subsection{Method \code{ImageAugmentationSamplesCreate()}}{
(Deprecated in v2.28) Requests the creation of sample augmentations based on the augmentation list parameters passed in. This route is being deprecated please use `POST /imageAugmentationLists/<augmentationId>/samples` route instead.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationSamplesCreate(
  imageAugmentationSamplesRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{imageAugmentationSamplesRequest}}{\link{ImageAugmentationSamplesRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
(Deprecated in v2.28) This endpoint will schedule a job to augment the specified images from a project's dataset and return a link to monitor the status of the job, as well as a link to retrieve the resulting augmented images.


This method invokes \verb{POST /imageAugmentationSamples/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Image Augmentation Samples generation has been successfully requested
\itemize{
\item \strong{\code{Location}} URL that can be polled to check the status of the operation.
}
}
}

\subsection{Returns}{
\link{ImageAugmentationSamplesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
imageAugmentationSamplesRequest <- ImageAugmentationSamplesRequest$new() # ImageAugmentationSamplesRequest | 

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationSamplesCreate(imageAugmentationSamplesRequest=imageAugmentationSamplesRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ImageAugmentationSamplesList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ImageAugmentationSamplesList}{}}}
\subsection{Method \code{ImageAugmentationSamplesList()}}{
(Deprecated in v2.28) Retrieve previously generated Augmentation Samples. This route is being deprecated please use `GET /imageAugmentationLists/<augmentationId>/samples` route instead.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ImageAugmentationSamplesList(samplesId, offset = 0, limit = 100, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{samplesId}}{character. Id of the augmentation sample}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
(Deprecated in v2.28) Retrieve previously generated Augmentation Samples. This route is being deprecated please use GET /imageAugmentationLists/\\<augmentationId\\>/samples route instead.


This method invokes \verb{GET /imageAugmentationSamples/\{samplesId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
\item \strong{\code{404}} Augmentation Samples not found
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageAugmentationRetrieveSamplesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
samplesId <- 'samplesId_example' # character | Id of the augmentation sample
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ImageAugmentationSamplesList(samplesId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsDuplicateImagesList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsDuplicateImagesList}{}}}
\subsection{Method \code{ProjectsDuplicateImagesList()}}{
Get a list of duplicate images containing the number of occurrences of each image
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsDuplicateImagesList(
  projectId,
  column,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{column}}{character. Column parameter to filter the list of duplicate images returned}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of duplicate images containing the number of occurrences of each image


This method invokes \verb{GET /projects/\{projectId\}/duplicateImages/\{column\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} List of image metadata
\itemize{
}
}
}

\subsection{Returns}{
\link{DuplicateImageTableResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
column <- 'column_example' # character | Column parameter to filter the list of duplicate images returned
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsDuplicateImagesList(projectId, column, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImageActivationMapsList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImageActivationMapsList}{}}}
\subsection{Method \code{ProjectsImageActivationMapsList()}}{
List all Image Activation Maps for the project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImageActivationMapsList(
  projectId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. The number of items to skip over.}

\item{\code{limit}}{integer. The number of items to return.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all Image Activation Maps for the project.


This method invokes \verb{GET /projects/\{projectId\}/imageActivationMaps/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Activation Maps
\itemize{
}
}
}

\subsection{Returns}{
\link{ActivationMapsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | The number of items to skip over.
limit <- 100 # integer | The number of items to return.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImageActivationMapsList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImageBinsList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImageBinsList}{}}}
\subsection{Method \code{ProjectsImageBinsList()}}{
List image bins and covers for every target value or range.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImageBinsList(
  featureName,
  projectId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{featureName}}{character. Name of the image feature}

\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List image bins and covers for every target value or range.


This method invokes \verb{GET /projects/\{projectId\}/imageBins/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns a list of image metadata
\itemize{
}
\item \strong{\code{422}} The request cannot be processed
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageBinsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the image feature
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImageBinsList(featureName, projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImageEmbeddingsList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImageEmbeddingsList}{}}}
\subsection{Method \code{ProjectsImageEmbeddingsList()}}{
List all Image Embeddings for the project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImageEmbeddingsList(projectId, offset = 0, limit = 100, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. The number of items to skip over.}

\item{\code{limit}}{integer. The number of items to return.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all Image Embeddings for the project.


This method invokes \verb{GET /projects/\{projectId\}/imageEmbeddings/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Embeddings
\itemize{
}
}
}

\subsection{Returns}{
\link{EmbeddingsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | The number of items to skip over.
limit <- 100 # integer | The number of items to return.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImageEmbeddingsList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImageSamplesList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImageSamplesList}{}}}
\subsection{Method \code{ProjectsImageSamplesList()}}{
List all metadata for images in the EDA sample
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImageSamplesList(
  featureName,
  projectId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{featureName}}{character. Name of the image feature}

\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all metadata for images in the EDA sample


This method invokes \verb{GET /projects/\{projectId\}/imageSamples/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Paginated list of image metadata
\itemize{
}
\item \strong{\code{422}} The request cannot be processed
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageMetadataListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the image feature
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImageSamplesList(featureName, projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImagesDataQualityLogFileList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImagesDataQualityLogFileList}{}}}
\subsection{Method \code{ProjectsImagesDataQualityLogFileList()}}{
Retrieve a text file containing the images data quality log
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImagesDataQualityLogFileList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a text file containing the images data quality log


This method invokes \verb{GET /projects/\{projectId\}/imagesDataQualityLog/file/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The response will contain a text file with the contents of the images data quality log.
\itemize{
\item \strong{\code{ContentMinusDisposition}} `attachment;filename=<filename>.txt` The suggested filename is dynamically generated
\item \strong{\code{ContentMinusType}} MIME type of the returned data
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesDataQualityLogFileList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImagesDataQualityLogList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImagesDataQualityLogList}{}}}
\subsection{Method \code{ProjectsImagesDataQualityLogList()}}{
Retrieve the images data quality log content and log length as JSON
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImagesDataQualityLogList(
  projectId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{offset}}{integer. This many results will be skipped.}

\item{\code{limit}}{integer. At most this many results are returned.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the images data quality log content and log length as JSON


This method invokes \verb{GET /projects/\{projectId\}/imagesDataQualityLog/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Paginated list of lines of the image data quality log
\itemize{
}
\item \strong{\code{422}} Not a data quality enabled project
\itemize{
}
}
}

\subsection{Returns}{
\link{ImagesDataQualityLogLinesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
offset <- 0 # integer | This many results will be skipped.
limit <- 100 # integer | At most this many results are returned.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesDataQualityLogList(projectId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImagesFileList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImagesFileList}{}}}
\subsection{Method \code{ProjectsImagesFileList()}}{
Returns a file for a single image
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImagesFileList(projectId, imageId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{imageId}}{character. Id of the image}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Returns a file for a single image


This method invokes \verb{GET /projects/\{projectId\}/images/\{imageId\}/file/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The response is an image file (not JSON) that can be saved or displayed.
\itemize{
}
\item \strong{\code{404}} Image not found
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
imageId <- 'imageId_example' # character | Id of the image

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesFileList(projectId, imageId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImagesList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImagesList}{}}}
\subsection{Method \code{ProjectsImagesList()}}{
Returns a list of image metadata elements.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImagesList(
  offset,
  limit,
  projectId,
  column = NULL,
  targetValue = NULL,
  targetBinStart = NULL,
  targetBinEnd = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{projectId}}{character. The project ID}

\item{\code{column}}{character. Name of the column to query}

\item{\code{targetValue}}{\link{AnyOfnumberstring}. For classification projects - when specified, only images corresponding to this target value will be returned. Mutually exclusive with targetBinStart/targetBinEnd.}

\item{\code{targetBinStart}}{\link{AnyOfnumberstring}. For regression projects - when specified, only images corresponding to the target values above this will be returned. Mutually exclusive with targetValue. Must be specified with targetBinEnd.}

\item{\code{targetBinEnd}}{\link{AnyOfnumberstring}. For regression projects - when specified, only images corresponding to the target values below this will be returned. Mutually exclusive with targetValue. Must be specified with targetBinStart.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Returns a list of image metadata elements.


This method invokes \verb{GET /projects/\{projectId\}/images/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Returns a list of image metadata elements.
\itemize{
}
\item \strong{\code{422}} The request cannot be processed. Possible reasons include: - Cannot supply value for both TargetValue and TargetBin. - Must supply both TargetBinStart and TargetBinEnd. - TargetBin parameters are only valid for regression projects. - TargetValue parameter is only valid for classification projects.
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageMetadataListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 100 # integer | At most this many results are returned
projectId <- 'projectId_example' # character | The project ID
column <- 'column_example' # character | Name of the column to query
targetValue <- 'targetValue_example' # AnyOfnumberstring | For classification projects - when specified, only images corresponding to this target value will be returned. Mutually exclusive with targetBinStart/targetBinEnd.
targetBinStart <- 'targetBinStart_example' # AnyOfnumberstring | For regression projects - when specified, only images corresponding to the target values above this will be returned. Mutually exclusive with targetValue. Must be specified with targetBinEnd.
targetBinEnd <- 'targetBinEnd_example' # AnyOfnumberstring | For regression projects - when specified, only images corresponding to the target values below this will be returned. Mutually exclusive with targetValue. Must be specified with targetBinStart.

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesList(offset, limit, projectId, column=column, targetValue=targetValue, targetBinStart=targetBinStart, targetBinEnd=targetBinEnd)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsImagesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsImagesRetrieve}{}}}
\subsection{Method \code{ProjectsImagesRetrieve()}}{
Returns a single image metadata.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsImagesRetrieve(projectId, imageId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{imageId}}{character. Id of the image}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Returns a single image metadata.


This method invokes \verb{GET /projects/\{projectId\}/images/\{imageId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Metadata for a single image
\itemize{
}
\item \strong{\code{404}} Image not found
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageMetadataResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
imageId <- 'imageId_example' # character | Id of the image

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsImagesRetrieve(projectId, imageId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsModelsImageActivationMapsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsModelsImageActivationMapsCreate}{}}}
\subsection{Method \code{ProjectsModelsImageActivationMapsCreate()}}{
Request the computation of image activation maps for the specified model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsModelsImageActivationMapsCreate(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Request the computation of image activation maps for the specified model.


This method invokes \verb{POST /projects/\{projectId\}/models/\{modelId\}/imageActivationMaps/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Image activation map computation has been successfully requested
\itemize{
\item \strong{\code{Location}} a url that can be polled to check the status of the job.
}
\item \strong{\code{422}} Cannot compute image activation maps: if image activation maps were already computed for the model or there was another issue creating this job
\itemize{
}
}
}

\subsection{Returns}{
\link{ActivationMapsComputeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsModelsImageActivationMapsCreate(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsModelsImageActivationMapsList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsModelsImageActivationMapsList}{}}}
\subsection{Method \code{ProjectsModelsImageActivationMapsList()}}{
Retrieve Image Activation Maps for a feature of a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsModelsImageActivationMapsList(
  featureName,
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{featureName}}{character. Name of the feature to query}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Image Activation Maps for a feature of a model. Image Activation maps are a technique to get the discriminative image regions used by a CNN to identify a specific class in the image. In other words, an image activation map lets us see which regions in the image were relevant to this class. The higher the value in the activation map the greater the effect the region had on the prediction.


This method invokes \verb{GET /projects/\{projectId\}/models/\{modelId\}/imageActivationMaps/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Activation Maps
\itemize{
}
\item \strong{\code{422}} Unable to process request.
\itemize{
}
}
}

\subsection{Returns}{
\link{ActivationMapsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the feature to query
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsModelsImageActivationMapsList(featureName, projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsModelsImageEmbeddingsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsModelsImageEmbeddingsCreate}{}}}
\subsection{Method \code{ProjectsModelsImageEmbeddingsCreate()}}{
Request the computation of image embeddings for the specified model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsModelsImageEmbeddingsCreate(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Request the computation of image embeddings for the specified model.


This method invokes \verb{POST /projects/\{projectId\}/models/\{modelId\}/imageEmbeddings/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{202}} Image embedding computation has been successfully requested
\itemize{
\item \strong{\code{Location}} a url that can be polled to check the status of the job.
}
\item \strong{\code{422}} Cannot compute image embeddings: if image embeddings were already computed for the model or there was another issue creating this job
\itemize{
}
}
}

\subsection{Returns}{
\link{ImageEmbeddingsComputeResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsModelsImageEmbeddingsCreate(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-ProjectsModelsImageEmbeddingsList"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-ProjectsModelsImageEmbeddingsList}{}}}
\subsection{Method \code{ProjectsModelsImageEmbeddingsList()}}{
Retrieve ImageEmbeddings for a feature of a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$ProjectsModelsImageEmbeddingsList(
  featureName,
  projectId,
  modelId,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{featureName}}{character. Name of the feature to query}

\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve ImageEmbeddings for a feature of a model.


This method invokes \verb{GET /projects/\{projectId\}/models/\{modelId\}/imageEmbeddings/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Image Embeddings
\itemize{
}
\item \strong{\code{422}} Unable to process request.
\itemize{
}
}
}

\subsection{Returns}{
\link{EmbeddingsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
featureName <- 'featureName_example' # character | Name of the feature to query
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- ImagesApi$new()
result <- api.instance$ProjectsModelsImageEmbeddingsList(featureName, projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ImagesApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ImagesApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ImagesApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
