% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/governance_api.R
\docType{class}
\name{GovernanceApi}
\alias{GovernanceApi}
\title{Governance operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Governance
}
\examples{

## ------------------------------------------------
## Method `GovernanceApi$ApprovalPoliciesCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
approvalPolicy <- ApprovalPolicy$new() # ApprovalPolicy | 

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesCreate(approvalPolicy=approvalPolicy)
}

## ------------------------------------------------
## Method `GovernanceApi$ApprovalPoliciesDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
approvalPolicyId <- 'approvalPolicyId_example' # character | ID of the Approval Policy.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesDelete(approvalPolicyId)
}

## ------------------------------------------------
## Method `GovernanceApi$ApprovalPoliciesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
entityType <- 'entityType_example' # character | Type of entity to filter policies by.
namePart <- 'namePart_example' # character | Part of the policy name to search by.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesList(offset=offset, limit=limit, entityType=entityType, namePart=namePart)
}

## ------------------------------------------------
## Method `GovernanceApi$ApprovalPoliciesPut`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
approvalPolicyId <- 'approvalPolicyId_example' # character | ID of the Approval Policy.
approvalPolicy <- ApprovalPolicy$new() # ApprovalPolicy | 

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesPut(approvalPolicyId, approvalPolicy=approvalPolicy)
}

## ------------------------------------------------
## Method `GovernanceApi$ApprovalPoliciesRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
approvalPolicyId <- 'approvalPolicyId_example' # character | ID of the Approval Policy.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesRetrieve(approvalPolicyId)
}

## ------------------------------------------------
## Method `GovernanceApi$ApprovalPoliciesShareableChangeRequestsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
approvalPolicyId <- 'approvalPolicyId_example' # character | ID of the Approval Policy.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
orderBy <- "" # character | Attribute to order Change Requests by.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesShareableChangeRequestsList(approvalPolicyId, offset=offset, limit=limit, orderBy=orderBy)
}

## ------------------------------------------------
## Method `GovernanceApi$ApprovalPolicyMatchList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
entityType <- 'entityType_example' # character | Searched typed of the entity.
action <- 'action_example' # character | Searched policy action.
fieldName <- 'fieldName_example' # character | Name of the entity field to filter policies by.
fieldValue <- 'fieldValue_example' # character | Value of the entity field to filter policies by.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPolicyMatchList(entityType, action, fieldName=fieldName, fieldValue=fieldValue)
}

## ------------------------------------------------
## Method `GovernanceApi$ApprovalPolicyTriggersList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPolicyTriggersList()
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
changeRequestCreate <- ChangeRequestCreate$new() # ChangeRequestCreate | 

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsCreate(changeRequestCreate=changeRequestCreate)
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
entityType <- 'entityType_example' # character | Type of the entity to filter requests by.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
entityId <- list(c('entityId_example')) # OneOfstringarray | ID of the entity to filter change requests by.
myRequests <- 'myRequests_example' # character | Filter change requests by the owner. If `true`, only returns change requests owned by the user. If `false`, only returns change requests owned by other users but accessible to the requester.
showApproved <- 'showApproved_example' # character | Filter change requests by status. If `true`, only returns approved change requests. If `false`, only returns not approved change requests.
showCancelled <- 'showCancelled_example' # character | Filter change requests by status. If `true`, only returns cancelled change requests. If `false`, only returns not cancelled change requests.
status <- list(c('status_example')) # OneOfstringarray | Filter change requests by status.
orderBy <- 'orderBy_example' # character | The order that the results should be retrieved in.

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsList(entityType, offset=offset, limit=limit, entityId=entityId, myRequests=myRequests, showApproved=showApproved, showCancelled=showCancelled, status=status, orderBy=orderBy)
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
changeRequestUpdate <- ChangeRequestUpdate$new() # ChangeRequestUpdate | 

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsPatch(changeRequestId, changeRequestUpdate=changeRequestUpdate)
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsRetrieve(changeRequestId)
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsReviewsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
reviewCreate <- ReviewCreate$new() # ReviewCreate | 

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsReviewsCreate(changeRequestId, reviewCreate=reviewCreate)
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsReviewsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
status <- 'status_example' # character | Review status to filter by.
changeVersionId <- 'changeVersionId_example' # character | ID of the change version to filter by

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsReviewsList(changeRequestId, offset=offset, limit=limit, status=status, changeVersionId=changeVersionId)
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsReviewsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
reviewId <- 'reviewId_example' # character | ID of the review.

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsReviewsRetrieve(changeRequestId, reviewId)
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsStatusPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
changeRequestUpdateStatus <- ChangeRequestUpdateStatus$new() # ChangeRequestUpdateStatus | 

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsStatusPatchMany(changeRequestId, changeRequestUpdateStatus=changeRequestUpdateStatus)
}

## ------------------------------------------------
## Method `GovernanceApi$ChangeRequestsSuggestedReviewersList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsSuggestedReviewersList(changeRequestId, offset=offset, limit=limit)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GovernanceApi-new}{\code{GovernanceApi$new()}}
\item \href{#method-GovernanceApi-ApprovalPoliciesCreate}{\code{GovernanceApi$ApprovalPoliciesCreate()}}
\item \href{#method-GovernanceApi-ApprovalPoliciesDelete}{\code{GovernanceApi$ApprovalPoliciesDelete()}}
\item \href{#method-GovernanceApi-ApprovalPoliciesList}{\code{GovernanceApi$ApprovalPoliciesList()}}
\item \href{#method-GovernanceApi-ApprovalPoliciesPut}{\code{GovernanceApi$ApprovalPoliciesPut()}}
\item \href{#method-GovernanceApi-ApprovalPoliciesRetrieve}{\code{GovernanceApi$ApprovalPoliciesRetrieve()}}
\item \href{#method-GovernanceApi-ApprovalPoliciesShareableChangeRequestsList}{\code{GovernanceApi$ApprovalPoliciesShareableChangeRequestsList()}}
\item \href{#method-GovernanceApi-ApprovalPolicyMatchList}{\code{GovernanceApi$ApprovalPolicyMatchList()}}
\item \href{#method-GovernanceApi-ApprovalPolicyTriggersList}{\code{GovernanceApi$ApprovalPolicyTriggersList()}}
\item \href{#method-GovernanceApi-ChangeRequestsCreate}{\code{GovernanceApi$ChangeRequestsCreate()}}
\item \href{#method-GovernanceApi-ChangeRequestsList}{\code{GovernanceApi$ChangeRequestsList()}}
\item \href{#method-GovernanceApi-ChangeRequestsPatch}{\code{GovernanceApi$ChangeRequestsPatch()}}
\item \href{#method-GovernanceApi-ChangeRequestsRetrieve}{\code{GovernanceApi$ChangeRequestsRetrieve()}}
\item \href{#method-GovernanceApi-ChangeRequestsReviewsCreate}{\code{GovernanceApi$ChangeRequestsReviewsCreate()}}
\item \href{#method-GovernanceApi-ChangeRequestsReviewsList}{\code{GovernanceApi$ChangeRequestsReviewsList()}}
\item \href{#method-GovernanceApi-ChangeRequestsReviewsRetrieve}{\code{GovernanceApi$ChangeRequestsReviewsRetrieve()}}
\item \href{#method-GovernanceApi-ChangeRequestsStatusPatchMany}{\code{GovernanceApi$ChangeRequestsStatusPatchMany()}}
\item \href{#method-GovernanceApi-ChangeRequestsSuggestedReviewersList}{\code{GovernanceApi$ChangeRequestsSuggestedReviewersList()}}
\item \href{#method-GovernanceApi-clone}{\code{GovernanceApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ApprovalPoliciesCreate"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ApprovalPoliciesCreate}{}}}
\subsection{Method \code{ApprovalPoliciesCreate()}}{
Create a new Approval Policy.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ApprovalPoliciesCreate(approvalPolicy = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{approvalPolicy}}{\link{ApprovalPolicy}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a new Approval Policy.


This method invokes \verb{POST /approvalPolicies/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Approval Policy has been successfully created.
\itemize{
}
\item \strong{\code{403}} Approval Policy management feature is disabled for the user.
\itemize{
}
\item \strong{\code{422}} Approval Policy could not be created with the given input.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApprovalPolicyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
approvalPolicy <- ApprovalPolicy$new() # ApprovalPolicy | 

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesCreate(approvalPolicy=approvalPolicy)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ApprovalPoliciesDelete"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ApprovalPoliciesDelete}{}}}
\subsection{Method \code{ApprovalPoliciesDelete()}}{
Delete an Approval Policy.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ApprovalPoliciesDelete(approvalPolicyId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{approvalPolicyId}}{character. ID of the Approval Policy.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete the policy with the given ID.


This method invokes \verb{DELETE /approvalPolicies/\{approvalPolicyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Approval Policy has been successfully deleted.
\itemize{
}
\item \strong{\code{403}} Approval Policy management feature is disabled for the user.
\itemize{
}
\item \strong{\code{404}} Approval Policy does not exist or the user doesn't have access to it.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
approvalPolicyId <- 'approvalPolicyId_example' # character | ID of the Approval Policy.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesDelete(approvalPolicyId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ApprovalPoliciesList"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ApprovalPoliciesList}{}}}
\subsection{Method \code{ApprovalPoliciesList()}}{
List Approval Policies.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ApprovalPoliciesList(
  offset = 0,
  limit = 100,
  entityType = NULL,
  namePart = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{entityType}}{Enum < \link{deployment, Deployment, DEPLOYMENT, deploymentModel, DeploymentModel, DEPLOYMENT_MODEL, deploymentConfig, DeploymentConfig, DEPLOYMENT_CONFIG, deploymentStatus, DeploymentStatus, DEPLOYMENT_STATUS, deploymentMonitoringData, DeploymentMonitoringData, DEPLOYMENT_MONITORING_DATA} > Type of entity to filter policies by.}

\item{\code{namePart}}{character. Part of the policy name to search by.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List Approval Policies.


This method invokes \verb{GET /approvalPolicies/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Approval Policy has been successfully updated.
\itemize{
}
\item \strong{\code{403}} Approval Policy management feature is disabled for the user.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApprovalPolicyListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
entityType <- 'entityType_example' # character | Type of entity to filter policies by.
namePart <- 'namePart_example' # character | Part of the policy name to search by.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesList(offset=offset, limit=limit, entityType=entityType, namePart=namePart)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ApprovalPoliciesPut"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ApprovalPoliciesPut}{}}}
\subsection{Method \code{ApprovalPoliciesPut()}}{
Update an Approval Policy.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ApprovalPoliciesPut(approvalPolicyId, approvalPolicy = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{approvalPolicyId}}{character. ID of the Approval Policy.}

\item{\code{approvalPolicy}}{\link{ApprovalPolicy}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the policy with the given ID.


This method invokes \verb{PUT /approvalPolicies/\{approvalPolicyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Approval Policy has been successfully updated.
\itemize{
}
\item \strong{\code{403}} Approval Policy management feature is disabled for the user.
\itemize{
}
\item \strong{\code{404}} Approval Policy does not exist or the user doesn't have access to it.
\itemize{
}
\item \strong{\code{422}} Approval Policy could not be created with the given input.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApprovalPolicyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
approvalPolicyId <- 'approvalPolicyId_example' # character | ID of the Approval Policy.
approvalPolicy <- ApprovalPolicy$new() # ApprovalPolicy | 

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesPut(approvalPolicyId, approvalPolicy=approvalPolicy)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ApprovalPoliciesRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ApprovalPoliciesRetrieve}{}}}
\subsection{Method \code{ApprovalPoliciesRetrieve()}}{
Retrieve an Approval Policy.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ApprovalPoliciesRetrieve(approvalPolicyId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{approvalPolicyId}}{character. ID of the Approval Policy.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the policy with the given ID.


This method invokes \verb{GET /approvalPolicies/\{approvalPolicyId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Approval Policy has been successfully retrieved.
\itemize{
}
\item \strong{\code{403}} Approval Policy management feature is disabled for the user.
\itemize{
}
\item \strong{\code{404}} Approval Policy does not exist or the user doesn't have access to it.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApprovalPolicyResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
approvalPolicyId <- 'approvalPolicyId_example' # character | ID of the Approval Policy.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesRetrieve(approvalPolicyId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ApprovalPoliciesShareableChangeRequestsList"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ApprovalPoliciesShareableChangeRequestsList}{}}}
\subsection{Method \code{ApprovalPoliciesShareableChangeRequestsList()}}{
Retrieve associated Change Requests Info.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ApprovalPoliciesShareableChangeRequestsList(
  approvalPolicyId,
  offset = 0,
  limit = 100,
  orderBy = "",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{approvalPolicyId}}{character. ID of the Approval Policy.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{orderBy}}{character. Attribute to order Change Requests by.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get information about Change Requests submitted for a certain Approval Policy.


This method invokes \verb{GET /approvalPolicies/\{approvalPolicyId\}/shareableChangeRequests/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Change Requests information has been successfully retrieved.
\itemize{
}
\item \strong{\code{403}} Approval Policy management feature is disabled for the user.
\itemize{
}
\item \strong{\code{404}} Approval Policy does not exist or the user doesn't have access to it.
\itemize{
}
}
}

\subsection{Returns}{
\link{ChangeRequestInfoListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
approvalPolicyId <- 'approvalPolicyId_example' # character | ID of the Approval Policy.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
orderBy <- "" # character | Attribute to order Change Requests by.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPoliciesShareableChangeRequestsList(approvalPolicyId, offset=offset, limit=limit, orderBy=orderBy)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ApprovalPolicyMatchList"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ApprovalPolicyMatchList}{}}}
\subsection{Method \code{ApprovalPolicyMatchList()}}{
Get policy ID matching the query
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ApprovalPolicyMatchList(
  entityType,
  action,
  fieldName = NULL,
  fieldValue = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entityType}}{Enum < \link{deployment, Deployment, DEPLOYMENT, deploymentModel, DeploymentModel, DEPLOYMENT_MODEL, deploymentConfig, DeploymentConfig, DEPLOYMENT_CONFIG, deploymentStatus, DeploymentStatus, DEPLOYMENT_STATUS, deploymentMonitoringData, DeploymentMonitoringData, DEPLOYMENT_MONITORING_DATA} > Searched typed of the entity.}

\item{\code{action}}{Enum < \link{create, Create, CREATE, update, Update, UPDATE, delete, Delete, DELETE} > Searched policy action.}

\item{\code{fieldName}}{character. Name of the entity field to filter policies by.}

\item{\code{fieldValue}}{character. Value of the entity field to filter policies by.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get policy ID matching the query


This method invokes \verb{GET /approvalPolicyMatch/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Search executed successfully.
\itemize{
}
\item \strong{\code{403}} Approval Policy management feature is disabled for the user.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApprovalPolicyMatchResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
entityType <- 'entityType_example' # character | Searched typed of the entity.
action <- 'action_example' # character | Searched policy action.
fieldName <- 'fieldName_example' # character | Name of the entity field to filter policies by.
fieldValue <- 'fieldValue_example' # character | Value of the entity field to filter policies by.

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPolicyMatchList(entityType, action, fieldName=fieldName, fieldValue=fieldValue)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ApprovalPolicyTriggersList"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ApprovalPolicyTriggersList}{}}}
\subsection{Method \code{ApprovalPolicyTriggersList()}}{
Get a list of available policy triggers.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ApprovalPolicyTriggersList(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of available policy triggers.


This method invokes \verb{GET /approvalPolicyTriggers/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The list of triggers is successfully generated.
\itemize{
}
\item \strong{\code{403}} Approval Policy management feature is disabled for the user.
\itemize{
}
}
}

\subsection{Returns}{
\link{ApprovalWorkflowListTriggerResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- GovernanceApi$new()
result <- api.instance$ApprovalPolicyTriggersList()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsCreate}{}}}
\subsection{Method \code{ChangeRequestsCreate()}}{
Create Change Request.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsCreate(changeRequestCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changeRequestCreate}}{\link{ChangeRequestCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Request changes for a supported product entity. For now, you can request changes for deployments only.


This method invokes \verb{POST /changeRequests/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Change Request Created.
\itemize{
}
}
}

\subsection{Returns}{
\link{ChangeRequestResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
changeRequestCreate <- ChangeRequestCreate$new() # ChangeRequestCreate | 

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsCreate(changeRequestCreate=changeRequestCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsList"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsList}{}}}
\subsection{Method \code{ChangeRequestsList()}}{
List Change Requests.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsList(
  entityType,
  offset = 0,
  limit = 100,
  entityId = NULL,
  myRequests = NULL,
  showApproved = NULL,
  showCancelled = NULL,
  status = NULL,
  orderBy = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entityType}}{Enum < \link{deployment, Deployment, DEPLOYMENT} > Type of the entity to filter requests by.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{entityId}}{\link{OneOfstringarray}. ID of the entity to filter change requests by.}

\item{\code{myRequests}}{Enum < \link{false, False, true, True} > Filter change requests by the owner. If `true`, only returns change requests owned by the user. If `false`, only returns change requests owned by other users but accessible to the requester.}

\item{\code{showApproved}}{Enum < \link{false, False, true, True} > Filter change requests by status. If `true`, only returns approved change requests. If `false`, only returns not approved change requests.}

\item{\code{showCancelled}}{Enum < \link{false, False, true, True} > Filter change requests by status. If `true`, only returns cancelled change requests. If `false`, only returns not cancelled change requests.}

\item{\code{status}}{\link{OneOfstringarray}. Filter change requests by status.}

\item{\code{orderBy}}{Enum < \link{createdAt, -createdAt, processedAt, -processedAt, updatedAt, -updatedAt} > The order that the results should be retrieved in.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List all Change Requests accessible by the user for the given product entity type.


This method invokes \verb{GET /changeRequests/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ChangeRequestsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
entityType <- 'entityType_example' # character | Type of the entity to filter requests by.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
entityId <- list(c('entityId_example')) # OneOfstringarray | ID of the entity to filter change requests by.
myRequests <- 'myRequests_example' # character | Filter change requests by the owner. If `true`, only returns change requests owned by the user. If `false`, only returns change requests owned by other users but accessible to the requester.
showApproved <- 'showApproved_example' # character | Filter change requests by status. If `true`, only returns approved change requests. If `false`, only returns not approved change requests.
showCancelled <- 'showCancelled_example' # character | Filter change requests by status. If `true`, only returns cancelled change requests. If `false`, only returns not cancelled change requests.
status <- list(c('status_example')) # OneOfstringarray | Filter change requests by status.
orderBy <- 'orderBy_example' # character | The order that the results should be retrieved in.

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsList(entityType, offset=offset, limit=limit, entityId=entityId, myRequests=myRequests, showApproved=showApproved, showCancelled=showCancelled, status=status, orderBy=orderBy)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsPatch}{}}}
\subsection{Method \code{ChangeRequestsPatch()}}{
Update Change Request.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsPatch(
  changeRequestId,
  changeRequestUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changeRequestId}}{character. ID of the Change Request.}

\item{\code{changeRequestUpdate}}{\link{ChangeRequestUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update Change Request with the given ID.


This method invokes \verb{PATCH /changeRequests/\{changeRequestId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ChangeRequestResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
changeRequestUpdate <- ChangeRequestUpdate$new() # ChangeRequestUpdate | 

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsPatch(changeRequestId, changeRequestUpdate=changeRequestUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsRetrieve}{}}}
\subsection{Method \code{ChangeRequestsRetrieve()}}{
Retrieve Change Request.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsRetrieve(changeRequestId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changeRequestId}}{character. ID of the Change Request.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve Change Request by ID.


This method invokes \verb{GET /changeRequests/\{changeRequestId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ChangeRequestResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsRetrieve(changeRequestId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsReviewsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsReviewsCreate}{}}}
\subsection{Method \code{ChangeRequestsReviewsCreate()}}{
Create review.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsReviewsCreate(
  changeRequestId,
  reviewCreate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changeRequestId}}{character. ID of the Change Request.}

\item{\code{reviewCreate}}{\link{ReviewCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Review the Change Request.


This method invokes \verb{POST /changeRequests/\{changeRequestId\}/reviews/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ReviewResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
reviewCreate <- ReviewCreate$new() # ReviewCreate | 

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsReviewsCreate(changeRequestId, reviewCreate=reviewCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsReviewsList"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsReviewsList}{}}}
\subsection{Method \code{ChangeRequestsReviewsList()}}{
List Change Request reviews.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsReviewsList(
  changeRequestId,
  offset = 0,
  limit = 100,
  status = NULL,
  changeVersionId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changeRequestId}}{character. ID of the Change Request.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{status}}{Enum < \link{approved, Approved, APPROVED, changesRequested, ChangesRequested, CHANGES_REQUESTED, commented, Commented, COMMENTED} > Review status to filter by.}

\item{\code{changeVersionId}}{character. ID of the change version to filter by}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List Change Request reviews.


This method invokes \verb{GET /changeRequests/\{changeRequestId\}/reviews/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ReviewsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.
status <- 'status_example' # character | Review status to filter by.
changeVersionId <- 'changeVersionId_example' # character | ID of the change version to filter by

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsReviewsList(changeRequestId, offset=offset, limit=limit, status=status, changeVersionId=changeVersionId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsReviewsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsReviewsRetrieve}{}}}
\subsection{Method \code{ChangeRequestsReviewsRetrieve()}}{
Retrieve review.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsReviewsRetrieve(changeRequestId, reviewId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changeRequestId}}{character. ID of the Change Request.}

\item{\code{reviewId}}{character. ID of the review.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a review by ID.


This method invokes \verb{GET /changeRequests/\{changeRequestId\}/reviews/\{reviewId\}/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{ReviewResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
reviewId <- 'reviewId_example' # character | ID of the review.

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsReviewsRetrieve(changeRequestId, reviewId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsStatusPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsStatusPatchMany}{}}}
\subsection{Method \code{ChangeRequestsStatusPatchMany()}}{
Resolve or Cancel the Change Request.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsStatusPatchMany(
  changeRequestId,
  changeRequestUpdateStatus = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changeRequestId}}{character. ID of the Change Request.}

\item{\code{changeRequestUpdateStatus}}{\link{ChangeRequestUpdateStatus}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Resolve or Cancel the Change Request.


This method invokes \verb{PATCH /changeRequests/\{changeRequestId\}/status/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
\item \strong{\code{Location}} A url that can be polled to check the status.
}
}
}

\subsection{Returns}{
\link{ChangeRequestUpdateStatus}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
changeRequestUpdateStatus <- ChangeRequestUpdateStatus$new() # ChangeRequestUpdateStatus | 

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsStatusPatchMany(changeRequestId, changeRequestUpdateStatus=changeRequestUpdateStatus)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-ChangeRequestsSuggestedReviewersList"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-ChangeRequestsSuggestedReviewersList}{}}}
\subsection{Method \code{ChangeRequestsSuggestedReviewersList()}}{
List suggested reviewers.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$ChangeRequestsSuggestedReviewersList(
  changeRequestId,
  offset = 0,
  limit = 100,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changeRequestId}}{character. ID of the Change Request.}

\item{\code{offset}}{integer. Number of results to skip.}

\item{\code{limit}}{integer. At most this many results are returned. The default may change without notice.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List users, suggested to review the Change Request.


This method invokes \verb{GET /changeRequests/\{changeRequestId\}/suggestedReviewers/} in the DataRobot Public API.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}}
\itemize{
}
}
}

\subsection{Returns}{
\link{SuggestedReviewersResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
changeRequestId <- 'changeRequestId_example' # character | ID of the Change Request.
offset <- 0 # integer | Number of results to skip.
limit <- 100 # integer | At most this many results are returned. The default may change without notice.

api.instance <- GovernanceApi$new()
result <- api.instance$ChangeRequestsSuggestedReviewersList(changeRequestId, offset=offset, limit=limit)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GovernanceApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GovernanceApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GovernanceApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
