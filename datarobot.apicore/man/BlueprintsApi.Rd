% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/blueprints_api.R
\docType{class}
\name{BlueprintsApi}
\alias{BlueprintsApi}
\title{Blueprints operations}
\format{
An \code{R6Class} generator object
}
\description{
datarobot.apicore.Blueprints
}
\examples{

## ------------------------------------------------
## Method `BlueprintsApi$ProjectsBlueprintsBlueprintChartList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
blueprintId <- 'blueprintId_example' # character | The blueprint ID.

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsBlueprintsBlueprintChartList(projectId, blueprintId)
}

## ------------------------------------------------
## Method `BlueprintsApi$ProjectsBlueprintsBlueprintDocsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
blueprintId <- 'blueprintId_example' # character | The blueprint ID.

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsBlueprintsBlueprintDocsList(projectId, blueprintId)
}

## ------------------------------------------------
## Method `BlueprintsApi$ProjectsBlueprintsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsBlueprintsList(projectId)
}

## ------------------------------------------------
## Method `BlueprintsApi$ProjectsBlueprintsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
blueprintId <- 'blueprintId_example' # character | The blueprint ID.

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsBlueprintsRetrieve(projectId, blueprintId)
}

## ------------------------------------------------
## Method `BlueprintsApi$ProjectsModelsBlueprintChartList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsModelsBlueprintChartList(projectId, modelId)
}

## ------------------------------------------------
## Method `BlueprintsApi$ProjectsModelsBlueprintDocsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsModelsBlueprintDocsList(projectId, modelId)
}

## ------------------------------------------------
## Method `BlueprintsApi$ProjectsModelsLogsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsModelsLogsList(projectId, modelId)
}

## ------------------------------------------------
## Method `BlueprintsApi$ProjectsModelsTrainingArtifactList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsModelsTrainingArtifactList(projectId, modelId)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsBulkValidationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintBulkValidationRequest <- UserBlueprintBulkValidationRequest$new() # UserBlueprintBulkValidationRequest |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsBulkValidationsCreate(userBlueprintBulkValidationRequest=userBlueprintBulkValidationRequest)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintCreate <- UserBlueprintCreate$new() # UserBlueprintCreate |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsCreate(userBlueprintCreate=userBlueprintCreate)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsDelete`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsDelete(userBlueprintId)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsDeleteMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintsBulkDelete <- UserBlueprintsBulkDelete$new() # UserBlueprintsBulkDelete |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsDeleteMany(userBlueprintsBulkDelete=userBlueprintsBulkDelete)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsFromBlueprintIdCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromBlueprintId <- UserBlueprintCreateFromBlueprintId$new() # UserBlueprintCreateFromBlueprintId |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsFromBlueprintIdCreate(userBlueprintCreateFromBlueprintId=userBlueprintCreateFromBlueprintId)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsFromCustomTaskVersionIdCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromCustomTaskVersionIdPayload <- UserBlueprintCreateFromCustomTaskVersionIdPayload$new() # UserBlueprintCreateFromCustomTaskVersionIdPayload |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsFromCustomTaskVersionIdCreate(userBlueprintCreateFromCustomTaskVersionIdPayload=userBlueprintCreateFromCustomTaskVersionIdPayload)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsFromUserBlueprintIdCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromUserBlueprintId <- UserBlueprintCreateFromUserBlueprintId$new() # UserBlueprintCreateFromUserBlueprintId |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsFromUserBlueprintIdCreate(userBlueprintCreateFromUserBlueprintId=userBlueprintCreateFromUserBlueprintId)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsInputTypesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsInputTypesList()
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of results to skip (for pagination).
limit <- 100 # integer | The max number of results to return.
projectId <- 'projectId_example' # character | The id of the project, used to filter for original project_id.

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsList(offset, limit, projectId=projectId)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsPatch`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
userBlueprintUpdate <- UserBlueprintUpdate$new() # UserBlueprintUpdate |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsPatch(userBlueprintId, userBlueprintUpdate=userBlueprintUpdate)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsProjectBlueprintsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintAddToMenu <- UserBlueprintAddToMenu$new() # UserBlueprintAddToMenu |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsProjectBlueprintsCreate(userBlueprintAddToMenu=userBlueprintAddToMenu)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsRetrieve`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
editMode <- FALSE # character | Whether to retrieve the extra blueprint metadata for editing.
decompressedBlueprint <- FALSE # character | Whether to retrieve the blueprint in the decompressed format.
isInplaceEditor <- FALSE # character | Whether the request is sent from the in place user BP editor.
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
projectId <- 'projectId_example' # character | String representation of ObjectId for the currently active project. The user blueprint is retrieved when this project is active.
getDynamicLabels <- FALSE # character | Whether to add dynamic labels to a decompressed blueprint.

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsRetrieve(editMode, decompressedBlueprint, isInplaceEditor, userBlueprintId, projectId=projectId, getDynamicLabels=getDynamicLabels)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsSharedRolesList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsSharedRolesList(offset, limit, userBlueprintId, id=id, name=name, shareRecipientType=shareRecipientType)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsSharedRolesPatchMany`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
sharedRolesUpdate <- SharedRolesUpdate$new() # SharedRolesUpdate |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsSharedRolesPatchMany(userBlueprintId, sharedRolesUpdate=sharedRolesUpdate)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsTaskParametersCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintTaskParameterValidation <- UserBlueprintTaskParameterValidation$new() # UserBlueprintTaskParameterValidation |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsTaskParametersCreate(userBlueprintTaskParameterValidation=userBlueprintTaskParameterValidation)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsTasksList`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id to use for task retrieval
blueprintId <- 'blueprintId_example' # character | The blueprint id to use for task retrieval
userBlueprintId <- 'userBlueprintId_example' # character | The user blueprint id to use for task retrieval

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsTasksList(projectId=projectId, blueprintId=blueprintId, userBlueprintId=userBlueprintId)
}

## ------------------------------------------------
## Method `BlueprintsApi$UserBlueprintsValidationsCreate`
## ------------------------------------------------

\dontrun{
library(datarobot.apicore)
userBlueprintValidation <- UserBlueprintValidation$new() # UserBlueprintValidation |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsValidationsCreate(userBlueprintValidation=userBlueprintValidation)
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{BlueprintsApi$new()}}
\item \href{#method-ProjectsBlueprintsBlueprintChartList}{\code{BlueprintsApi$ProjectsBlueprintsBlueprintChartList()}}
\item \href{#method-ProjectsBlueprintsBlueprintDocsList}{\code{BlueprintsApi$ProjectsBlueprintsBlueprintDocsList()}}
\item \href{#method-ProjectsBlueprintsList}{\code{BlueprintsApi$ProjectsBlueprintsList()}}
\item \href{#method-ProjectsBlueprintsRetrieve}{\code{BlueprintsApi$ProjectsBlueprintsRetrieve()}}
\item \href{#method-ProjectsModelsBlueprintChartList}{\code{BlueprintsApi$ProjectsModelsBlueprintChartList()}}
\item \href{#method-ProjectsModelsBlueprintDocsList}{\code{BlueprintsApi$ProjectsModelsBlueprintDocsList()}}
\item \href{#method-ProjectsModelsLogsList}{\code{BlueprintsApi$ProjectsModelsLogsList()}}
\item \href{#method-ProjectsModelsTrainingArtifactList}{\code{BlueprintsApi$ProjectsModelsTrainingArtifactList()}}
\item \href{#method-UserBlueprintsBulkValidationsCreate}{\code{BlueprintsApi$UserBlueprintsBulkValidationsCreate()}}
\item \href{#method-UserBlueprintsCreate}{\code{BlueprintsApi$UserBlueprintsCreate()}}
\item \href{#method-UserBlueprintsDelete}{\code{BlueprintsApi$UserBlueprintsDelete()}}
\item \href{#method-UserBlueprintsDeleteMany}{\code{BlueprintsApi$UserBlueprintsDeleteMany()}}
\item \href{#method-UserBlueprintsFromBlueprintIdCreate}{\code{BlueprintsApi$UserBlueprintsFromBlueprintIdCreate()}}
\item \href{#method-UserBlueprintsFromCustomTaskVersionIdCreate}{\code{BlueprintsApi$UserBlueprintsFromCustomTaskVersionIdCreate()}}
\item \href{#method-UserBlueprintsFromUserBlueprintIdCreate}{\code{BlueprintsApi$UserBlueprintsFromUserBlueprintIdCreate()}}
\item \href{#method-UserBlueprintsInputTypesList}{\code{BlueprintsApi$UserBlueprintsInputTypesList()}}
\item \href{#method-UserBlueprintsList}{\code{BlueprintsApi$UserBlueprintsList()}}
\item \href{#method-UserBlueprintsPatch}{\code{BlueprintsApi$UserBlueprintsPatch()}}
\item \href{#method-UserBlueprintsProjectBlueprintsCreate}{\code{BlueprintsApi$UserBlueprintsProjectBlueprintsCreate()}}
\item \href{#method-UserBlueprintsRetrieve}{\code{BlueprintsApi$UserBlueprintsRetrieve()}}
\item \href{#method-UserBlueprintsSharedRolesList}{\code{BlueprintsApi$UserBlueprintsSharedRolesList()}}
\item \href{#method-UserBlueprintsSharedRolesPatchMany}{\code{BlueprintsApi$UserBlueprintsSharedRolesPatchMany()}}
\item \href{#method-UserBlueprintsTaskParametersCreate}{\code{BlueprintsApi$UserBlueprintsTaskParametersCreate()}}
\item \href{#method-UserBlueprintsTasksList}{\code{BlueprintsApi$UserBlueprintsTasksList()}}
\item \href{#method-UserBlueprintsValidationsCreate}{\code{BlueprintsApi$UserBlueprintsValidationsCreate()}}
\item \href{#method-clone}{\code{BlueprintsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$new(apiClient)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{apiClient}}{A configurable \code{ApiClient} instance. If none provided, a new client with default configuration will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsBlueprintsBlueprintChartList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsBlueprintsBlueprintChartList}{}}}
\subsection{Method \code{ProjectsBlueprintsBlueprintChartList()}}{
Retrieve a blueprint chart by blueprint id.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$ProjectsBlueprintsBlueprintChartList(projectId, blueprintId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{blueprintId}}{character. The blueprint ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a blueprint chart by blueprint id.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A blueprint chart based on the blueprint id.
\itemize{
}
\item \strong{\code{404}} No blueprint data found.
\itemize{
}
}
}

\subsection{Returns}{
\link{BlueprintChartRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
blueprintId <- 'blueprintId_example' # character | The blueprint ID.

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsBlueprintsBlueprintChartList(projectId, blueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsBlueprintsBlueprintDocsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsBlueprintsBlueprintDocsList}{}}}
\subsection{Method \code{ProjectsBlueprintsBlueprintDocsList()}}{
Retrieve blueprint tasks documentation.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$ProjectsBlueprintsBlueprintDocsList(projectId, blueprintId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{blueprintId}}{character. The blueprint ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve blueprint tasks documentation.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The task documentation for a blueprint.
\itemize{
}
\item \strong{\code{404}} Model document missing.
\itemize{
}
}
}

\subsection{Returns}{
list( \link{BlueprintListDocumentsResponse} )
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
blueprintId <- 'blueprintId_example' # character | The blueprint ID.

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsBlueprintsBlueprintDocsList(projectId, blueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsBlueprintsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsBlueprintsList}{}}}
\subsection{Method \code{ProjectsBlueprintsList()}}{
List blueprints
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$ProjectsBlueprintsList(projectId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
List appropriate blueprints for the project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The list of blueprints
\itemize{
}
}
}

\subsection{Returns}{
list( \link{BlueprintResponse} )
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsBlueprintsList(projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsBlueprintsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsBlueprintsRetrieve}{}}}
\subsection{Method \code{ProjectsBlueprintsRetrieve()}}{
Retrieve a blueprint by its ID.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$ProjectsBlueprintsRetrieve(projectId, blueprintId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID.}

\item{\code{blueprintId}}{character. The blueprint ID.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a blueprint by its ID.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A blueprint based on its blueprint ID.
\itemize{
}
\item \strong{\code{404}} This resource does not exist.
\itemize{
}
}
}

\subsection{Returns}{
\link{BlueprintResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID.
blueprintId <- 'blueprintId_example' # character | The blueprint ID.

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsBlueprintsRetrieve(projectId, blueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsBlueprintChartList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsBlueprintChartList}{}}}
\subsection{Method \code{ProjectsModelsBlueprintChartList()}}{
Retrieve a reduced model blueprint chart by model id.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$ProjectsModelsBlueprintChartList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a reduced model blueprint chart by model id. The model blueprint charts are reduced from the full blueprint charts to show only those sections of the blueprint that were actually used in the model, given the selected featurelist.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A reduced model blueprint chart based on the model id.
\itemize{
}
\item \strong{\code{404}} No model found for given projectId and modelId.
\itemize{
}
}
}

\subsection{Returns}{
\link{BlueprintChartRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsModelsBlueprintChartList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsBlueprintDocsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsBlueprintDocsList}{}}}
\subsection{Method \code{ProjectsModelsBlueprintDocsList()}}{
Retrieve task documentation for a reduced model blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$ProjectsModelsBlueprintDocsList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve task documentation for a reduced model blueprint. The model blueprint is reduced from the full blueprint to show only those sections of the blueprint that were actually used in the model, given the selected featurelist.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} The task documentation for a reduced model blueprint.
\itemize{
}
\item \strong{\code{404}} No model found for given projectId and modelId.
\itemize{
}
}
}

\subsection{Returns}{
list( \link{BlueprintListDocumentsResponse} )
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsModelsBlueprintDocsList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsLogsList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsLogsList}{}}}
\subsection{Method \code{ProjectsModelsLogsList()}}{
Retrieve an archive (tar.gz) of the logs produced and persisted by a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$ProjectsModelsLogsList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve an archive (tar.gz) of the logs produced and persisted by a model. Note that only blueprints with custom tasks create persistent logs - this will not work with any other type of model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} An archive (tar.gz) of the logs produced and persisted by a model.
\itemize{
}
\item \strong{\code{403}} User does not have permissions to fetch model logs.
\itemize{
}
\item \strong{\code{404}} Logs for this model could not be found.
\itemize{
}
}
}

\subsection{Returns}{
\link{PersistentModelLogsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsModelsLogsList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ProjectsModelsTrainingArtifactList"></a>}}
\if{latex}{\out{\hypertarget{method-ProjectsModelsTrainingArtifactList}{}}}
\subsection{Method \code{ProjectsModelsTrainingArtifactList()}}{
Retrieve an archive (tar.gz) of the artifacts produced and persisted by a model.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$ProjectsModelsTrainingArtifactList(projectId, modelId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project ID}

\item{\code{modelId}}{character. The model ID}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve an archive (tar.gz) of the artifacts produced and persisted by a model. Note that only blueprints with custom tasks create these artifacts - this will not work with any other type of model.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} An archive (tar.gz) of the artifacts produced by this model.
\itemize{
}
\item \strong{\code{403}} User does not have permissions to fetch this artifact.
\itemize{
}
\item \strong{\code{404}} The model with this modelID does not have any artifacts.
\itemize{
}
}
}

\subsection{Returns}{
\link{CustomModelArtifactsResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project ID
modelId <- 'modelId_example' # character | The model ID

api.instance <- BlueprintsApi$new()
result <- api.instance$ProjectsModelsTrainingArtifactList(projectId, modelId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsBulkValidationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsBulkValidationsCreate}{}}}
\subsection{Method \code{UserBlueprintsBulkValidationsCreate()}}{
Validate many user blueprints.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsBulkValidationsCreate(
  userBlueprintBulkValidationRequest = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintBulkValidationRequest}}{\link{UserBlueprintBulkValidationRequest}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Validate many user blueprints, optionally using a specific project. Any non-existent or inaccessible user blueprints will be ignored.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Validated many user blueprints successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project was not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsBulkValidationResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintBulkValidationRequest <- UserBlueprintBulkValidationRequest$new() # UserBlueprintBulkValidationRequest |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsBulkValidationsCreate(userBlueprintBulkValidationRequest=userBlueprintBulkValidationRequest)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsCreate}{}}}
\subsection{Method \code{UserBlueprintsCreate()}}{
Create a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsCreate(userBlueprintCreate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintCreate}}{\link{UserBlueprintCreate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Created the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Project not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintCreate <- UserBlueprintCreate$new() # UserBlueprintCreate |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsCreate(userBlueprintCreate=userBlueprintCreate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsDelete"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsDelete}{}}}
\subsection{Method \code{UserBlueprintsDelete()}}{
Delete a user blueprint.
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsDelete(userBlueprintId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete a user blueprint, specified by the `userBlueprintId`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Successfully deleted the specified blueprint, if it existed.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsDelete(userBlueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsDeleteMany"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsDeleteMany}{}}}
\subsection{Method \code{UserBlueprintsDeleteMany()}}{
Delete user blueprints.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsDeleteMany(userBlueprintsBulkDelete = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintsBulkDelete}}{\link{UserBlueprintsBulkDelete}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Delete user blueprints, specified by `userBlueprintIds`.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} A list of user blueprints successfully and unsuccessfully deleted.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsBulkDeleteResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintsBulkDelete <- UserBlueprintsBulkDelete$new() # UserBlueprintsBulkDelete |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsDeleteMany(userBlueprintsBulkDelete=userBlueprintsBulkDelete)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsFromBlueprintIdCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsFromBlueprintIdCreate}{}}}
\subsection{Method \code{UserBlueprintsFromBlueprintIdCreate()}}{
Clone a blueprint from a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsFromBlueprintIdCreate(
  userBlueprintCreateFromBlueprintId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintCreateFromBlueprintId}}{\link{UserBlueprintCreateFromBlueprintId}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Clone a blueprint from a project.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Created the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Project or blueprint not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromBlueprintId <- UserBlueprintCreateFromBlueprintId$new() # UserBlueprintCreateFromBlueprintId |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsFromBlueprintIdCreate(userBlueprintCreateFromBlueprintId=userBlueprintCreateFromBlueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsFromCustomTaskVersionIdCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsFromCustomTaskVersionIdCreate}{}}}
\subsection{Method \code{UserBlueprintsFromCustomTaskVersionIdCreate()}}{
Create a user blueprint from a single custom task.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsFromCustomTaskVersionIdCreate(
  userBlueprintCreateFromCustomTaskVersionIdPayload = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintCreateFromCustomTaskVersionIdPayload}}{\link{UserBlueprintCreateFromCustomTaskVersionIdPayload}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Create a user blueprint from a single custom task.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Created the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Custom task version or custom task not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromCustomTaskVersionIdPayload <- UserBlueprintCreateFromCustomTaskVersionIdPayload$new() # UserBlueprintCreateFromCustomTaskVersionIdPayload |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsFromCustomTaskVersionIdCreate(userBlueprintCreateFromCustomTaskVersionIdPayload=userBlueprintCreateFromCustomTaskVersionIdPayload)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsFromUserBlueprintIdCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsFromUserBlueprintIdCreate}{}}}
\subsection{Method \code{UserBlueprintsFromUserBlueprintIdCreate()}}{
Clone a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsFromUserBlueprintIdCreate(
  userBlueprintCreateFromUserBlueprintId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintCreateFromUserBlueprintId}}{\link{UserBlueprintCreateFromUserBlueprintId}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Clone a user blueprint.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Created the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} User blueprint or project not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintCreateFromUserBlueprintId <- UserBlueprintCreateFromUserBlueprintId$new() # UserBlueprintCreateFromUserBlueprintId |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsFromUserBlueprintIdCreate(userBlueprintCreateFromUserBlueprintId=userBlueprintCreateFromUserBlueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsInputTypesList"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsInputTypesList}{}}}
\subsection{Method \code{UserBlueprintsInputTypesList()}}{
Retrieve input types.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsInputTypesList(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the input types which can be used with User Blueprints.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully retrieved the input types.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsInputTypesResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsInputTypesList()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsList"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsList}{}}}
\subsection{Method \code{UserBlueprintsList()}}{
List user blueprints.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsList(offset, limit, projectId = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. The number of results to skip (for pagination).}

\item{\code{limit}}{integer. The max number of results to return.}

\item{\code{projectId}}{character. The id of the project, used to filter for original project_id.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Fetch a list of the user blueprints the current user has access to


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Fetched the list of the accessible user blueprints successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | The number of results to skip (for pagination).
limit <- 100 # integer | The max number of results to return.
projectId <- 'projectId_example' # character | The id of the project, used to filter for original project_id.

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsList(offset, limit, projectId=projectId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsPatch"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsPatch}{}}}
\subsection{Method \code{UserBlueprintsPatch()}}{
Update a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsPatch(
  userBlueprintId,
  userBlueprintUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{userBlueprintUpdate}}{\link{UserBlueprintUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update a user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Updated the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} User blueprint not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsDetailedItem}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
userBlueprintUpdate <- UserBlueprintUpdate$new() # UserBlueprintUpdate |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsPatch(userBlueprintId, userBlueprintUpdate=userBlueprintUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsProjectBlueprintsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsProjectBlueprintsCreate}{}}}
\subsection{Method \code{UserBlueprintsProjectBlueprintsCreate()}}{
Add user blueprints to a project.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsProjectBlueprintsCreate(
  userBlueprintAddToMenu = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintAddToMenu}}{\link{UserBlueprintAddToMenu}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Add a list of user blueprints, by id, to a specified (by id) project's repository.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully added the user blueprints to the project's repository.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintAddToMenuResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintAddToMenu <- UserBlueprintAddToMenu$new() # UserBlueprintAddToMenu |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsProjectBlueprintsCreate(userBlueprintAddToMenu=userBlueprintAddToMenu)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsRetrieve"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsRetrieve}{}}}
\subsection{Method \code{UserBlueprintsRetrieve()}}{
Retrieve a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsRetrieve(
  editMode,
  decompressedBlueprint,
  isInplaceEditor,
  userBlueprintId,
  projectId = NULL,
  getDynamicLabels = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{editMode}}{character. Whether to retrieve the extra blueprint metadata for editing.}

\item{\code{decompressedBlueprint}}{character. Whether to retrieve the blueprint in the decompressed format.}

\item{\code{isInplaceEditor}}{character. Whether the request is sent from the in place user BP editor.}

\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{projectId}}{character. String representation of ObjectId for the currently active project. The user blueprint is retrieved when this project is active.}

\item{\code{getDynamicLabels}}{character. Whether to add dynamic labels to a decompressed blueprint.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve a user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Retrieved the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project or user blueprint not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsRetrieveResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
editMode <- FALSE # character | Whether to retrieve the extra blueprint metadata for editing.
decompressedBlueprint <- FALSE # character | Whether to retrieve the blueprint in the decompressed format.
isInplaceEditor <- FALSE # character | Whether the request is sent from the in place user BP editor.
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
projectId <- 'projectId_example' # character | String representation of ObjectId for the currently active project. The user blueprint is retrieved when this project is active.
getDynamicLabels <- FALSE # character | Whether to add dynamic labels to a decompressed blueprint.

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsRetrieve(editMode, decompressedBlueprint, isInplaceEditor, userBlueprintId, projectId=projectId, getDynamicLabels=getDynamicLabels)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsSharedRolesList"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsSharedRolesList}{}}}
\subsection{Method \code{UserBlueprintsSharedRolesList()}}{
Get a list of users, groups and organizations that have an access to this user blueprint
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsSharedRolesList(
  offset,
  limit,
  userBlueprintId,
  id = NULL,
  name = NULL,
  shareRecipientType = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{integer. This many results will be skipped}

\item{\code{limit}}{integer. At most this many results are returned}

\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{id}}{character. Only return roles for a user, group or organization with this identifier.}

\item{\code{name}}{character. Only return roles for a user, group or organization with this name.}

\item{\code{shareRecipientType}}{Enum < \link{user, group, organization} > List access controls for recipients with this type.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Get a list of users, groups and organizations that have an access to this user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully retrieved roles.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintSharedRolesListResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
offset <- 0 # integer | This many results will be skipped
limit <- 10 # integer | At most this many results are returned
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
id <- 'id_example' # character | Only return roles for a user, group or organization with this identifier.
name <- 'name_example' # character | Only return roles for a user, group or organization with this name.
shareRecipientType <- 'shareRecipientType_example' # character | List access controls for recipients with this type.

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsSharedRolesList(offset, limit, userBlueprintId, id=id, name=name, shareRecipientType=shareRecipientType)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsSharedRolesPatchMany"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsSharedRolesPatchMany}{}}}
\subsection{Method \code{UserBlueprintsSharedRolesPatchMany()}}{
Share a user blueprint with a user, group, or organization
Produces: NA
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsSharedRolesPatchMany(
  userBlueprintId,
  sharedRolesUpdate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintId}}{character. Used to identify a specific user-owned blueprint.}

\item{\code{sharedRolesUpdate}}{\link{SharedRolesUpdate}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Share a user blueprint with a user, group, or organization


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{204}} Roles updated successfully
\itemize{
}
\item \strong{\code{400}} Bad Request
\itemize{
}
\item \strong{\code{403}} User can view entity but does not have permission to grant these roles on the entity.
\itemize{
}
\item \strong{\code{404}} Either the entity does not exist or the user does not have permissions to view the entity.
\itemize{
}
\item \strong{\code{409}} The request would leave the entity without an owner.
\itemize{
}
\item \strong{\code{422}} The request was formatted improperly.
\itemize{
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintId <- 'userBlueprintId_example' # character | Used to identify a specific user-owned blueprint.
sharedRolesUpdate <- SharedRolesUpdate$new() # SharedRolesUpdate |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsSharedRolesPatchMany(userBlueprintId, sharedRolesUpdate=sharedRolesUpdate)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsTaskParametersCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsTaskParametersCreate}{}}}
\subsection{Method \code{UserBlueprintsTaskParametersCreate()}}{
Validate task parameters.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsTaskParametersCreate(
  userBlueprintTaskParameterValidation = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintTaskParameterValidation}}{\link{UserBlueprintTaskParameterValidation}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Validate that each value assigned to specified task parameters are valid.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Accepted validation parameters for a task in the context of User Blueprints.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Custom task version not found
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsValidateTaskParametersResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintTaskParameterValidation <- UserBlueprintTaskParameterValidation$new() # UserBlueprintTaskParameterValidation |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsTaskParametersCreate(userBlueprintTaskParameterValidation=userBlueprintTaskParameterValidation)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsTasksList"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsTasksList}{}}}
\subsection{Method \code{UserBlueprintsTasksList()}}{
Retrieve tasks for blueprint construction.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsTasksList(
  projectId = NULL,
  blueprintId = NULL,
  userBlueprintId = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectId}}{character. The project id to use for task retrieval}

\item{\code{blueprintId}}{character. The blueprint id to use for task retrieval}

\item{\code{userBlueprintId}}{character. The user blueprint id to use for task retrieval}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Retrieve the available tasks, organized into categories, which can be used to create or modify User Blueprints.


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{200}} Successfully retrieved the tasks.
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project or user blueprint not found.
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintTasksResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
projectId <- 'projectId_example' # character | The project id to use for task retrieval
blueprintId <- 'blueprintId_example' # character | The blueprint id to use for task retrieval
userBlueprintId <- 'userBlueprintId_example' # character | The user blueprint id to use for task retrieval

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsTasksList(projectId=projectId, blueprintId=blueprintId, userBlueprintId=userBlueprintId)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UserBlueprintsValidationsCreate"></a>}}
\if{latex}{\out{\hypertarget{method-UserBlueprintsValidationsCreate}{}}}
\subsection{Method \code{UserBlueprintsValidationsCreate()}}{
Validate a user blueprint.
Produces: "application/json"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$UserBlueprintsValidationsCreate(
  userBlueprintValidation = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userBlueprintValidation}}{\link{UserBlueprintValidation}.}

\item{\code{...}}{Optional. Additional named parameters to be passed downward.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Validate a user blueprint


Response status codes, messages, and headers:
\itemize{
\item \strong{\code{201}} Validated the user blueprint successfully
\itemize{
}
\item \strong{\code{401}} User is not authorized.
\itemize{
}
\item \strong{\code{403}} User does not have access to this functionality.
\itemize{
}
\item \strong{\code{404}} Referenced project not found.
\itemize{
}
\item \strong{\code{422}} Unprocessable Entity
\itemize{
}
}
}

\subsection{Returns}{
\link{UserBlueprintsValidationResponse}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
library(datarobot.apicore)
userBlueprintValidation <- UserBlueprintValidation$new() # UserBlueprintValidation |

api.instance <- BlueprintsApi$new()
result <- api.instance$UserBlueprintsValidationsCreate(userBlueprintValidation=userBlueprintValidation)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BlueprintsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
