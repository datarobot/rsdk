% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WaitForAsyncReturn.R
\name{WaitForAsyncReturn}
\alias{WaitForAsyncReturn}
\title{Wait for a job or task to return}
\usage{
WaitForAsyncReturn(
  routeString,
  maxWait = 600,
  addUrl = TRUE,
  failureStatuses = c()
)
}
\arguments{
\item{routeString}{character. The path to make the request on.}

\item{maxWait}{integer. Maximum time to wait (in seconds) for asynchronous job or task to complete.}

\item{addUrl}{logical. Should the endpoint be prepended to the routeString? (Default TRUE).}

\item{failureStatuses}{character. A vector of error statuses to look for. This function will terminate
early if any of these statuses are received in an API response.}
}
\value{
The result of the asynchronous task, if it finishes successfully.
}
\description{
Helper function to process async responses from the DataRobot Public API.
}
\details{
The DataRobot Public API uses the following pattern for handling asynchronous requests:
\enumerate{
\item The client sends a request.
\item The server constructs a task request to send to a worker, then sets up a resource the client can poll to determine when the task is finished.
\item The client receives a \verb{202 Accepted} response with a \code{Location} HTTP header pointing to the resource to poll.
\item On the server, the worker finishes the task and updates the polling resource.
\item The client, on the next poll, receives a \verb{303 See Other} response with a new \code{Location} header pointing to the finished result.
}

\code{WaitForAsyncReturn} automates most of this processing.
}
\examples{
{
\dontrun{
# To invoke when crafting a URL by hand
routeString <- UrlJoin("projects", projectId, "jobs", jobId)
response <- WaitForAsyncReturn(routeString, maxWait, failureStatuses = JobFailureStatuses)


# To invoke after another function call that includes the Location header in the response
postResponse <- DataRobotPOST(routeString, body = body, addUrl = TRUE, returnRawResponse = TRUE)
response <- WaitForAsyncReturn(GetRedirectFromResponse(postResponse), addUrl = FALSE)
}
}
}
